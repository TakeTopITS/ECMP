From: =?gb2312?B?08kgV2luZG93cyBJbnRlcm5ldCBFeHBsb3JlciA4ILGjtOY=?=
Subject: =?gb2312?B?uaTX98H3xKOw5aO6us/NrMbAyfMgyei8xg==?=
Date: Wed, 7 Dec 2011 16:36:22 +0800
MIME-Version: 1.0
Content-Type: multipart/related;
	type="multipart/alternative";
	boundary="----=_NextPart_000_0000_01CCB4FE.5AC00BD0"
X-MimeOLE: Produced By Microsoft MimeOLE V6.1.7600.16807

这是 MIME 格式的多方邮件。

------=_NextPart_000_0000_01CCB4FE.5AC00BD0
Content-Type: image/jpeg
Content-Transfer-Encoding: base64
Content-Location: http://www.taketopsoft.com/taketoppro/images_blue/main_top_l.jpg

/9j/4AAQSkZJRgABAgAAZABkAAD/7AARRHVja3kAAQAEAAAAZAAA/+4ADkFkb2JlAGTAAAAAAf/b
AIQAAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQICAgICAgICAgIC
AwMDAwMDAwMDAwEBAQEBAQECAQECAgIBAgIDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMD
AwMDAwMDAwMDAwMDAwMDAwMD/8AAEQgAHwAdAwERAAIRAQMRAf/EAJwAAAICAwEAAAAAAAAAAAAA
AAIIBgkBBAcKAQABBQEBAAAAAAAAAAAAAAACAQQGBwgDCRAAAQMDAgQEBAQHAAAAAAAAAQIDBQQG
BxESACExExQVFwhRIhYYQXEyV7EkNTYnCRkRAAECBAMFBgQCCwAAAAAAAAECAxESBAUAIRMxFBUG
B1FhIjIWCEGBsyShYnGRQiNDU5NEVNQX/9oADAMBAAIRAxEAPwD2x2lBXLkK1rbvpzJt52um8YGH
uZi3LcjMcOxMDSzUdTyFBHsv3RYVyytfV0FHUoS9VOVCUVFUlb7dPTNrTStze4VtFabg/bNwo6hV
M8tvVcVVaiyhRSVDTqGUISoiIQETAGVTiyJlQuipam40bNcqqqWkPNJWEo0vAFpCgmK0OeWMMlAd
mJCca3Adf81ZQBPzFKY7EC1AfmrE5cUOfU8z+PDUX+jyBtdvBOXmrQNkcvu9nzMMPBZKlUFCtrCD
GEQwTl2/bn9cTHtOMem09+9uTeXxjsODpyPXE415/wAD8DwSeYKRQBFroIH81b/tYDhD8pXvlXKC
AcmMo7Ijd4iOD9M7h/erKO7p/TcP6aa6bdPSb9WvLTrry4H1BR+bhdDsj5q39P8AlfhheDvRhv1T
GMP7fbs27vD5xh34PCriU4ZxEkHmcYWDqOYH9qxQ15jTqOE5lSfUdw7q5/6qsFZFp4NRiOe6tfTT
im+T/wBU11ZzvHL2WI33PxNoUl752zxMsWtLe1bC2S6uFWjLt6xxpHLyvAuz03Ttrj0rpg9t8K0o
U6NG0DjVFq90Nr5Ks9t5aqeUWq6robTRtCp4vc6YuzUzSolqmUltEARmlJz8JMQRikrh0Pc5mutb
fWrsKddVVvGTcmFyAPODzFUVZpIifEdpETjlf/OyNxlkKatufznaGeH4+1qbzW0Yv2nYBt6vs5d1
STkHTXtK0cDDS0jc1DabGtY7EJQya9am0rdbQdi4hzd7uEc50L9l5HtTFjutLUsrqammvFxrqppt
ImXTqadd02CtCVDUU2VSeGWOJHYvbvT8t1bF45mqHLhQ1VM4KZtyjZZYWuJRqhaZ1uyr/hoIhCJl
GH+8RX/Yh6G+U37519EfbKbg7EMbg849LNib08KJnwSXvMNaTy81AqTI/wAkEmoBbFRerKP/AKJ6
20U8O4vvmlN4ZN41dOaPllymm75sTzgtT6T9OTJ3zh+hN+zNpSTdsI5w2w78NTi+4fBYsxZSdneW
cX49IPcCdN9lwjvMFk6EqWOXM8+CvFtL19uDhyBr6j8Hl9+AttSWrTRpAzFK19NOEeyZ7ua3DdkS
9p2g/Hu3nN5IzboFzMSldrKr8t35LpqpSKNWmVp1GGrm65txxlDTjDiVpJSeMn+9rq5zB0O6f01/
5ctdc9WXUUtI3cAytVJSLFKw2kKcCSjXcKSlhuM04UVAHGgvaj0vsXWDnty28wXRiltNrcdqnaMO
I3mr/furg2gEr0wFo1DCVM6QogqAKme1DFtgVOT0e4vMeZo2tk5YSFNHQjuZLchHbmYuB1tMhcl4
RrVyNVoiqemaV5TGLaacG4vOJ3lCTVXsq9tXVy1UFX1d6oKudDdrywpSKDQqJlByZWpXTIILi58k
xgiJKymBTi6PeN7ouRLtS0XQ3p7bLVwazVbanatKGIU60pKSxRO6gmKgPu6gqg4RI0FCCjYn9Quf
ZIKbw6O+cBKe7xWNBVC0013j0ns695VYrxJeJ3d4B0Huak+jPCqX1jHTG7b9HTlG3V8kuz8vZ8Nm
MCcSc9LTzHU3HzfGGl5o9sM+2OJBEZGsmjgrboYWkyY9Ax1sWpFwdVUYoylXu10LFwUbQxEiurpb
DpqGsMjGsNvB1lKWnQvcgBJA4ecPrFPredNLvK6h5awl9kJStS1FSQC6SJVEiBJI2HMYVqqp20NN
t6yqZLCUpVpLMwCQEqilsAxGcUgJO0ADG2cn23p81BkLqN+/DeWCknRwp3D6MHMoUdB1AHXT5eOZ
t7xVA7pMRCIqGIgZZmLkTHLuBhkYk4A1TBQIhYUTl4H4gZwIEgESJviQIiEIApIZNt8BQVQZGKAV
pd3Ygy2U6AaO7ybIJC9ACsq3Eo06HhTbXYzRp0jLLeGFeCG3N0CWOQ2GHwwW9NgKADopzPqTNPHO
bthkon5DYYYP1PtzkfAZH/SQB6O5Y3bt41UE/Re3TfodN3XlrwnD3ZI/ayQ/n08If1dnz2fHBb6m
eaV7UjGGk5t7PL29+P/Z

------=_NextPart_000_0000_01CCB4FE.5AC00BD0
Content-Type: image/jpeg
Content-Transfer-Encoding: base64
Content-Location: http://www.taketopsoft.com/taketoppro/images_blue/main_top_r.jpg

/9j/4AAQSkZJRgABAgAAZABkAAD/7AARRHVja3kAAQAEAAAAZAAA/+4ADkFkb2JlAGTAAAAAAf/b
AIQAAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQICAgICAgICAgIC
AwMDAwMDAwMDAwEBAQEBAQECAQECAgIBAgIDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMD
AwMDAwMDAwMDAwMDAwMDAwMD/8AAEQgAHwAFAwERAAIRAQMRAf/EAHoAAQEBAAAAAAAAAAAAAAAA
AAYHCgEAAwEAAAAAAAAAAAAAAAAABAUGAxAAAAYCAQMEAwAAAAAAAAAAAQIDBAUGEQcSACExQRMU
FhcnNxEAAgEDAgMFCQEAAAAAAAAAAQIDERIEAAUhMRNRcTIjZEGBscFCglM0FRb/2gAMAwEAAhED
EQA/ANsLiDs7S1xFAPsy4rN5+v2O3tbMWP1ulYo81Rk6tDP4Ncw0NWsPoKYLd2zlISxiD5o4Yqcn
K6Tkqbe1XNxZMB95G3YQlhmSAx3ZXSZJupIsn7AlEqCBlIvaJhIFEaFDI8e2LMuYu3nJejo0ge2O
65LLuPSt5yL9NvYKV0nllP3LQDdv5pt7075+0aQHHHOc59M9C44X/M5a+txO38Wae/Ws6N/YxR6b
K4/dh6BS1jD8l0B77Q4+jbeZ+3zDkIDO6QWHBuXkMec479PcfblO15kVwoMrDavfHnAfA/PmNLp8
1P6WLJet/Syl8Q53YhpSvOns92o+72PSFZOBduGWy05pixtqESmOqdpEbvIqWcUo1hMSNNRfkOFo
15DRnJcioJIg7KB0xOqnihj23cFWYKYDAxhLefFUFTPYK9e0KyvJQFONpt8LDQj5iGWMkZFQsgHl
PQgpHdw6VxoVUEg8AQTzB1//2Q==

------=_NextPart_000_0000_01CCB4FE.5AC00BD0
Content-Type: image/jpeg
Content-Transfer-Encoding: base64
Content-Location: http://www.taketopsoft.com/taketoppro/images_blue/main_n_l.jpg

/9j/4AAQSkZJRgABAgAAZABkAAD/7AARRHVja3kAAQAEAAAAZAAA/+4ADkFkb2JlAGTAAAAAAf/b
AIQAAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQICAgICAgICAgIC
AwMDAwMDAwMDAwEBAQEBAQECAQECAgIBAgIDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMD
AwMDAwMDAwMDAwMDAwMDAwMD/8AAEQgAGgAHAwERAAIRAQMRAf/EAIIAAAMBAAAAAAAAAAAAAAAA
AAQFBwoBAAMBAAAAAAAAAAAAAAAAAAQFBgcQAAEDAwEGBwAAAAAAAAAAAAIBAwQRBQYAITESEzMH
YVIjY2Q2NxEAAgEBBgIEDwAAAAAAAAAAAQIDEQAhMRIEBUET8DJDNlFhgaGxwfEiQjNzNBUlNf/a
AAwDAQACEQMRAD8A2ovybeWHM5zKtNlueWt4sGVs3i7WqBdZ8O9raAvTDkGRPZkP25iHMUeQ2wTY
tA2KDRRRdX8endNxO0xSSpoG1BiKq7LmTmGM5gpAYkVrmDCpN1DS2UNqNK+1ne5IYZN2XRrqBJIi
uyymPmAoWrkysBTJla4VJIBE7m3pxrAUjJFcUD7e2wear3CPqYjGUiQOUfGgqe6o7Nnjp/Ht/wC5
EpkQOdWxpQ8J3u9tpyXda7DyVi90bcik5gLuTjQ1zcbhTz2BnqK9vxWrVR7d2tVJTRRSuGwiQqpU
aKKoW9KISJXRGnUje2IxOrPGnbv4cfJZdKJPwIkZCCdCuNKGkIwwPps9l/hbHS/G4/U6H0kN3x/L
7XDoRO8Pw/0Gx+tw6Y2ZDu03W+wHXx+T2fj9dLf/2Q==

------=_NextPart_000_0000_01CCB4FE.5AC00BD0
Content-Type: image/jpeg
Content-Transfer-Encoding: base64
Content-Location: http://www.taketopsoft.com/taketoppro/images_blue/main_n_r.jpg

/9j/4AAQSkZJRgABAgAAZABkAAD/7AARRHVja3kAAQAEAAAAZAAA/+4ADkFkb2JlAGTAAAAAAf/b
AIQAAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQICAgICAgICAgIC
AwMDAwMDAwMDAwEBAQEBAQECAQECAgIBAgIDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMD
AwMDAwMDAwMDAwMDAwMDAwMD/8AAEQgAGgAGAwERAAIRAQMRAf/EAIEAAQEBAAAAAAAAAAAAAAAA
AAYECgEBAQEBAAAAAAAAAAAAAAAABQYEBxAAAAUDAAcJAQAAAAAAAAAAAQIDBAURBgcAIUESExQ0
MYEiMkPDZDU3JxEAAgIBAQUGBQUAAAAAAAAAAQIDBBEhADETNAVRcRIiMiRhwWLCI3SkFSU1/9oA
DAMBAAIRAxEAPwDazJxluxoW+xYW3bzeInbjGBm4ROEjU4CQYmty57obqurfTbkhHL9nMWu2Mi4U
bnWSIZQCmDfEQt4pbs8sks087Tw1y6MZZCynixRkKxcsoZZW8QUjJC50BB5pYq9MrmFYK1Za80/C
kQRRhHXgzSqWULhmR4V8BbIXLYGSCBc3cR+DaypmpwMXIDFEhOZEwnFXHmUFBED8sXh7pW47DVrT
Vo7U6YhlsflUgUHOQDge6pjXtzk7sa7T93rD8OqxjAf+QQAcQHOal0nXHlxgb853bQThCCjalALQ
MhsBEPFq/nOVAA2soUoJqbe3v021HdZLAAPmosP3NQ9naBsTexwqpyo/skGo1Ps750+Ome7OyG8f
sMXdL+p+r5vx7MvTfI9rf0Dq+qxzPJt38zV3fPaj6pv6fyf+ou/9B1D0/V9nj2//2Q==

------=_NextPart_000_0000_01CCB4FE.5AC00BD0
Content-Type: image/gif
Content-Transfer-Encoding: base64
Content-Location: http://www.taketopsoft.com/taketoppro/Images_blue/Processing.gif

R0lGODlhrwAgALMAAO/v797e3tbW1sXFxb29vbW1tZSUlISEhO9rAFJSUgAAAP///wAAAAAAAAAA
AAAAACH/C05FVFNDQVBFMi4wAwEAAAAh+QQFCgALACwAAAAArwAgAAAE/xDJSek4o+rNu/9gKI5k
aX5HWgXA6b5wLM+UQFTpUQsC7f/AYAmQKlByEwCvJ2w6n74cE4GULAPQrHYLIqQMk2pgyS2by4bU
japCXM/wuFBwSLdSCcSYR9lj5YCBGwIGBhkTBWoaY0lLAn+CkYEDhYVMdIcdjnySnYCVlZAem6Ke
pmaEoCF+NAoUrhsKsrOwrye1ErgTtboIrrS9cJQGUx+lMbjJtLnMFcEhv8DRsL/Nvs6SAWtny73T
y77Ssi/eu9XM4s+nO5stt+i659TWvCbi4ePSzepcAgMEAAOS2ETG3q5r1MDNu0ZPxDhb2BjCywUM
TsCL20IsGfDGIMOFCMX1SaznkGJFfPhmobMGxx/GjFuqgTxI09w9Z8FIjpzJc92IYzB00jwZkcPD
oiflJU0JThDQDaxmCKVYUwO/o7bOfdw69BU/M1E/tEMWTmJZiLE6YPVqEmvPkSy/NlHiSARBF26b
MlVZlITOZPseRmMb564HRhL28Hjqs/EMxY8mRF5RMPFix5iBhHVzueASd5lDa6F7iZNi0aihdKzc
MbVrH6etcNJT+bVtGK1r177Nu4Tu2YkZ9x7OAUCp3cSTwxgjXHnyCAAh+QQFCgALACwAAAAAjgAV
AAAEkXDJSesSNuvNu/9gKI6LUVbEQK5s676T2hnHAd94/hp8ZcY1m25ILFp4P02QYGw6cYMeJUkI
Pq9YFk9GCQS52bBYgwxIaCXreI0NEAiYCTJTNbPvTcH7bQ8Y4niBYXp7AwCCiGNue0yJjlmEj5JY
AICTl5iZmJUCnZ6aoCueo5ahph0BngOfp62ur7CxsrNrChEAIfkEBQoACwAsAAAAAJQAFQAABKRw
yUmpMDXrzbv/YCiOJIVlQqmubOtuQWoap1S8eK7vE0HIElpNVuMZj8iMjxCYCJ3JqBQpWEIzxal2
Wxr4iLQFYIEBSsbctDoTWI6fhCCFcDjE1/ioQNCceAtmEgMUA3V1d3mJOzF7AmgAiBsXhnWKljyN
fH0elAeBl6AtmZ8adAc3oak4jJseBq2qsSsBsLK2t7i5uru8vb6/wMHCw8TFxokKEQAh+QQFCgAL
ACwHAAAAkwAVAAAEkXDJuQKhOOvNu/9gKI7iQAwYSq5s674gEGBETRk4rO98jwkCmm2S8xmPyA9Q
AJjULkSDKkmtGgNL53BQtHq/sOVs8azgDOC0miQmD7u/tXze/qElgvt8LxeMN39oBXyEhUQSeoaK
cipTi49qBE2QlJWWly8HmpsHjpifLZycoKShBwmcnqWrrK2ur7CxsrOKChEAIfkEBQoACwAsDgAA
AJIAGAAABJpwjbCqvTjrzbv/YCiOmjBkAkWubOu+6yBfA0HAeK7vnnxWAduNRywaST6LUHBsOp+V
5EIghFqvuiRAqMJ6v6KkoED4RQ0GsHq9IQAuaIOZTafH0fX8+p7W+8F4f4JfXYOGh4iJLH2KjS5p
kI6SLgeVBwZMk5qbnEQEhZ2hGQSVBaKnGJaVc6iIChwCBqqMraGklkO1ogWruogRACH5BAUKAAsA
LA4AAACYAB4AAASycAmwqr046827/2AojqEgkGiqrmzLmaclDINr33j+wRcd68CgEMWrzGrDpHJ5
KS5oSKZ0iitCqdjsyjr4SQiEgHZM5gR+ATDYW267B2pC1E0nx8P1PFmw1vvHE3+Cg4SFLQaIiRKG
jDaKiQaNkiuPkZOXmJlUFJqdIEgEnqIgBmyjjApmBRerp54EB2ISiK6iBge4FwSRprWMAbgHc76v
wcSuwaHHogLGy6LBnM+dYNONEQAh+QQFCgALACwPAAEAEQAfAAAEZXDJuQKgOAuRO9hduAUhFWxc
KZ2gurYT60qoQJYsqtapyt6zAHBGxBCOyIEKySSUmgRlcUoUGAxS1/Va3G47yp7kmpU4uZMB+sBe
XGgh9oGCzsgnBtWduB/nO2wJGoBtRAMHZSoRACH5BAUKAAsALAgADgAYABIAAARacMlJ6xI4C2D7
1JrnZUMWiGiKCmpKEGxrvfQpT8BAE4MsGLbALnY5EDoGi+BlWxgOhyQlYKiiBtCDTboYcD3Zo6fa
m2UpX6fVki2j0pIz+lBx18WTJPxGbEUAACH5BAUKAAsALAIAEgAdAA4AAARicMlJq13h0mC0DYKQ
XcRxEB4VroBqvqm6hpLxHoaQBug087deZmAREAjECUhXOhQozwXKQF0AjoTRp6JbdLzVhfEYm3wp
4cXg2C17zWkeOVZtU8/qeRmP92k9bWhRbns9MREAIfkEBQoACwAsAAAPABkAEQAABFtwnEnPujjr
W+v+mUQlE2ieKAoQaTu0nwGDRVYEqAAahn71m4BgmPGxMDzZgsBcCIeATFSTvDCPT5+J91o2L0MB
7jOoWr9g4jZzLao35vMRMwZ1MQPCfaYh1DMRACH5BAUKAAsALAAACAASABgAAARUcIlzyLo4Z0Lp
0ODVUYYQasN4nGBBWWwbz3Rt33iOD4Zx970ZEDjj+TIAWKj3wQwIBJNgigloAlACQEI9ZU1cMEiQ
xUzFmqz1cvZGM+1QAB2+zRcRACH5BAkKAAsALAAAAACvACAAAAS3cMlJq7046827/2AojmRpnmiq
WgOxvnAsv8dhzHiu71J9CLygcBgq+IjIpLJXcy2f0NngGK1aRTeKL3vtejMG4CJwKHzPaDM3gG6j
BVmue96dLgb0/BXg1Pv/gIEkcAaFhoKIM4aLcomOKIQ3h4+UlZZzYpeaIwIEBJmboRsBnqWipxkt
pQMAqK4UnZ54EgECra+npJ+wAgJsuKK3EwC9vsDAxb/HrrW9y7jJz6/O0q8AytXZ2n8RADs=

------=_NextPart_000_0000_01CCB4FE.5AC00BD0
Content-Type: image/jpeg
Content-Transfer-Encoding: base64
Content-Location: http://www.taketopsoft.com/taketoppro/images_blue/main_n_bj.jpg

/9j/4AAQSkZJRgABAgAAZABkAAD/7AARRHVja3kAAQAEAAAAZAAA/+4ADkFkb2JlAGTAAAAAAf/b
AIQAAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQICAgICAgICAgIC
AwMDAwMDAwMDAwEBAQEBAQECAQECAgIBAgIDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMD
AwMDAwMDAwMDAwMDAwMDAwMD/8AAEQgAGgAFAwERAAIRAQMRAf/EAHMAAAMBAAAAAAAAAAAAAAAA
AAQGBwoBAQADAAAAAAAAAAAAAAAAAAUEBgcQAAAEAwkAAAAAAAAAAAAAAAABAwZRkhYCEtJUlNTV
VpYRAAACBgoDAAAAAAAAAAAAAAACARHRA5MV8FGRstJT0wRUlBQFBv/aAAwDAQACEQMRAD8A220u
w+hsTxTX4sXXzvbcrdR32oM6lfz/AANh1nGAJdSq5JTWnswxLSZzuwzQFOH2UiKXCAblmCU54BPW
mhisBSk1XWigSgOEH+uP/9k=

------=_NextPart_000_0000_01CCB4FE.5AC00BD0
Content-Type: image/jpeg
Content-Transfer-Encoding: base64
Content-Location: http://www.taketopsoft.com/taketoppro/images_blue/page_topbj.jpg

/9j/4AAQSkZJRgABAgAAZABkAAD/7AARRHVja3kAAQAEAAAAZAAA/+4ADkFkb2JlAGTAAAAAAf/b
AIQAAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQICAgICAgICAgIC
AwMDAwMDAwMDAwEBAQEBAQECAQECAgIBAgIDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMD
AwMDAwMDAwMDAwMDAwMDAwMD/8AAEQgAHwAHAwERAAIRAQMRAf/EAHkAAQEBAAAAAAAAAAAAAAAA
AAcFCgEBAQEBAAAAAAAAAAAAAAAABgMEBRAAAQEDDQAAAAAAAAAAAAAAAQACUhXwUZGh0RKDBRZW
lwjYEQABAQMGDwAAAAAAAAAAAAAAFAECA/ARkdJTBSFRYaHR8RJScpKTBCTU1f/aAAwDAQACEQMR
AD8A3WRNh8SxEkTNlNVDSjizVg2ihmratSNLDyhpQ/LURLzLwpC17D+69Q3QQw4m0AbqfIN3dnOL
D5kXaSdxYXP1430yPgW94ckL0z//2Q==

------=_NextPart_000_0000_01CCB4FE.5AC00BD0
Content-Type: image/jpeg
Content-Transfer-Encoding: base64
Content-Location: http://www.taketopsoft.com/taketoppro/images_blue/main_top_bj.jpg

/9j/4AAQSkZJRgABAgAAZABkAAD/7AARRHVja3kAAQAEAAAAZAAA/+4ADkFkb2JlAGTAAAAAAf/b
AIQAAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQICAgICAgICAgIC
AwMDAwMDAwMDAwEBAQEBAQECAQECAgIBAgIDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMD
AwMDAwMDAwMDAwMDAwMDAwMD/8AAEQgAHwADAwERAAIRAQMRAf/EAIEAAQEBAAAAAAAAAAAAAAAA
AAcICgEBAQAAAAAAAAAAAAAAAAAABgUQAAEBAwgKAwAAAAAAAAAAABESADITITFRAgMzVQcBQYEi
YkNUBhc3FjZXEQAAAgUHDQEAAAAAAAAAAAAAAxExUQQVIWGh0QIS1PBxgcEiMlLSk9MUVJRV/9oA
DAMBAAIRAxEAPwDcH4y7g/as0XcMyadJPqckbWVRxy/LcF8T5iqAWgp/uvK2O+GClGsJxVVFUo2A
TMi8VDg7qqeGVoVy2pEiMqRevWET3tdQMflsrlZ7qtICQoQjGHNvTrDKILZTvbOaasG4ichUuhtQ
nDyh23h2YNPp7Nql36TMWaQ49rt9BHcETzCmG9IzkH//2Q==

------=_NextPart_000_0000_01CCB4FE.5AC00BD0
Content-Type: text/css;
	charset="gb2312"
Content-Transfer-Encoding: quoted-printable
Content-Location: http://www.taketopsoft.com/taketoppro/css/bluelightmain.css

BODY {
	MARGIN: 2px; FONT-SIZE: 12px
}
TD {
	LINE-HEIGHT: 23px; VERTICAL-ALIGN: top
}
A:visited {
	BACKGROUND: url(../images_blue/MouseVisited.gif)
}
A:hover {
	BACKGROUND: url(../images_blue/MouseHover.gif)
}
BUTTON:hover {
	BACKGROUND: url(../images_blue/MouseHover.gif)
}
INPUT[type=3D'submit']:hover {
	BACKGROUND: url(../images_blue/MouseHover.gif)
}
A:active {
	BACKGROUND: url(../images_blue/MouseActive.gif)
}
BUTTON:active {
	BACKGROUND: url(../images_blue/MouseActive.gif)
}
INPUT[type=3D'submit']:active {
	BACKGROUND: url(../images_blue/MouseActive.gif)
}
#AboveDiv {
	MIN-WIDTH: 1160px
}
.bian {
	BORDER-BOTTOM: #8ab2e5 1px solid; BORDER-LEFT: #8ab2e5 1px solid; =
BORDER-TOP: #8ab2e5 1px solid; BORDER-RIGHT: #8ab2e5 1px solid
}
.bianNoBottom {
	BORDER-BOTTOM: #8ab2e5 0px solid; BORDER-LEFT: #8ab2e5 1px solid; =
BORDER-TOP: #8ab2e5 1px solid; BORDER-RIGHT: #8ab2e5 1px solid
}
.tdMain {
	PADDING-BOTTOM: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px; =
VERTICAL-ALIGN: top; BORDER-RIGHT: #d8d8d8 1px solid; PADDING-TOP: 5px
}
.titlezi {
	LINE-HEIGHT: 30px; COLOR: #336284; FONT-SIZE: 12px; FONT-WEIGHT: bold
}
.ajax__tab_tab {
	LINE-HEIGHT: 15px
}
.inpu {
	BACKGROUND-IMAGE: url(../images_blue/butbj.jpg); BORDER-BOTTOM-STYLE: =
none; TEXT-ALIGN: center; BORDER-RIGHT-STYLE: none; MARGIN: 0px; WIDTH: =
71px; BORDER-TOP-STYLE: none; HEIGHT: 24px; COLOR: #29728d; FONT-SIZE: =
12px; BORDER-LEFT-STYLE: none
}
.inpuLong {
	BACKGROUND-IMAGE: url(../images_blue/butbjlong.jpg); =
BORDER-BOTTOM-STYLE: none; TEXT-ALIGN: center; BORDER-RIGHT-STYLE: none; =
MARGIN: 0px; WIDTH: 110px; BORDER-TOP-STYLE: none; HEIGHT: 24px; COLOR: =
#29728d; FONT-SIZE: 12px; BORDER-LEFT-STYLE: none
}
.inpuLongest {
	BACKGROUND-IMAGE: url(../images_blue/butbjLongest.jpg); =
BORDER-BOTTOM-STYLE: none; TEXT-ALIGN: center; BORDER-RIGHT-STYLE: none; =
MARGIN: 0px; WIDTH: 260px; BORDER-TOP-STYLE: none; HEIGHT: 24px; COLOR: =
#29728d; FONT-SIZE: 12px; BORDER-LEFT-STYLE: none
}
.itemBorder {
	BORDER-BOTTOM: #d8d8d8 1px dotted; BORDER-LEFT: #d8d8d8 1px dotted; =
BORDER-TOP: #d8d8d8 1px dotted; BORDER-RIGHT: #d8d8d8 1px dotted
}
.shuru {
	BORDER-BOTTOM: #bcc6c9 1px solid; BORDER-LEFT: #bcc6c9 1px solid; =
FONT-FAMILY: Arial, Helvetica, sans-serif; COLOR: #666666; FONT-SIZE: =
12px; BORDER-TOP: #bcc6c9 1px solid; BORDER-RIGHT: #bcc6c9 1px solid; =
TEXT-DECORATION: none
}
.headStyle {
	BACKGROUND-IMAGE: url(../images_blue/main_n_bj.jpg); PADDING-BOTTOM: =
5px; MARGIN: 1px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px; PADDING-TOP: =
5px
}
.itemStyle {
	BACKGROUND-COLOR: #f6fafd; HEIGHT: 23px
}
.formBgStyle {
	BACKGROUND-COLOR: #d8d8d8
}
.formItemBgStyle {
	BACKGROUND-COLOR: #f6fafd; BACKGROUND-REPEAT: no-repeat
}
.imgEdit {
	BACKGROUND-IMAGE: url(../images_blue/icon_edit.gif)
}
.imgDel {
	BACKGROUND: url(../images_blue/icon_del.gif)
}
.tdLeft {
	BORDER-BOTTOM: #d8d8d8 0px dotted; BORDER-LEFT: #d8d8d8 1px dotted; =
PADDING-BOTTOM: 5px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px; BORDER-TOP: =
#d8d8d8 1px dotted; BORDER-RIGHT: #d8d8d8 1px dotted; PADDING-TOP: 5px
}
.tdRight {
	BORDER-BOTTOM: #d8d8d8 0px dotted; BORDER-LEFT: #d8d8d8 1px dotted; =
BORDER-TOP: #d8d8d8 1px dotted; BORDER-RIGHT: #d8d8d8 1px dotted
}
.tdLeft3 {
	BORDER-BOTTOM: #d8d8d8 1px dotted; BORDER-LEFT: #d8d8d8 0px dotted; =
BORDER-TOP: #d8d8d8 0px dotted; BORDER-RIGHT: #d8d8d8 1px dotted
}
.tdRight3 {
	BORDER-BOTTOM: #d8d8d8 1px dotted; BORDER-LEFT: #d8d8d8 0px dotted; =
BORDER-TOP: #d8d8d8 0px dotted; BORDER-RIGHT: #d8d8d8 0px dotted
}
.tdTopLine {
	BORDER-BOTTOM: #d8d8d8 0px dotted; BORDER-LEFT: #d8d8d8 0px dotted; =
BORDER-TOP: #d8d8d8 1px dotted; BORDER-RIGHT: #d8d8d8 0px dotted
}
.noBorder {
	BORDER-RIGHT-WIDTH: 0px; BORDER-TOP-WIDTH: 0px; BORDER-BOTTOM-WIDTH: =
0px; BORDER-LEFT-WIDTH: 0px
}
.btnJudge {
	BACKGROUND-IMAGE: url(../images_blue/judge.png); BACKGROUND-REPEAT: =
no-repeat
}
.tabBorder {
	BORDER-BOTTOM: green 1px solid; BORDER-LEFT: green 1px solid; =
BORDER-TOP: green 1px solid; BORDER-RIGHT: green 1px solid
}
.tableBorder {
	BORDER-BOTTOM: #8ab2e5 1px solid; BORDER-LEFT: #8ab2e5 1px solid; =
BORDER-TOP: #8ab2e5 1px solid; BORDER-RIGHT: #8ab2e5 1px solid
}
.calendar {
	BORDER-BOTTOM: #000 2px solid; POSITION: relative; BORDER-LEFT: #fff =
2px solid; DISPLAY: none; FONT-FAMILY: tahoma, verdana, sans-serif; =
BACKGROUND: #c8d0d4; COLOR: #000; FONT-SIZE: 11px; BORDER-TOP: #fff 2px =
solid; CURSOR: default; BORDER-RIGHT: #000 2px solid
}
.calendar TABLE {
	BORDER-BOTTOM: #fff 1px solid; BORDER-LEFT: #000 1px solid; =
FONT-FAMILY: tahoma, verdana, sans-serif; BACKGROUND: #c8d0d4; COLOR: =
#000; FONT-SIZE: 11px; BORDER-TOP: #000 1px solid; CURSOR: default; =
BORDER-RIGHT: #fff 1px solid
}
.calendar .button {
	BORDER-BOTTOM: #000 1px solid; TEXT-ALIGN: center; BORDER-LEFT: #fff =
1px solid; PADDING-BOTTOM: 1px; PADDING-LEFT: 1px; PADDING-RIGHT: 1px; =
BORDER-TOP: #fff 1px solid; BORDER-RIGHT: #000 1px solid; PADDING-TOP: =
1px
}
.calendar THEAD .title {
	BORDER-BOTTOM: #000 1px solid; TEXT-ALIGN: center; BORDER-LEFT: #000 =
1px solid; PADDING-BOTTOM: 1px; PADDING-LEFT: 1px; PADDING-RIGHT: 1px; =
BACKGROUND: #788084; COLOR: #fff; BORDER-TOP: #000 1px solid; =
FONT-WEIGHT: bold; BORDER-RIGHT: #000 1px solid; PADDING-TOP: 1px
}
.calendar THEAD .headrow {
=09
}
.calendar THEAD .daynames {
=09
}
.calendar THEAD .name {
	BORDER-BOTTOM: #000 1px solid; TEXT-ALIGN: center; PADDING-BOTTOM: 2px; =
PADDING-LEFT: 2px; PADDING-RIGHT: 2px; BACKGROUND: #e8f0f4; PADDING-TOP: =
2px
}
.calendar THEAD .weekend {
	COLOR: #f00
}
.calendar THEAD .hilite {
	BORDER-BOTTOM: #000 2px solid; BORDER-LEFT: #fff 2px solid; =
PADDING-BOTTOM: 0px; BACKGROUND-COLOR: #d8e0e4; PADDING-LEFT: 0px; =
PADDING-RIGHT: 0px; BORDER-TOP: #fff 2px solid; BORDER-RIGHT: #000 2px =
solid; PADDING-TOP: 0px
}
.calendar THEAD .active {
	BORDER-BOTTOM: #fff 1px solid; BORDER-LEFT: #000 1px solid; =
PADDING-BOTTOM: 0px; BACKGROUND-COLOR: #b8c0c4; PADDING-LEFT: 2px; =
PADDING-RIGHT: 0px; BORDER-TOP: #000 1px solid; BORDER-RIGHT: #fff 1px =
solid; PADDING-TOP: 2px
}
.calendar TBODY .day {
	TEXT-ALIGN: right; PADDING-BOTTOM: 2px; PADDING-LEFT: 2px; WIDTH: 2em; =
PADDING-RIGHT: 4px; PADDING-TOP: 2px
}
.calendar TBODY .othermonth {
	COLOR: #aaa; FONT-SIZE: 80%
}
.calendar TBODY .oweekend {
	COLOR: #faa
}
.calendar TABLE .wn {
	PADDING-BOTTOM: 2px; PADDING-LEFT: 2px; PADDING-RIGHT: 3px; BACKGROUND: =
#e8f4f0; BORDER-RIGHT: #000 1px solid; PADDING-TOP: 2px
}
.calendar TBODY .rowhilite TD {
	BACKGROUND: #d8e4e0
}
.calendar TBODY .rowhilite TD.wn {
	BACKGROUND: #c8d4d0
}
.calendar TBODY TD.hilite {
	BORDER-BOTTOM: #000 1px solid; BORDER-LEFT: #fff 1px solid; =
PADDING-BOTTOM: 1px; PADDING-LEFT: 1px; PADDING-RIGHT: 3px; BORDER-TOP: =
#fff 1px solid; BORDER-RIGHT: #000 1px solid; PADDING-TOP: 1px
}
.calendar TBODY TD.active {
	BORDER-BOTTOM: #fff 1px solid; BORDER-LEFT: #000 1px solid; =
PADDING-BOTTOM: 0px; PADDING-LEFT: 2px; PADDING-RIGHT: 2px; BORDER-TOP: =
#000 1px solid; BORDER-RIGHT: #fff 1px solid; PADDING-TOP: 2px
}
.calendar TBODY TD.selected {
	BORDER-BOTTOM: #fff 1px solid; BORDER-LEFT: #000 1px solid; =
PADDING-BOTTOM: 0px; PADDING-LEFT: 2px; PADDING-RIGHT: 2px; BACKGROUND: =
#d8e0e4; BORDER-TOP: #000 1px solid; FONT-WEIGHT: bold; BORDER-RIGHT: =
#fff 1px solid; PADDING-TOP: 2px
}
.calendar TBODY TD.weekend {
	COLOR: #f00
}
.calendar TBODY TD.today {
	COLOR: #00f; FONT-WEIGHT: bold
}
.calendar TBODY .disabled {
	COLOR: #999
}
.calendar TBODY .emptycell {
	VISIBILITY: hidden
}
.calendar TBODY .emptyrow {
	DISPLAY: none
}
.calendar TFOOT .footrow {
=09
}
.calendar TFOOT .ttip {
	BORDER-BOTTOM: #000 1px solid; TEXT-ALIGN: center; BORDER-LEFT: #000 =
1px solid; PADDING-BOTTOM: 1px; PADDING-LEFT: 1px; PADDING-RIGHT: 1px; =
BACKGROUND: #788084; COLOR: #fff; BORDER-TOP: #000 1px solid; =
BORDER-RIGHT: #000 1px solid; PADDING-TOP: 1px
}
.calendar TFOOT .hilite {
	BORDER-BOTTOM: #000 1px solid; BORDER-LEFT: #fff 1px solid; =
PADDING-BOTTOM: 1px; PADDING-LEFT: 1px; PADDING-RIGHT: 1px; BACKGROUND: =
#d8e0e4; BORDER-TOP: #fff 1px solid; BORDER-RIGHT: #000 1px solid; =
PADDING-TOP: 1px
}
.calendar TFOOT .active {
	BORDER-BOTTOM: #fff 1px solid; BORDER-LEFT: #000 1px solid; =
PADDING-BOTTOM: 0px; PADDING-LEFT: 2px; PADDING-RIGHT: 0px; BORDER-TOP: =
#000 1px solid; BORDER-RIGHT: #fff 1px solid; PADDING-TOP: 2px
}
.calendar .combo {
	Z-INDEX: 100; BORDER-BOTTOM: #000 1px solid; POSITION: absolute; =
BORDER-LEFT: #fff 1px solid; PADDING-BOTTOM: 1px; PADDING-LEFT: 1px; =
WIDTH: 4em; PADDING-RIGHT: 1px; DISPLAY: none; BACKGROUND: #d8e0e4; =
FONT-SIZE: 90%; BORDER-TOP: #fff 1px solid; TOP: 0px; CURSOR: default; =
BORDER-RIGHT: #000 1px solid; PADDING-TOP: 1px; LEFT: 0px
}
.calendar .combo .label {
	TEXT-ALIGN: center; PADDING-BOTTOM: 1px; PADDING-LEFT: 1px; =
PADDING-RIGHT: 1px; PADDING-TOP: 1px
}
.calendar .combo .label-IEfix {
	TEXT-ALIGN: center; PADDING-BOTTOM: 1px; PADDING-LEFT: 1px; =
PADDING-RIGHT: 1px; PADDING-TOP: 1px
}
.calendar .combo .label-IEfix {
	WIDTH: 4em
}
.calendar .combo .active {
	BORDER-BOTTOM: #fff 1px solid; BORDER-LEFT: #000 1px solid; =
PADDING-BOTTOM: 0px; PADDING-LEFT: 0px; PADDING-RIGHT: 0px; BACKGROUND: =
#c8d0d4; BORDER-TOP: #000 1px solid; BORDER-RIGHT: #fff 1px solid; =
PADDING-TOP: 0px
}
.calendar .combo .hilite {
	BACKGROUND: #048; COLOR: #aef
}
.calendar TD.time {
	TEXT-ALIGN: center; PADDING-BOTTOM: 1px; BACKGROUND-COLOR: #e8f0f4; =
PADDING-LEFT: 0px; PADDING-RIGHT: 0px; BORDER-TOP: #000 1px solid; =
PADDING-TOP: 1px
}
.calendar TD.time .hour {
	BORDER-BOTTOM: #889 1px solid; BORDER-LEFT: #889 1px solid; =
PADDING-BOTTOM: 0px; BACKGROUND-COLOR: #fff; PADDING-LEFT: 4px; =
PADDING-RIGHT: 3px; BORDER-TOP: #889 1px solid; FONT-WEIGHT: bold; =
BORDER-RIGHT: #889 1px solid; PADDING-TOP: 0px
}
.calendar TD.time .minute {
	BORDER-BOTTOM: #889 1px solid; BORDER-LEFT: #889 1px solid; =
PADDING-BOTTOM: 0px; BACKGROUND-COLOR: #fff; PADDING-LEFT: 4px; =
PADDING-RIGHT: 3px; BORDER-TOP: #889 1px solid; FONT-WEIGHT: bold; =
BORDER-RIGHT: #889 1px solid; PADDING-TOP: 0px
}
.calendar TD.time .ampm {
	BORDER-BOTTOM: #889 1px solid; BORDER-LEFT: #889 1px solid; =
PADDING-BOTTOM: 0px; BACKGROUND-COLOR: #fff; PADDING-LEFT: 4px; =
PADDING-RIGHT: 3px; BORDER-TOP: #889 1px solid; FONT-WEIGHT: bold; =
BORDER-RIGHT: #889 1px solid; PADDING-TOP: 0px
}
.calendar TD.time .ampm {
	TEXT-ALIGN: center
}
.calendar TD.time .colon {
	PADDING-BOTTOM: 0px; PADDING-LEFT: 3px; PADDING-RIGHT: 2px; =
FONT-WEIGHT: bold; PADDING-TOP: 0px
}
.calendar TD.time SPAN.hilite {
	BORDER-BOTTOM-COLOR: #000; BACKGROUND-COLOR: #667; BORDER-TOP-COLOR: =
#000; COLOR: #fff; BORDER-RIGHT-COLOR: #000; BORDER-LEFT-COLOR: #000
}
.calendar TD.time SPAN.active {
	BORDER-BOTTOM-COLOR: #f00; BACKGROUND-COLOR: #000; BORDER-TOP-COLOR: =
#f00; COLOR: #0f0; BORDER-RIGHT-COLOR: #f00; BORDER-LEFT-COLOR: #f00
}
.modalBackground {
	FILTER: alpha(opacity=3D70); BACKGROUND-COLOR: gray; opacity: 0.7
}
.modalPopup {
	BORDER-BOTTOM: gray 3px solid; BORDER-LEFT: gray 3px solid; =
PADDING-BOTTOM: 3px; BACKGROUND-COLOR: #eff3fb; PADDING-LEFT: 3px; =
WIDTH: 250px; PADDING-RIGHT: 3px; BORDER-TOP: gray 3px solid; =
BORDER-RIGHT: gray 3px solid; PADDING-TOP: 3px
}

------=_NextPart_000_0000_01CCB4FE.5AC00BD0
Content-Type: application/octet-stream
Content-Transfer-Encoding: quoted-printable
Content-Location: http://www.taketopsoft.com/TakeTopPro/ScriptResource.axd?d=zNCcX5snSUZN_y4yde3V8RO1LtWiL7g75lBseRYogfG22VkaLeFLbfCAm0bidEbQ2njUYaXCjOfpBe-QQ9Ieu3iQCLW-A-zyFW2RcP1Utw3cGNerCt08mDGSU83SZ5TjC-KwNdczB-0acXW7BxTsGw2&t=ffffffffbd2983fc

=EF=BB=BF// Name:        MicrosoftAjax.debug.js
// Assembly:    AjaxControlToolkit
// Version:     4.1.40412.0
// FileVersion: 4.1.40412.2
// (c) 2010 CodePlex Foundation

(function(window, Sys) {

var merge =3D function _merge(target) {
    target =3D target || {};
    foreach(arguments, function(o) {
        if (o) {
            forIn(o, function(v, n) {
                target[n] =3D v;
            });
        }
    }, 1);
    return target;
}
var forIn =3D function _forIn(obj, callback) {
    for (var x in obj) {
        callback(obj[x], x);
    }
}
var foreach =3D function _foreach(arr, callback, start) {
    var cancelled;
    if (arr) {
        arr =3D arr instanceof Array ||=20
            (typeof(arr.length) =3D=3D=3D 'number' && =
(typeof(arr.callee) =3D=3D=3D "function" || (arr.item && =
typeof(arr.nodeType) =3D=3D=3D "undefined") && !arr.addEventListener && =
!arr.attachEvent))
            ? arr : [arr];
        for (var i =3D start||0, l =3D arr.length; i < l; i++) {
            if (callback(arr[i], i)) {
                cancelled =3D true;
                break;
            }
        }
    }
    return !cancelled;
}
var callIf =3D function _callIf(obj, name, args) {
    var fn =3D obj[name],
        exists =3D typeof(fn) =3D=3D=3D "function";
    if (exists) fn.call(obj, args);
    return exists;
}
if (!Sys || !Sys.loader) {
    function append(target) {
        target =3D target || {};
        foreach(arguments, function(o) {
            if (o) {
                forIn(o, function(v, n) {
                    if (typeof(target[n]) =3D=3D=3D "undefined") =
target[n] =3D v;
                });
            }
        }, 1);
        return target;
    }

    var attachEvent =3D !!document.attachEvent;
 =20
    function getAndDelete(obj, field) {
        var r =3D obj[field];
        delete obj[field];
        return r;
    }
    function foreachCall(obj, field, args) {
        foreach(getAndDelete(obj, field), function(callback) {
            callback.apply(null, args||[]);
        });
    }
    function lazyget(obj, name, value) {
        return obj ? (obj[name] =3D obj[name] || value) : value;
    }
    function lazypush(obj, name, value) {
        lazyget(obj, name, []).push(value);
    }
    function lazyset(obj, name, key, value) {
        lazyget(obj, name, {})[key] =3D value;
    }
    function all(tag, element) {
        return (element||document).getElementsByTagName(tag);
    }
    function createElement(tag) {
        return document.createElement(tag);
    }
    function listenOnce(target, name, ieName, callback, isReadyState, =
isScript) {
        function onEvent() {
            if (!attachEvent || !isReadyState || =
/loaded|complete/.test(target.readyState)) {
                if (attachEvent) {
                    target.detachEvent(ieName || ("on" + name), =
onEvent);
                }
                else {
                    target.removeEventListener(name, onEvent, false);
                    if (isScript) {
                        target.removeEventListener("error", onEvent, =
false);
                    }
                }
                callback.apply(target);
                target =3D null;
            }
        }
        if (attachEvent) {
            target.attachEvent(ieName || ("on" + name), onEvent);
        }
        else {
            if (target.addEventListener) {
            target.addEventListener(name, onEvent, false);
            }
            if (isScript) {
                target.addEventListener("error", onEvent, false);
            }
        }
    }
    function raiseDomReady() {
        if (Sys._domReady) {
            Sys._2Pass(getAndDelete(Sys, "_domReadyQueue"));
        }
    }
    function raiseOnReady() {
        var ready =3D Sys._ready;
        if (!ready && Sys._domReady && !(Sys.loader && =
Sys.loader._loading)) {
            Sys._ready =3D ready =3D true;
        }
        if (ready) {
            Sys._2Pass(getAndDelete(Sys, "_readyQueue"));
        }
    }
    window.Sys =3D Sys =3D append(Sys, {
        version: [3, 0, 31106, 0],
        __namespace: true,
        debug: true,
        scripts: {},
        activateDom: true,
        composites: {},
        components: {},
        plugins: {},
        create: {},
        converters: {},
        _domLoaded: function _domLoaded() {
            if (Sys._domChecked) return;
            Sys._domChecked =3D true;
            function domReady() {
                if (!Sys._domReady) {
                    Sys._domReady =3D true;
                    var autoRequire =3D Sys._autoRequire;
                    if (autoRequire) {
                        Sys.require(autoRequire, function() {
                            Sys._autoRequire =3D null;
                            foreachCall(Sys, "_autoQueue");
                        }, autoToken);
                    }
                    raiseDomReady();
                    raiseOnReady();
                }
            }
            listenOnce(window, "load", null, domReady);

            var check;
            if (attachEvent) {
                if ((window =3D=3D window.top) && =
document.documentElement.doScroll) {
                    var timeout, er, el =3D createElement("div");
                    check =3D function() {
                        try {
                            el.doScroll("left");
                        }
                        catch (er) {
                            timeout =3D window.setTimeout(check, 0);
                            return;
                        }
                        el =3D null;
                        domReady();
                    }
                    check();
                }
                else {
                    listenOnce(document, null, "onreadystatechange", =
domReady, true);
                }
            }
            else if (document.addEventListener) {
                listenOnce(document, "DOMContentLoaded", null, =
domReady);
            }
        },
        _getById: function _getById(found, id, single, includeSelf, =
element, filter) {
            if (element) {
                if (includeSelf && (element.id =3D=3D=3D id)) {
                    found.push(element);
                }
                else if (!filter) {
                    foreach(all("*", element), function(element) {
                        if (element.id =3D=3D=3D id) {
                            found.push(element);
                            return true;
                        }
                    });
                }
            }
            else {
                var e =3D document.getElementById(id);
                if (e) found.push(e);
            }
            return found.length;
        },
        _getByClass: function _getByClass(found, targetClass, single, =
includeSelf, element, filter) {
            function pushIfMatch(element) {
                var ret, className =3D element.className;
                if (className && ((className =3D=3D=3D targetClass) || =
(className.indexOf(' ' + targetClass) >=3D 0) || =
(className.indexOf(targetClass + ' ') >=3D 0))) {
                    found.push(element);
                    ret =3D true;
                }
                return ret;
            }
            var i, l, nodes;
            if (includeSelf && pushIfMatch(element) && single) {
                return true;
            }
            if (!filter) {
                element =3D element || document;
                var finder =3D element.querySelectorAll || =
element.getElementsByClassName;
                if (finder) {
                    if (element.querySelectorAll) targetClass =3D "." + =
targetClass;
                    nodes =3D finder.call(element, targetClass);
                    for (i =3D 0, l =3D nodes.length; i < l; i++) {
                        found.push(nodes[i]);
                        if (single) return true;
                    }
                }
                else {
                    nodes =3D all("*", element);
                    for (i =3D 0, l =3D nodes.length; i < l; i++) {
                        if (pushIfMatch(nodes[i]) && single) {
                            return true;
                        }
                    }
                }
            }
        },
        query: function query(selector, context) {
            /// <summary>Queries the DOM for a set of DOM =
elements.</summary>
            /// <validationOptions enabled=3D"false" />
            /// <param name=3D"selector">Selector for a set of DOM =
elements based on id (#&lt;id>), class (.&lt;name>), or tag name =
(&lt;tagname>). Also supports an array of DOM elements or selectors. =
More complex selectors may be used if jQuery is loaded.</param>
            /// <param name=3D"context" optional=3D"true" =
mayBeNull=3D"true">A DOM element (exclusive), array of DOM elements =
(inclusive), or other Sys.ElementSet or Sys.UI.TemplateContext =
(exclusive) to restrict the search within.</param>
            /// <returns type=3D"Sys.ElementSet">An object representing =
the set of matching elements.</returns>
            return new Sys.ElementSet(selector, context);
        },
        get: function get(selector, context) {
            /// <summary>Queries the DOM for a single DOM =
element.</summary>
            /// <validationOptions enabled=3D"false" />
            /// <param name=3D"selector">
            /// Selector for a DOM element based on id (#&lt;id>), class =
(.&lt;name>), or tag name (&lt;tagname>). More complex selectors may be =
used if jQuery is loaded.
            /// If multiple elements match the selector, the first one =
is returned.
            /// </param>
            /// <param name=3D"context" optional=3D"true" =
mayBeNull=3D"true">An element, array of elements, or =
Sys.UI.TemplateContext to restrict the query within.</param>
            /// <returns>The matching element, or null if none =
match.</returns>
            return (context && typeof(context.get) =3D=3D=3D "function") =
?
                context.get(selector) :
                this._find(selector, context, true);
        },
        _find: function _find(selector, context, single, filter) {
            var found =3D [],
                selectors;
            if (typeof(selector) =3D=3D=3D "string") {
                selectors =3D [selector];
            }
            else {
                selectors =3D selector;
            }
            var includeSelf =3D context instanceof Array,
                simpleNonTag =3D /^([\$#\.])((\w|[$:\.\-])+)$/,
                tag =3D /^((\w+)|\*)$/;
            if ((typeof(context) =3D=3D=3D "string") || (context =
instanceof Array)) {
                context =3D Sys._find(context);
            }
            if (context instanceof Sys.ElementSet) {
                context =3D context.get();
            }
            foreach(selectors, function(selector) {
                if (typeof(selector) !=3D=3D "string") {
                    if (filter) {
                        if (contains(context, selector)) {
                            found.push(selector);
                        }
                    }
                    else {
                        found.push(selector);
                    }
                }
                else {
                    var match =3D simpleNonTag.exec(selector);
                    if (match && match.length =3D=3D=3D 4) {
                        selector =3D match[2];
                        var type =3D match[1];
                        if (type =3D=3D=3D "$") {
                            Sys._getComponent(found, selector, context);
                        }
                        else {
                            var finder =3D type =3D=3D=3D "#" ? =
Sys._getById : Sys._getByClass;
                            if (context) {
                                foreach(context, function(node) {
                                    if (node.nodeType =3D=3D=3D 1) {
                                        return finder(found, selector, =
single, includeSelf, node, filter);
                                    }
                                });
                            }
                            else {
                                finder(found, selector, single);
                            }
                        }
                    }
                    else if (tag.test(selector)) {
                        if (context instanceof Array) {
                            foreach(context, function(node) {
                                if (node.nodeType =3D=3D=3D 1) {
                                    if (includeSelf && (selector =
=3D=3D=3D "*" || (node.tagName.toLowerCase() =3D=3D=3D selector))) {
                                        found.push(node);
                                        if (single) return true;
                                    }
                                    if (!filter) {
                                        if(!foreach(all(selector, node), =
function(node) {
                                            found.push(node);
                                            if (single) return true;
                                        })) {
                                            return true;
                                        }
                                    }
                                }
                            });
                        }
                        else {
                            var nodes =3D all(selector, context);
                            if (single) {
                                if (nodes[0]) {
                                    found.push(nodes[0]);
                                }
                                return true;
                            }
                            foreach(nodes, function(node) {
                                found.push(node);
                            });
                        }
                    }
                    else if (window.jQuery) {
                        if (!filter) {
                            found.push.apply(found, jQuery(selector, =
context).get());
                        }
                        if (includeSelf) {
                            found.push.apply(found, =
jQuery(context).filter(selector).get());
                        }
                    }
                }
            });
            return found.length ? (single ? (found[0] || null) : found) =
: null;
        },
        onDomReady: function onDomReady(callback) {
            /// <summary>Registers a function to be called when the DOM =
is ready.</summary>
            /// <validationOptions enabled=3D"false" />
            /// <param name=3D"callback" type=3D"Function"></param>
            lazypush(this, "_domReadyQueue", callback);
            raiseDomReady();
        },
        onReady: function onReady(callback) {
            /// <summary>Registers a function to be called when the DOM =
is ready and when all required resources have been loaded.</summary>
            /// <validationOptions enabled=3D"false" />
            /// <param name=3D"callback" type=3D"Function"></param>
            lazypush(this, "_readyQueue", callback);
            raiseOnReady();
        },
        _set: function(instance, properties) {
            forIn(properties, function(value, field) {
                callIf(instance, "add_" + field, value) ||
                callIf(instance, "set_" + field, value) ||
                (instance[field] =3D value);
            });
        }
    });

    Sys._getComponent =3D Sys._getComponent || function() { }
   =20
    Sys._2Pass =3D Sys._2Pass || function _2Pass(callback) {
       foreach(callback, function(c) { c(); });
    }

    var obj;
    if (!Sys.ElementSet) {
obj =3D Sys.ElementSet =3D function(selector, context) {
    /// <summary>Represents a set of DOM elements.</summary>
    /// <param name=3D"selector">The DOM selector, array of DOM =
selectors, or array of DOM elements to query the document for.</param>
    /// <param name=3D"context">A DOM selector (exclusive), A DOM =
element (exclusive), array of DOM elements (inclusive), or other =
Sys.ElementSet (exclusive) to restrict the search within.</param>
    this._elements =3D ((typeof(context) =3D=3D=3D "object") && =
typeof(context.query) =3D=3D=3D "function") ?
        context.query(selector).get() :
        Sys._find(selector, context) || [];
}
obj.prototype =3D {
    __class: true,
    components: function(type, index) {
        /// <summary>Gets the set of controls and behaviors associated =
with the current DOM elements.</summary>
        /// <param name=3D"type" type=3D"Function" mayBeNull=3D"true" =
optional=3D"true">Type to limit the search to.</param>
        /// <param name=3D"index" type=3D"Number" mayBeNull=3D"true" =
optional=3D"true">Index of the component to limit to.</param>
        /// <returns type=3D"Sys.ComponentSet" />
        var elementSet =3D new Sys.ElementSet(this.get());
        return new Sys.ComponentSet(elementSet, type, index);
    },
    component: function(type, index) {
        /// <summary>Get the first control or behavior associated with =
the current set of DOM elements.</summary>
        /// <param name=3D"type" type=3D"Function" mayBeNull=3D"true" =
optional=3D"true">Type to limit the search to.</param>
        /// <param name=3D"index" type=3D"Number" mayBeNull=3D"true" =
optional=3D"true">Index of the component to return.</param>
        /// <returns type=3D"Object" mayBeNull=3D"true" />
        return this.components(type, index).get(0);
    },
    each: function(callback) {
        /// <summary>Enumerates all the matched elements, calling the =
given callback for each with the current element as the context.
        /// The callback may return false to cancel =
enumeration.</summary>
        /// <returns type=3D"Sys.ElementSet"/>
        var elements =3D this._elements;
        for (var i =3D 0, l =3D elements.length; i < l; i++) {
            if (callback.call(elements[i], i) =3D=3D=3D false) break;
        }
        return this;
    },
    get: function(index) {
        /// <summary>Retrieves the element at the specified =
index.</summary>
        /// <param name=3D"index" type=3D"Number">The index of the =
element to retrieve. Omit to return all elements as an array.</param>
        /// <returns isDomElement=3D"true">The element at the given =
index, or an array of all the matched elements.</returns>
        var elements =3D this._elements;
        return (typeof(index) =3D=3D=3D "undefined") ? =
(Array.apply(null, elements)) : (elements[index] || null);
    },
    find: function(selector) {
        /// <summary>Searches the current set of DOM elements with the =
given selector, including descendents.</summary>
        /// <param name=3D"selector">DOM selector or array of DOM =
selectors to search with.</param>
        /// <returns type=3D"Sys.ElementSet">A new element set with the =
matched elements.</returns>
        return new Sys.ElementSet(selector, this);
    },
    filter: function(selector) {
        /// <summary>Filters the current set of DOM elements by the =
given selector, excluding descendents.</summary>
        /// <param name=3D"selector">DOM selector or array of elements =
to filter by.</param>
        /// <returns type=3D"Sys.ElementSet">A new element set with the =
matched elements.</returns>
        return new Sys.ElementSet(Sys._find(selector, this._elements, =
false, true));
    }
}
    }
    if (!Sys.ComponentSet) {
obj =3D Sys.ComponentSet =3D function ComponentSet(elementSet, query, =
index) {
    /// <summary></summary>
    /// <param name=3D"elementSet" type=3D"Sys.ElementSet" =
mayBeNull=3D"true" optional=3D"true"></param>
    /// <param name=3D"query" mayBeNull=3D"true" optional=3D"true">The =
type of component to filter by, or an array of components to =
include.</param>
    /// <param name=3D"index" type=3D"Number" mayBeNull=3D"true" =
optional=3D"true">The index of the component to retrieve from the =
filtered list.</param>
    this._elementSet =3D elementSet || (elementSet =3D new =
Sys.ElementSet());
    this._components =3D this._execute(elementSet, query, index);
}
obj.prototype =3D {
    __class: true,
    setProperties: function ComponentSet$setProperties(properties) {
        /// <summary>Sets properties on the matched =
components.</summary>
        /// <param name=3D"properties" type=3D"Object" =
mayBeNull=3D"false">Object with the names and values of the properties =
to set.</param>
        /// <returns type=3D"Sys.ComponentSet" />
        return this.each(function() {
            Sys._set(this, properties);
        });
    },
    get: function ComponentSet$get(index) {
        /// <summary>Returns the component at the specified index, or an =
array of all matches if not specified.</summary>
        /// <param name=3D"index" type=3D"Number" mayBeNull=3D"true" =
optional=3D"true"></param>
        /// <returns type=3D"Object" mayBeNull=3D"true"/>
        var components =3D this._components;
        return (typeof(index) =3D=3D=3D "undefined") ? =
(Array.apply(null, components)) : (components[index || 0] || null);
    },
    each: function ComponentSet$each(callback) {
        /// <summary>Enumerate all the found components. The index of =
the component are passed as parameters to a callback. You may return =
'false' to cancel the enumeration.</summary>
        /// <param name=3D"callback" type=3D"Function" =
mayBeNull=3D"false">Function called for each component.</param>
        /// <returns type=3D"Sys.ComponentSet" />
        foreach(this._components, function(c, i) {
            if (callback.call(c, i) =3D=3D=3D false) {
                return true;
            }
        });
        return this;
    },
    elements: function ComponentSet$elements() {
        /// <summary>Returns the underlying set of elements this =
component collection came from.</summary>
        /// <returns type=3D"Sys.ElementSet" />
        return this._elementSet;
    },
    _execute: function ComponentSet$_execute(elementSet, query, index) {
        var components =3D [];
        function match(c) {
            var ctor;
            return (c instanceof query) ||
                ((ctor =3D c.constructor) && (
                    (ctor =3D=3D=3D query) ||
                    (ctor.inheritsFrom && ctor.inheritsFrom(query)) ||
                    (ctor.implementsInterface && =
ctor.implementsInterface(query))));
        }
        if (query instanceof Array) {
            components.push.apply(components, query);
        }
        else {
            elementSet.each(function() {
                var c =3D this.control;
                if (c && (!query || match(c))) {
                    components.push(c);
                }
                foreach(this._behaviors, function(b) {
                    if (!query || match(b)) {
                        components.push(b);
                    }
                });
            });
        }
        if ((typeof(index) !=3D=3D "undefined")) {
            if (components[index]) {
                components =3D [components[index]];
            }
            else {
                components =3D [];
            }
        }
        return components;
    }
}
    }
   =20
    obj =3D null;
}
    var getCreate =3D function _getCreate(options, isPlugin) {
        var body =3D [],
            arglist =3D [],
            type =3D options.type,
            typeName =3D options.typeName || (type ? type.getName() : =
""),
            isBehavior =3D options._isBehavior,
            description =3D (options && options.description) ||=20
                          (type && ("Creates an instance of the type '" =
+ typeName  + "' and sets the given properties.")) ||
                          "";
        body.push("/// <summary>", description, "</summary>\n");
        foreach(options && options.parameters, function(parameter) {
            var name =3D parameter, type =3D '', desc =3D '';
            if (typeof(parameter) !=3D=3D "string") {
                name =3D parameter.name;
                type =3D parameter.type||'';
                desc =3D parameter.description||'';
            }
            arglist.push(name);
            body.push('/// <param name=3D"', name, '"');
            if (type) {
                body.push(' type=3D"', type, '"');
            }
            body.push('>', desc, '</param>\n');
        });
        var returnType;
        if (!isPlugin) {
            arglist.push("properties");
            body.push('/// <param name=3D"properties" type=3D"Object" =
mayBeNull=3D"true" optional=3D"true">Additional properties to set on the =
component.</param>\n');
            returnType =3D isBehavior ? 'Sys.ComponentSet' : typeName;
        }
        else {
            returnType =3D options.returnType;
        }
        if (returnType) {
            body.push('/// <returns type=3D"', returnType, '" />\n');
        }
        if (isPlugin) {
            body.push('return Sys.plugins["', options.name, =
'"].plugin.apply(this, arguments);');
        }
        else {
            body.push('return Sys._createComp.call(this, =
arguments.callee._component, arguments.callee._component.defaults, =
arguments);');
        }
        arglist.push(body.join(''));
   =20
        var fn =3D Function.apply(null, arglist);
        if (!isPlugin) {
            fn._component =3D options;
        }
        return fn;
       =20
    }
    Sys._getCreate =3D getCreate;

function execute() {

var $type, $prototype;
Sys._foreach =3D foreach;
Sys._forIn =3D forIn;
Sys._merge =3D merge;
Sys._callIf =3D callIf;

$type =3D Function;
$type.__typeName =3D 'Function';
$type.__class =3D true;

$type.createCallback =3D function Function$createCallback(method, =
context) {
    /// <summary locid=3D"M:J#Function.createCallback">Creates a =
callback function that retains the parameter initially used during its =
creation.   The callback is used without parameter but this will call =
the actual method with the parameter.   This is especially useful when =
setting up a handler for a DOM event that must retain a parameter   =
despite the DOM event handler needing to be a function with the event =
object as the only parameter.   In this case, the function will be =
called with the event as the first parameter and the context   as the =
second.   If the callback is called with an arbitrary list of =
parameters, the context is appended.</summary>
    /// <param name=3D"method" type=3D"Function">The function for which =
the callback is created.</param>
    /// <param name=3D"context" mayBeNull=3D"true">The parameter for the =
function.</param>
    /// <returns type=3D"Function">The callback function.</returns>
    var e =3D Function._validateParams(arguments, [
        {name: "method", type: Function},
        {name: "context", mayBeNull: true}
    ]);
    if (e) throw e;


    return function() {
        var l =3D arguments.length;
        if (l > 0) {
            var args =3D [];
            for (var i =3D 0; i < l; i++) {
                args[i] =3D arguments[i];
            }
            args[l] =3D context;
            return method.apply(this, args);
        }
        return method.call(this, context);
    }
}

$type.createDelegate =3D function Function$createDelegate(instance, =
method) {
    /// <summary locid=3D"M:J#Function.createDelegate">Creates a =
delegate function that retains the context from its creation   (i.e. =
what 'this' means from within its scope).   This is especially useful =
when setting up an event handler to point to an object method   that =
needs to use the 'this' pointer from within its scope.</summary>
    /// <param name=3D"instance" mayBeNull=3D"true">The object instance =
that will be the context for the function (i.e. what 'this' means from =
within its scope).</param>
    /// <param name=3D"method" type=3D"Function">The function from which =
the delegate is created.</param>
    /// <returns type=3D"Function">The delegate function.</returns>
    var e =3D Function._validateParams(arguments, [
        {name: "instance", mayBeNull: true},
        {name: "method", type: Function}
    ]);
    if (e) throw e;


    return function() {
        return method.apply(instance, arguments);
    }
}

$type.emptyFunction =3D $type.emptyMethod =3D function =
Function$emptyMethod() {
    /// <summary locid=3D"M:J#Function.emptyMethod">A function that does =
nothing.</summary>
}

$type.validateParameters =3D function =
Function$validateParameters(parameters, expectedParameters, =
validateParameterCount) {
    /// <summary locid=3D"M:J#Function.validateParameters">Validates the =
parameters to a method are as expected.</summary>
    /// <param name=3D"parameters"></param>
    /// <param name=3D"expectedParameters"></param>
    /// <param name=3D"validateParameterCount" type=3D"Boolean" =
optional=3D"true" mayBeNull=3D"true">True if extra parameters are =
prohibited, false if they should be ignored. The default is =
true.</param>
    /// <returns type=3D"Error" mayBeNull=3D"true"></returns>
    var e =3D Function._validateParams(arguments, [
        {name: "parameters"},
        {name: "expectedParameters"},
        {name: "validateParameterCount", type: Boolean, mayBeNull: true, =
optional: true}
    ]);
    if (e) throw e;
    return Function._validateParams(parameters, expectedParameters, =
validateParameterCount);
}

$type._validateParams =3D function Function$_validateParams(params, =
expectedParams, validateParameterCount) {
    var e, expectedLength =3D expectedParams.length;
    validateParameterCount =3D validateParameterCount !=3D=3D false;
    e =3D Function._validateParameterCount(params, expectedParams, =
validateParameterCount);
    if (e) {
        e.popStackFrame();
        return e;
    }
    for (var i =3D 0, l =3D params.length; i < l; i++) {
        var expectedParam =3D expectedParams[Math.min(i, expectedLength =
- 1)],
            paramName =3D expectedParam.name;
        if (expectedParam.parameterArray) {
            paramName +=3D "[" + (i - expectedLength + 1) + "]";
        }
        else if (!validateParameterCount && (i >=3D expectedLength)) {
            break;
        }
        e =3D Function._validateParameter(params[i], expectedParam, =
paramName);
        if (e) {
            e.popStackFrame();
            return e;
        }
    }
    return null;
}

$type._validateParameterCount =3D function =
Function$_validateParameterCount(params, expectedParams, =
validateParameterCount) {
    var i, error,
        expectedLen =3D expectedParams.length,
        actualLen =3D params.length;
    if (actualLen < expectedLen) {
        var minParams =3D expectedLen;
        for (i =3D 0; i < expectedLen; i++) {
            var param =3D expectedParams[i];
            if (param.optional || param.parameterArray) {
                minParams--;
            }
        }       =20
        if (actualLen < minParams) {
            error =3D true;
        }
    }
    else if (validateParameterCount && (actualLen > expectedLen)) {
        error =3D true;     =20
        for (i =3D 0; i < expectedLen; i++) {
            if (expectedParams[i].parameterArray) {
                error =3D false;
                break;
            }
        } =20
    }

    if (error) {
        var e =3D Error.parameterCount();
        e.popStackFrame();
        return e;
    }

    return null;
}

$type._validateParameter =3D function Function$_validateParameter(param, =
expectedParam, paramName) {
    var e,
        expectedType =3D expectedParam.type,
        expectedInteger =3D !!expectedParam.integer,
        expectedDomElement =3D !!expectedParam.domElement,
        mayBeNull =3D !!expectedParam.mayBeNull;

    e =3D Function._validateParameterType(param, expectedType, =
expectedInteger, expectedDomElement, mayBeNull, paramName);
    if (e) {
        e.popStackFrame();
        return e;
    }

    var expectedElementType =3D expectedParam.elementType,
        elementMayBeNull =3D !!expectedParam.elementMayBeNull;
    if (expectedType =3D=3D=3D Array && typeof(param) !=3D=3D =
"undefined" && param !=3D=3D null &&
        (expectedElementType || !elementMayBeNull)) {
        var expectedElementInteger =3D !!expectedParam.elementInteger,
            expectedElementDomElement =3D =
!!expectedParam.elementDomElement;
        for (var i=3D0; i < param.length; i++) {
            var elem =3D param[i];
            e =3D Function._validateParameterType(elem, =
expectedElementType,
                expectedElementInteger, expectedElementDomElement, =
elementMayBeNull,
                paramName + "[" + i + "]");
            if (e) {
                e.popStackFrame();
                return e;
            }
        }
    }

    return null;
}

$type._validateParameterType =3D function =
Function$_validateParameterType(param, expectedType, expectedInteger, =
expectedDomElement, mayBeNull, paramName) {
    var e, i;

    if (typeof(param) =3D=3D=3D "undefined" || param =3D=3D=3D null) {
        if (mayBeNull) {
            return null;
        }
        e =3D param =3D=3D=3D null ? Error.argumentNull(paramName) : =
Error.argumentUndefined(paramName);
        e.popStackFrame();
        return e;
    }

    if (expectedType && expectedType.__enum) {
        if (typeof(param) !=3D=3D 'number') {
            e =3D Error.argumentType(paramName, Object.getType(param), =
expectedType);
            e.popStackFrame();
            return e;
        }
        if ((param % 1) =3D=3D=3D 0) {
            var values =3D expectedType.prototype;
            if (!expectedType.__flags || (param =3D=3D=3D 0)) {
                for (i in values) {
                    if (values[i] =3D=3D=3D param) return null;
                }
            }
            else {
                var v =3D param;
                for (i in values) {
                    var vali =3D values[i];
                    if (vali =3D=3D=3D 0) continue;
                    if ((vali & param) =3D=3D=3D vali) {
                        v -=3D vali;
                    }
                    if (v =3D=3D=3D 0) return null;
                }
            }
        }
        e =3D Error.argumentOutOfRange(paramName, param, =
String.format(Sys.Res.enumInvalidValue, param, expectedType.getName()));
        e.popStackFrame();
        return e;
    }

    if (expectedDomElement && (!Sys._isDomElement(param) || =
(param.nodeType =3D=3D=3D 3))) {
        e =3D Error.argument(paramName, Sys.Res.argumentDomElement);
        e.popStackFrame();
        return e;
    }

    if (expectedType && !Sys._isInstanceOfType(expectedType, param)) {
        e =3D Error.argumentType(paramName, Object.getType(param), =
expectedType);
        e.popStackFrame();
        return e;
    }

    if (expectedType =3D=3D=3D Number && expectedInteger) {
        if ((param % 1) !=3D=3D 0) {
            e =3D Error.argumentOutOfRange(paramName, param, =
Sys.Res.argumentInteger);
            e.popStackFrame();
            return e;
        }
    }

    return null;
}
$type =3D Error;
$type.__typeName =3D 'Error';
$type.__class =3D true;

Sys._errorArgument =3D function(kind, paramName, message) {
    var name =3D "Sys.Argument" + kind + "Exception";
    var displayMessage =3D name + ": " + (message || =
Sys.Res["argument"+kind]);
    if (paramName) {
        displayMessage +=3D "\n" + String.format(Sys.Res.paramName, =
paramName);
    }

    var err =3D Error.create(displayMessage, { name: name, paramName: =
paramName });
    err.popStackFrame();
    err.popStackFrame();
    return err;
}

Sys._error =3D function(kind, message, defaultMessage) {
    var name =3D "Sys." + kind + "Exception";
    var displayMessage =3D name + ": " + (message || =
Sys.Res[defaultMessage]);
    var err =3D Error.create(displayMessage, {name: name});
    err.popStackFrame();
    err.popStackFrame();
    return err;
}

$type.create =3D function Error$create(message, errorInfo) {
    /// <summary locid=3D"M:J#Error.create">Use this method to create a =
new error.</summary>
    /// <param name=3D"message" type=3D"String" optional=3D"true" =
mayBeNull=3D"true">The error message.</param>
    /// <param name=3D"errorInfo" optional=3D"true" mayBeNull=3D"true">A =
plain JavaScript object that contains extended information about the =
error.   The object should have a 'name' field that contains a string =
that identifies the error   and any additional fields that are necessary =
to fully describe the error.</param>
    /// <returns type=3D"Error">An Error object.</returns>
    var e =3D Function._validateParams(arguments, [
        {name: "message", type: String, mayBeNull: true, optional: =
true},
        {name: "errorInfo", mayBeNull: true, optional: true}
    ]);
    if (e) throw e;

    var err =3D new Error(message);
    err.message =3D message;

    if (errorInfo) {
        for (var v in errorInfo) {
            err[v] =3D errorInfo[v];
        }
    }

    err.popStackFrame();
    return err;
}

$type.argument =3D function Error$argument(paramName, message) {
    /// <summary locid=3D"M:J#Error.argument">Creates an =
ArgumentException with a specified error message   and the name of the =
parameter that caused this exception.</summary>
    /// <param name=3D"paramName" type=3D"String" optional=3D"true" =
mayBeNull=3D"true">The name of the parameter that caused the =
exception.</param>
    /// <param name=3D"message" type=3D"String" optional=3D"true" =
mayBeNull=3D"true">A message that describes the error.</param>
    /// <returns>An Error instance that represents an =
ArgumentException.</returns>
    var e =3D Function._validateParams(arguments, [
        {name: "paramName", type: String, mayBeNull: true, optional: =
true},
        {name: "message", type: String, mayBeNull: true, optional: true}
    ]);
    if (e) throw e;
    return Sys._errorArgument("", paramName, message);
}

$type.argumentNull =3D function Error$argumentNull(paramName, message) {
    /// <summary locid=3D"M:J#Error.argumentNull">Creates an =
ArgumentNullException with a specified error message   and the name of =
the parameter that caused this exception.</summary>
    /// <param name=3D"paramName" type=3D"String" optional=3D"true" =
mayBeNull=3D"true">The name of the parameter that caused the =
exception.</param>
    /// <param name=3D"message" type=3D"String" optional=3D"true" =
mayBeNull=3D"true">A message that describes the error.</param>
    /// <returns>An Error instance that represents an =
ArgumentNullException.</returns>
    var e =3D Function._validateParams(arguments, [
        {name: "paramName", type: String, mayBeNull: true, optional: =
true},
        {name: "message", type: String, mayBeNull: true, optional: true}
    ]);
    if (e) throw e;
    return Sys._errorArgument("Null", paramName, message);
}

$type.argumentOutOfRange =3D function =
Error$argumentOutOfRange(paramName, actualValue, message) {
    /// <summary locid=3D"M:J#Error.argumentOutOfRange">Creates an =
ArgumentOutOfRangeException with a specified error message   and the =
name and actual value of the parameter that caused this =
exception.</summary>
    /// <param name=3D"paramName" type=3D"String" optional=3D"true" =
mayBeNull=3D"true">The name of the parameter that caused the =
exception.</param>
    /// <param name=3D"actualValue" optional=3D"true" =
mayBeNull=3D"true">The actual value of the parameter.</param>
    /// <param name=3D"message" type=3D"String" optional=3D"true" =
mayBeNull=3D"true">A message that describes the error.</param>
    /// <returns>An Error instance that represents an =
ArgumentOutOfRangeException.</returns>
    var e =3D Function._validateParams(arguments, [
        {name: "paramName", type: String, mayBeNull: true, optional: =
true},
        {name: "actualValue", mayBeNull: true, optional: true},
        {name: "message", type: String, mayBeNull: true, optional: true}
    ]);
    if (e) throw e;

    var displayMessage =3D "Sys.ArgumentOutOfRangeException: " + =
(message || Sys.Res.argumentOutOfRange);
    if (paramName) {
        displayMessage +=3D "\n" + String.format(Sys.Res.paramName, =
paramName);
    }

    if (typeof(actualValue) !=3D=3D "undefined" && actualValue !=3D=3D =
null) {
        displayMessage +=3D "\n" + String.format(Sys.Res.actualValue, =
actualValue);
    }

    var err =3D Error.create(displayMessage, {
        name: "Sys.ArgumentOutOfRangeException",
        paramName: paramName,
        actualValue: actualValue
    });
    err.popStackFrame();
    return err;
}

$type.argumentType =3D function Error$argumentType(paramName, =
actualType, expectedType, message) {
    /// <summary locid=3D"M:J#Error.argumentType">Creates an =
ArgumentTypeException with a specified error message   and the name, =
actual type, and expected type of the parameter that   caused this =
exception.</summary>
    /// <param name=3D"paramName" type=3D"String" optional=3D"true" =
mayBeNull=3D"true">The name of the parameter that caused the =
exception.</param>
    /// <param name=3D"actualType" type=3D"Type" optional=3D"true" =
mayBeNull=3D"true">The actual type of the parameter value.</param>
    /// <param name=3D"expectedType" type=3D"Type" optional=3D"true" =
mayBeNull=3D"true">The expected type of the parameter value.</param>
    /// <param name=3D"message" type=3D"String" optional=3D"true" =
mayBeNull=3D"true">A message that describes the error.</param>
    /// <returns>An Error instance that represents an =
ArgumentTypeException.</returns>
    var e =3D Function._validateParams(arguments, [
        {name: "paramName", type: String, mayBeNull: true, optional: =
true},
        {name: "actualType", type: Type, mayBeNull: true, optional: =
true},
        {name: "expectedType", type: Type, mayBeNull: true, optional: =
true},
        {name: "message", type: String, mayBeNull: true, optional: true}
    ]);
    if (e) throw e;

    var displayMessage =3D "Sys.ArgumentTypeException: ";
    if (message) {
        displayMessage +=3D message;
    }
    else if (actualType && expectedType) {
        displayMessage +=3D
            String.format(Sys.Res.argumentTypeWithTypes, =
actualType.getName(), expectedType.getName());
    }
    else {
        displayMessage +=3D Sys.Res.argumentType;
    }

    if (paramName) {
        displayMessage +=3D "\n" + String.format(Sys.Res.paramName, =
paramName);
    }

    var err =3D Error.create(displayMessage, {
        name: "Sys.ArgumentTypeException",
        paramName: paramName,
        actualType: actualType,
        expectedType: expectedType
    });
    err.popStackFrame();
    return err;
}

$type.argumentUndefined =3D function Error$argumentUndefined(paramName, =
message) {
    /// <summary locid=3D"M:J#Error.argumentUndefined">Creates an =
ArgumentUndefinedException with a specified error message   and the name =
of the parameter that caused this exception.</summary>
    /// <param name=3D"paramName" type=3D"String" optional=3D"true" =
mayBeNull=3D"true">The name of the parameter that caused the =
exception.</param>
    /// <param name=3D"message" type=3D"String" optional=3D"true" =
mayBeNull=3D"true">A message that describes the error.</param>
    /// <returns>An Error instance that represents an =
ArgumentUndefinedException.</returns>
    var e =3D Function._validateParams(arguments, [
        {name: "paramName", type: String, mayBeNull: true, optional: =
true},
        {name: "message", type: String, mayBeNull: true, optional: true}
    ]);
    if (e) throw e;
    return Sys._errorArgument("Undefined", paramName, message);
}

$type.format =3D function Error$format(message) {
    /// <summary locid=3D"M:J#Error.format">Creates a format =
error.</summary>
    /// <param name=3D"message" type=3D"String" optional=3D"true" =
mayBeNull=3D"true">The error message.</param>
    /// <returns>An Error object that represents a =
FormatException.</returns>
    var e =3D Function._validateParams(arguments, [
        {name: "message", type: String, mayBeNull: true, optional: true}
    ]);
    if (e) throw e;
    return Sys._error("Format", message, "format");
}

$type.invalidOperation =3D function Error$invalidOperation(message) {
    /// <summary locid=3D"M:J#Error.invalidOperation">Creates an invalid =
operation error.</summary>
    /// <param name=3D"message" type=3D"String" optional=3D"true" =
mayBeNull=3D"true">The error message.</param>
    /// <returns>An Error instance that represents an =
InvalidOperationException.</returns>
    var e =3D Function._validateParams(arguments, [
        {name: "message", type: String, mayBeNull: true, optional: true}
    ]);
    if (e) throw e;
    return Sys._error("InvalidOperation", message, "invalidOperation");
}

$type.notImplemented =3D function Error$notImplemented(message) {
    /// <summary locid=3D"M:J#Error.notImplemented">Creates a not =
implemented error.</summary>
    /// <param name=3D"message" type=3D"String" optional=3D"true" =
mayBeNull=3D"true">The error message.</param>
    /// <returns>An Error instance that represents a =
NotImplementedException.</returns>
    var e =3D Function._validateParams(arguments, [
        {name: "message", type: String, mayBeNull: true, optional: true}
    ]);
    if (e) throw e;
    return Sys._error("NotImplemented", message, "notImplemented");
}

$type.parameterCount =3D function Error$parameterCount(message) {
    /// <summary locid=3D"M:J#Error.parameterCount">Creates a =
ParameterCountException with a specified error message.</summary>
    /// <param name=3D"message" type=3D"String" optional=3D"true" =
mayBeNull=3D"true">A message that describes the error.</param>
    /// <returns>An Error instance that represents a =
ParameterCountException.</returns>
    var e =3D Function._validateParams(arguments, [
        {name: "message", type: String, mayBeNull: true, optional: true}
    ]);
    if (e) throw e;
    return Sys._error("ParameterCount", message, "parameterCount");
}

$type.prototype.popStackFrame =3D function Error$popStackFrame() {
    /// <summary locid=3D"M:J#checkParam">Updates the fileName and =
lineNumber fields based on the next frame in the   stack trace. Call =
this method whenever an instance of Error is returned   from a function. =
This makes the fileName and lineNumber reported in the   FireFox console =
point to the location where the exception was thrown, not   the location =
where the instance of Error was created.</summary>
    if (arguments.length !=3D=3D 0) throw Error.parameterCount();


    if (typeof(this.stack) =3D=3D=3D "undefined" || this.stack =3D=3D=3D =
null ||
        typeof(this.fileName) =3D=3D=3D "undefined" || this.fileName =
=3D=3D=3D null ||
        typeof(this.lineNumber) =3D=3D=3D "undefined" || this.lineNumber =
=3D=3D=3D null) {
        return;
    }

    var stackFrames =3D this.stack.split("\n");

    var currentFrame =3D stackFrames[0];
    var pattern =3D this.fileName + ":" + this.lineNumber;
    while(typeof(currentFrame) !=3D=3D "undefined" &&
          currentFrame !=3D=3D null &&
          currentFrame.indexOf(pattern) < 0) {
        stackFrames.shift();
        currentFrame =3D stackFrames[0];
    }

    var nextFrame =3D stackFrames[1];

    if (typeof(nextFrame) =3D=3D=3D "undefined" || nextFrame =3D=3D=3D =
null) {
        return;
    }

    var nextFrameParts =3D nextFrame.match(/@(.*):(\d+)$/);
    if (typeof(nextFrameParts) =3D=3D=3D "undefined" || nextFrameParts =
=3D=3D=3D null) {
        return;
    }

    this.fileName =3D nextFrameParts[1];

    this.lineNumber =3D parseInt(nextFrameParts[2]);

    stackFrames.shift();
    this.stack =3D stackFrames.join("\n");
}
$type =3D Object;
$type.__typeName =3D 'Object';
$type.__class =3D true;

$type.getType =3D function Object$getType(instance) {
    /// <summary locid=3D"M:J#Object.getType"></summary>
    /// <param name=3D"instance">The object for which the type must be =
returned.</param>
    /// <returns type=3D"Type">The type of the object.</returns>
    var e =3D Function._validateParams(arguments, [
        {name: "instance"}
    ]);
    if (e) throw e;
    var ctor =3D instance.constructor;
    if (!ctor || (typeof(ctor) !=3D=3D "function") || !ctor.__typeName =
|| (ctor.__typeName =3D=3D=3D 'Object')) {
        return Object;
    }
    return ctor;
}

$type.getTypeName =3D function Object$getTypeName(instance) {
    /// <summary locid=3D"M:J#Object.getTypeName"></summary>
    /// <param name=3D"instance">The object for which the type name must =
be returned.</param>
    /// <returns type=3D"String">The name of the type of the =
object.</returns>
    var e =3D Function._validateParams(arguments, [
        {name: "instance"}
    ]);
    if (e) throw e;
    return Object.getType(instance).getName();
}
$type =3D String;
$type.__typeName =3D 'String';
$type.__class =3D true;

$prototype =3D $type.prototype;
$prototype.endsWith =3D function String$endsWith(suffix) {
    /// <summary locid=3D"M:J#String.endsWith">Determines whether the =
end of this instance matches the specified string.</summary>
    /// <param name=3D"suffix" type=3D"String">A string to compare =
to.</param>
    /// <returns type=3D"Boolean">true if suffix matches the end of this =
instance; otherwise, false.</returns>
    var e =3D Function._validateParams(arguments, [
        {name: "suffix", type: String}
    ]);
    if (e) throw e;
    return (this.substr(this.length - suffix.length) =3D=3D=3D suffix);
}

$prototype.startsWith =3D function String$startsWith(prefix) {
    /// <summary locid=3D"M:J#String.startsWith">Determines whether the =
beginning of this instance matches the specified string.</summary>
    /// <param name=3D"prefix" type=3D"String">The String to =
compare.</param>
    /// <returns type=3D"Boolean">true if prefix matches the beginning =
of this string; otherwise, false.</returns>
    var e =3D Function._validateParams(arguments, [
        {name: "prefix", type: String}
    ]);
    if (e) throw e;
    return (this.substr(0, prefix.length) =3D=3D=3D prefix);
}

$prototype.trim =3D function String$trim() {
    /// <summary locid=3D"M:J#String.trim">Removes all leading and =
trailing white-space characters from the current String =
object.</summary>
    /// <returns type=3D"String">The string that remains after all =
white-space characters are removed from the start and end of the current =
String object.</returns>
    if (arguments.length !=3D=3D 0) throw Error.parameterCount();
    return this.replace(/^\s+|\s+$/g, '');
}

$prototype.trimEnd =3D function String$trimEnd() {
    /// <summary locid=3D"M:J#String.trimEnd">Removes all trailing white =
spaces from the current String object.</summary>
    /// <returns type=3D"String">The string that remains after all =
white-space characters are removed from the end of the current String =
object.</returns>
    if (arguments.length !=3D=3D 0) throw Error.parameterCount();
    return this.replace(/\s+$/, '');
}

$prototype.trimStart =3D function String$trimStart() {
    /// <summary locid=3D"M:J#String.trimStart">Removes all leading =
white spaces from the current String object.</summary>
    /// <returns type=3D"String">The string that remains after all =
white-space characters are removed from the start of the current String =
object.</returns>
    if (arguments.length !=3D=3D 0) throw Error.parameterCount();
    return this.replace(/^\s+/, '');
}

$type.format =3D function String$format(format, args) {
    /// <summary locid=3D"M:J#String.format">Replaces the format items =
in a specified String with the text equivalents of the values of   =
corresponding object instances. The invariant culture will be used to =
format dates and numbers.</summary>
    /// <param name=3D"format" type=3D"String">A format string.</param>
    /// <param name=3D"args" parameterArray=3D"true" =
mayBeNull=3D"true">The objects to format.</param>
    /// <returns type=3D"String">A copy of format in which the format =
items have been replaced by the   string equivalent of the corresponding =
instances of object arguments.</returns>
    var e =3D Function._validateParams(arguments, [
        {name: "format", type: String},
        {name: "args", mayBeNull: true, parameterArray: true}
    ]);
    if (e) throw e;
    return String._toFormattedString(false, arguments);
}

$type._toFormattedString =3D function =
String$_toFormattedString(useLocale, args) {
    var result =3D '';
    var format =3D args[0];

    for (var i=3D0;;) {
        var open =3D format.indexOf('{', i);
        var close =3D format.indexOf('}', i);
        if ((open < 0) && (close < 0)) {
            result +=3D format.slice(i);
            break;
        }
        if ((close > 0) && ((close < open) || (open < 0))) {
            if (format.charAt(close + 1) !=3D=3D '}') {
                throw Error.argument('format', =
Sys.Res.stringFormatBraceMismatch);
            }
            result +=3D format.slice(i, close + 1);
            i =3D close + 2;
            continue;
        }

        result +=3D format.slice(i, open);
        i =3D open + 1;

        if (format.charAt(i) =3D=3D=3D '{') {
            result +=3D '{';
            i++;
            continue;
        }

        if (close < 0) throw Error.argument('format', =
Sys.Res.stringFormatBraceMismatch);


        var brace =3D format.substring(i, close);
        var colonIndex =3D brace.indexOf(':');
        var argNumber =3D parseInt((colonIndex < 0)? brace : =
brace.substring(0, colonIndex), 10) + 1;
        if (isNaN(argNumber)) throw Error.argument('format', =
Sys.Res.stringFormatInvalid);
        var argFormat =3D (colonIndex < 0)? '' : =
brace.substring(colonIndex + 1);

        var arg =3D args[argNumber];
        if (typeof(arg) =3D=3D=3D "undefined" || arg =3D=3D=3D null) {
            arg =3D '';
        }

        if (arg.toFormattedString) {
            result +=3D arg.toFormattedString(argFormat);
        }
        else if (useLocale && arg.localeFormat) {
            result +=3D arg.localeFormat(argFormat);
        }
        else if (arg.format) {
            result +=3D arg.format(argFormat);
        }
        else
            result +=3D arg.toString();

        i =3D close + 1;
    }

    return result;
}
$type =3D Boolean;
$type.__typeName =3D 'Boolean';
$type.__class =3D true;

$type.parse =3D function Boolean$parse(value) {
    /// <summary locid=3D"M:J#Boolean.parse">Creates a bool from its =
string representation.</summary>
    /// <param name=3D"value" type=3D"String">"true" or "false".</param>
    /// <returns type=3D"Boolean"></returns>
    var e =3D Function._validateParams(arguments, [
        {name: "value", type: String}
    ], false);
    if (e) throw e;
    var v =3D value.trim().toLowerCase(),
        r;
    if (v =3D=3D=3D 'false') {
        r =3D false;
    }
    else if (v =3D=3D=3D 'true') {
        r =3D true;
    }
    else {
        throw Error.argumentOutOfRange('value', value, =
Sys.Res.boolTrueOrFalse);
    }
    return r;
}
$type =3D Date;
$type.__typeName =3D 'Date';
$type.__class =3D true;
$type =3D Number;
$type.__typeName =3D 'Number';
$type.__class =3D true;
$type =3D RegExp;
$type.__typeName =3D 'RegExp';
$type.__class =3D true;
if (!window) this.window =3D this;

window.Type =3D $type =3D Function;

$type.__fullyQualifiedIdentifierRegExp =3D new RegExp("^[^.0-9 =
\\s|,;:&*=3D+\\-()\\[\\]{}^%#@!~\\n\\r\\t\\f\\\\]([^ =
\\s|,;:&*=3D+\\-()\\[\\]{}^%#@!~\\n\\r\\t\\f\\\\]*[^. =
\\s|,;:&*=3D+\\-()\\[\\]{}^%#@!~\\n\\r\\t\\f\\\\])?$", "i");
$type.__identifierRegExp =3D new RegExp("^[^.0-9 =
\\s|,;:&*=3D+\\-()\\[\\]{}^%#@!~\\n\\r\\t\\f\\\\][^. =
\\s|,;:&*=3D+\\-()\\[\\]{}^%#@!~\\n\\r\\t\\f\\\\]*$", "i");

$prototype =3D $type.prototype;
$prototype.callBaseMethod =3D function Type$callBaseMethod(instance, =
name, baseArguments) {
    /// <summary locid=3D"M:J#Type.callBaseMethod"></summary>
    /// <param name=3D"instance">The instance for the base method. =
Usually 'this'.</param>
    /// <param name=3D"name" type=3D"String">The name of the base =
method.</param>
    /// <param name=3D"baseArguments" type=3D"Array" optional=3D"true" =
mayBeNull=3D"true" elementMayBeNull=3D"true">The arguments to pass to =
the base method.</param>
    /// <returns>The return value of the base method.</returns>
    var e =3D Function._validateParams(arguments, [
        {name: "instance"},
        {name: "name", type: String},
        {name: "baseArguments", type: Array, mayBeNull: true, optional: =
true, elementMayBeNull: true}
    ]);
    if (e) throw e;
    var baseMethod =3D Sys._getBaseMethod(this, instance, name);
    if (!baseMethod) throw =
Error.invalidOperation(String.format(Sys.Res.methodNotFound, name));
    return baseArguments ? baseMethod.apply(instance, baseArguments) : =
baseMethod.apply(instance);
}

$prototype.getBaseMethod =3D function Type$getBaseMethod(instance, name) =
{
    /// <summary locid=3D"M:J#Type.getBaseMethod">Use this method to get =
the base implementation of a method from the base class.</summary>
    /// <param name=3D"instance">The instance for which the base method =
is needed. Usually 'this'.</param>
    /// <param name=3D"name" type=3D"String">The name of the method to =
get.</param>
    /// <returns type=3D"Function" mayBeNull=3D"true">The base =
method.</returns>
    var e =3D Function._validateParams(arguments, [
        {name: "instance"},
        {name: "name", type: String}
    ]);
    if (e) throw e;
    return Sys._getBaseMethod(this, instance, name);
}

$prototype.getBaseType =3D function Type$getBaseType() {
    /// <summary locid=3D"M:J#Type.getBaseType"></summary>
    /// <returns type=3D"Type" mayBeNull=3D"true">The base =
type.</returns>
    if (arguments.length !=3D=3D 0) throw Error.parameterCount();
    return (typeof(this.__baseType) =3D=3D=3D "undefined") ? null : =
this.__baseType;
}

$prototype.getInterfaces =3D function Type$getInterfaces() {
    /// <summary locid=3D"M:J#Type.getInterfaces"></summary>
    /// <returns type=3D"Array" elementType=3D"Type" mayBeNull=3D"false" =
elementMayBeNull=3D"false">A copy of the list of interfaces that the =
type implements.</returns>
    if (arguments.length !=3D=3D 0) throw Error.parameterCount();
    var result =3D [];
    var type =3D this;
    while(type) {
        var interfaces =3D type.__interfaces;
        if (interfaces) {
            for (var i =3D 0, l =3D interfaces.length; i < l; i++) {
                var interfaceType =3D interfaces[i];
                if (!Array.contains(result, interfaceType)) {
                    result.push(interfaceType);
                }
            }
        }
        type =3D type.__baseType;
    }
    return result;
}

$prototype.getName =3D function Type$getName() {
    /// <summary locid=3D"M:J#Type.getName"></summary>
    /// <returns type=3D"String">The name of the type.</returns>
    if (arguments.length !=3D=3D 0) throw Error.parameterCount();
    return (typeof(this.__typeName) =3D=3D=3D "undefined") ? "" : =
this.__typeName;
}

$prototype.implementsInterface =3D function =
Type$implementsInterface(interfaceType) {
    /// <summary locid=3D"M:J#Type.implementsInterface"></summary>
    /// <param name=3D"interfaceType" type=3D"Type">The interface to =
test.</param>
    /// <returns type=3D"Boolean">True if the type implements the =
interface.</returns>
    var e =3D Function._validateParams(arguments, [
        {name: "interfaceType", type: Type}
    ]);
    if (e) throw e;
    this.resolveInheritance();

    var interfaceName =3D interfaceType.getName();
    var cache =3D this.__interfaceCache;
    if (cache) {
        var cacheEntry =3D cache[interfaceName];
        if (typeof(cacheEntry) !=3D=3D 'undefined') return cacheEntry;
    }
    else {
        cache =3D this.__interfaceCache =3D {};
    }

    var baseType =3D this;
    while (baseType) {
        var interfaces =3D baseType.__interfaces;
        if (interfaces && Array.indexOf(interfaces, interfaceType) =
!=3D=3D -1) {
            return cache[interfaceName] =3D true;
        }

        baseType =3D baseType.__baseType;
    }

    return cache[interfaceName] =3D false;
}

$prototype.inheritsFrom =3D function Type$inheritsFrom(parentType) {
    /// <summary locid=3D"M:J#Type.inheritsFrom"></summary>
    /// <param name=3D"parentType" type=3D"Type">The type to =
test.</param>
    /// <returns type=3D"Boolean">True if the type inherits from =
parentType.</returns>
    var e =3D Function._validateParams(arguments, [
        {name: "parentType", type: Type}
    ]);
    if (e) throw e;
    this.resolveInheritance();
    return Sys._inheritsFrom(this, parentType);
}

Sys._inheritsFrom =3D function _inheritsFrom(type, parentType) {
    var ret;
    if (parentType) {
        var baseType =3D type.__baseType;
        while (baseType) {
            if (baseType =3D=3D=3D parentType) {
                ret =3D true;
                break;
            }
            baseType =3D baseType.__baseType;
        }
    }
    return !!ret;
}

$prototype.initializeBase =3D function Type$initializeBase(instance, =
baseArguments) {
    /// <summary locid=3D"M:J#Type.initializeBase">This method =
initializes the base type in the context   of a given instance object =
(to keep track of the base type, and to   effectively inherit the object =
model of the base class, and   initializing members of the base class).  =
 This should be called from the derived class constructor.</summary>
    /// <param name=3D"instance">The object to initialize base types =
for. Usually 'this'.</param>
    /// <param name=3D"baseArguments" type=3D"Array" optional=3D"true" =
mayBeNull=3D"true" elementMayBeNull=3D"true">The arguments for the base =
constructor.</param>
    /// <returns>The instance.</returns>
    var e =3D Function._validateParams(arguments, [
        {name: "instance"},
        {name: "baseArguments", type: Array, mayBeNull: true, optional: =
true, elementMayBeNull: true}
    ]);
    if (e) throw e;
    if (!Sys._isInstanceOfType(this, instance)) throw =
Error.argumentType('instance', Object.getType(instance), this);

    this.resolveInheritance();
    var baseType =3D this.__baseType;
    if (baseType) {
        baseArguments ? baseType.apply(instance, baseArguments) : =
baseType.apply(instance);
    }

    return instance;
}

$prototype.isImplementedBy =3D function Type$isImplementedBy(instance) {
    /// <summary locid=3D"M:J#Type.isImplementedBy"></summary>
    /// <param name=3D"instance" mayBeNull=3D"true">The object on which =
the interface must be tested.</param>
    /// <returns type=3D"Boolean">True if the instance implements the =
interface.</returns>
    var e =3D Function._validateParams(arguments, [
        {name: "instance", mayBeNull: true}
    ]);
    if (e) throw e;
    if (typeof(instance) =3D=3D=3D "undefined" || instance =3D=3D=3D =
null) return false;

    var instanceType =3D Object.getType(instance);
    return !!(instanceType.implementsInterface && =
instanceType.implementsInterface(this));
}

$prototype.isInstanceOfType =3D function Type$isInstanceOfType(instance) =
{
    /// <summary locid=3D"M:J#Type.isInstanceOfType"></summary>
    /// <param name=3D"instance" mayBeNull=3D"true">The object on which =
the type must be tested.</param>
    /// <returns type=3D"Boolean">True if the object is an instance of =
the type or one of its derived types.</returns>
    var e =3D Function._validateParams(arguments, [
        {name: "instance", mayBeNull: true}
    ]);
    if (e) throw e;
    return Sys._isInstanceOfType(this, instance);
}

$prototype.registerClass =3D function Type$registerClass(typeName, =
baseType, interfaceTypes) {
    /// <summary locid=3D"M:J#Type.registerClass">Registers a class =
(represented by its ctor function), and   optional base type, followed =
by any number of interfaces.</summary>
    /// <param name=3D"typeName" type=3D"String">The fully-qualified =
name of the type.</param>
    /// <param name=3D"baseType" type=3D"Type" optional=3D"true" =
mayBeNull=3D"true">The base type.</param>
    /// <param name=3D"interfaceTypes" parameterArray=3D"true" =
type=3D"Type">One or several interfaces that the type =
implements.</param>
    /// <returns type=3D"Type">The registered type.</returns>
    var e =3D Function._validateParams(arguments, [
        {name: "typeName", type: String},
        {name: "baseType", type: Type, mayBeNull: true, optional: true},
        {name: "interfaceTypes", type: Type, parameterArray: true}
    ]);
    if (e) throw e;
    if (!Type.__fullyQualifiedIdentifierRegExp.test(typeName)) throw =
Error.argument('typeName', Sys.Res.notATypeName);
    var parsedName;
    try {
        parsedName =3D eval(typeName);
    }
    catch(e) {
        throw Error.argument('typeName', Sys.Res.argumentTypeName);
    }
    if (parsedName !=3D=3D this) throw Error.argument('typeName', =
Sys.Res.badTypeName);
    if (Sys.__registeredTypes[typeName]) throw =
Error.invalidOperation(String.format(Sys.Res.typeRegisteredTwice, =
typeName));

    if ((arguments.length > 1) && (typeof(baseType) =3D=3D=3D =
'undefined')) throw Error.argumentUndefined('baseType');
    var prototype =3D this.prototype;
    prototype.constructor =3D this;
    this.__typeName =3D typeName;
    this.__class =3D true;
    if (baseType) {
        this.__baseType =3D baseType;
        this.__basePrototypePending =3D true;
    }
    Sys.__upperCaseTypes[typeName.toUpperCase()] =3D this;

    if (interfaceTypes) {
        var interfaces =3D this.__interfaces =3D [];
        this.resolveInheritance();
        for (var i =3D 2, l =3D arguments.length; i < l; i++) {
            var interfaceType =3D arguments[i];
            if (!interfaceType.__interface) throw =
Error.argument('interfaceTypes[' + (i - 2) + ']', =
Sys.Res.notAnInterface);
            for (var methodName in interfaceType.prototype) {
                var method =3D interfaceType.prototype[methodName];
                if (!prototype[methodName]) {
                    prototype[methodName] =3D method;
                }
            }
            interfaces.push(interfaceType);
        }
    }
    Sys.__registeredTypes[typeName] =3D true;
    return this;
}

Sys.registerComponent =3D function registerComponent(type, options) {
    /// <summary locid=3D"M:J#Sys.registerComponent">Generates a =
create() function for the given type using the optional description and =
parameters for intellisense.</summary>
    /// <param name=3D"type" type=3D"Function">The type to be =
created.</param>
    /// <param name=3D"options" type=3D"Object" optional=3D"true" =
mayBeNull=3D"true"></param>
    var e =3D Function._validateParams(arguments, [
        {name: "type", type: Function},
        {name: "options", type: Object, mayBeNull: true, optional: true}
    ]);
    if (e) throw e;
    var typeName =3D type.getName();
    var isControlOrBehavior =3D Sys.UI && (Sys._inheritsFrom(type, =
Sys.UI.Control) || Sys._inheritsFrom(type, Sys.UI.Behavior));
    var name =3D (options && options.name);
    if (!name) {
        name =3D typeName;
        var i =3D name.lastIndexOf('.');
        if (i >=3D 0) {
            name =3D name.substr(i+1);
            if (name && name.charAt(0) =3D=3D=3D "_") return;
        }
        name =3D name.substr(0, 1).toLowerCase() + name.substr(1);
    }
    if (!options) {
        options =3D {};
    }
    options.name =3D name;
    options.type =3D type;
    options.typeName =3D typeName;
    options._isBehavior =3D isControlOrBehavior;
   =20
    options =3D Sys.components[name] =3D merge(Sys.components[name], =
options);

    var fn =3D Sys._getCreate(options),
        target =3D isControlOrBehavior ? Sys.ElementSet.prototype : =
Sys.create;
    target[name] =3D fn;
}

Sys.registerPlugin =3D function registerPlugin(pluginInfo) {
    /// <summary locid=3D"M:J#Sys.registerPlugin"></summary>
    /// <param name=3D"pluginInfo" type=3D"Object">An object describing =
the plugin (name, plugin, dom, global, components)</param>
    var e =3D Function._validateParams(arguments, [
        {name: "pluginInfo", type: Object}
    ]);
    if (e) throw e;
    var name =3D pluginInfo.name,
        fnName =3D pluginInfo.functionName || name;
    Sys.plugins[name] =3D merge(Sys.plugins[name], pluginInfo);
    var plugin =3D pluginInfo.plugin,
        sysTarget;
    if (pluginInfo.global) {
        sysTarget =3D Sys;
    }
    else if (pluginInfo.dom) {
        sysTarget =3D Sys.ElementSet.prototype;
    }
    else if (pluginInfo.components) {
        sysTarget =3D Sys.ComponentSet.prototype;
    }
    if (sysTarget) {
        sysTarget[fnName] =3D Sys._getCreate(pluginInfo, true);
    }
}

Sys._createComp =3D function _createComp(component, defaults, args) {
    var type =3D component.type,
        parameters =3D component.parameters || [],
        isBehavior =3D component._isBehavior,
        target =3D isBehavior ? args[0] : null;
    var props =3D args[parameters.length] || {};
    props =3D merge({}, defaults, props);
    foreach(parameters, function(parameter, i) {
        var name =3D typeof(parameter) =3D=3D=3D "string" ? parameter : =
parameter.name,
            value =3D args[i];
        if (typeof(value) !=3D=3D "undefined" && typeof(props[name]) =
=3D=3D=3D "undefined") {
            props[name] =3D value;
        }
    });
    if (this instanceof Sys.ElementSet) {
        var components =3D [];
        this.each(function() {
            components.push(Sys._create(type, props, this));
        });
        return new Sys.ComponentSet(this, components);
    }
    else {
        return Sys._create(type, props);
    }
}

Sys._create =3D function _create(type, properties, target) {
    var targetType =3D typeof(target);
    if (targetType =3D=3D=3D "string") {
        target =3D Sys.get(target);
    }
    var instance;
    Sys._2Pass(function() {
        instance =3D targetType =3D=3D=3D "undefined" ? new type() : new =
type(target);
        callIf(instance, "beginUpdate");
        Sys._set(instance, properties);
        var componentType =3D Sys.Component;
        if (!componentType || !componentType._register(instance)) {
            callIf(instance, "endUpdate") || callIf(instance, =
"initialize");
        }
    });   =20
    return instance;
}

$prototype.registerInterface =3D function =
Type$registerInterface(typeName) {
    /// <summary locid=3D"M:J#Type.registerInterface">Registers an =
interface (represented by its ctor function).</summary>
    /// <param name=3D"typeName" type=3D"String">The fully-qualified =
name of the interface.</param>
    /// <returns type=3D"Type">The registered interface.</returns>
    var e =3D Function._validateParams(arguments, [
        {name: "typeName", type: String}
    ]);
    if (e) throw e;
    if (!Type.__fullyQualifiedIdentifierRegExp.test(typeName)) throw =
Error.argument('typeName', Sys.Res.notATypeName);
    var parsedName;
    try {
        parsedName =3D eval(typeName);
    }
    catch(e) {
        throw Error.argument('typeName', Sys.Res.argumentTypeName);
    }
    if (parsedName !=3D=3D this) throw Error.argument('typeName', =
Sys.Res.badTypeName);
    if (Sys.__registeredTypes[typeName]) throw =
Error.invalidOperation(String.format(Sys.Res.typeRegisteredTwice, =
typeName));
    Sys.__upperCaseTypes[typeName.toUpperCase()] =3D this;

    this.prototype.constructor =3D this;
    this.__typeName =3D typeName;
    this.__interface =3D true;
    Sys.__registeredTypes[typeName] =3D true;

    return this;
}

$prototype.resolveInheritance =3D function Type$resolveInheritance() {
    /// <summary locid=3D"M:J#Type.resolveInheritance">This method is =
called on the ctor function instance. It does three things: 1. It stores =
__baseType as a property of the constructor function 2. It copies =
members from the baseType's prototype into the  prototype associated =
with the type represented by this ctor,  if this type itself doesn't =
have the same member in its prototype,  i.e., it doesn't override the =
method. 3. It recurses up the inheritance chain to do the same for the =
base type.  Note that this logic runs only once per type, because it  is =
based on true value for __basePrototypePending property  off the ctor =
function.</summary>
    if (arguments.length !=3D=3D 0) throw Error.parameterCount();

    if (this.__basePrototypePending) {
        var baseType =3D this.__baseType;

        baseType.resolveInheritance();
        var basePrototype =3D baseType.prototype,
            thisPrototype =3D this.prototype;
        for (var memberName in basePrototype) {
            thisPrototype[memberName] =3D thisPrototype[memberName] || =
basePrototype[memberName];
        }
        delete this.__basePrototypePending;
    }
}

$type.getRootNamespaces =3D function Type$getRootNamespaces() {
    /// <summary locid=3D"M:J#Type.getRootNamespaces"></summary>
    /// <returns type=3D"Array">Returns an array containing references =
to all the root namespaces</returns>
    if (arguments.length !=3D=3D 0) throw Error.parameterCount();
    return Array.clone(Sys.__rootNamespaces);
}

$type.isClass =3D function Type$isClass(type) {
    /// <summary locid=3D"M:J#Type.isClass"></summary>
    /// <param name=3D"type" mayBeNull=3D"true">The type to =
test.</param>
    /// <returns type=3D"Boolean">True if the type is a class.</returns>
    var e =3D Function._validateParams(arguments, [
        {name: "type", mayBeNull: true}
    ]);
    if (e) throw e;
    return !!(type && type.__class);
}

$type.isInterface =3D function Type$isInterface(type) {
    /// <summary locid=3D"M:J#Type.isInterface"></summary>
    /// <param name=3D"type" mayBeNull=3D"true">The type to =
test.</param>
    /// <returns type=3D"Boolean">True if the type is an =
interface.</returns>
    var e =3D Function._validateParams(arguments, [
        {name: "type", mayBeNull: true}
    ]);
    if (e) throw e;
    return !!(type && type.__interface);
}

$type.isNamespace =3D function Type$isNamespace(object) {
    /// <summary locid=3D"M:J#Type.isNamespace"></summary>
    /// <param name=3D"object" mayBeNull=3D"true">The type to =
test.</param>
    /// <returns type=3D"Boolean">True if the object is a =
namespace.</returns>
    var e =3D Function._validateParams(arguments, [
        {name: "object", mayBeNull: true}
    ]);
    if (e) throw e;
    return !!(object && object.__namespace);
}

$type.parse =3D function Type$parse(typeName, ns) {
    /// <summary locid=3D"M:J#Type.parse">If a namespace is specified, =
the type name is searched for on this namespace in a  case-insensitive =
way.  If no namespace is specified, the fully-qualified, case-sensitive =
type name must be specified.</summary>
    /// <param name=3D"typeName" type=3D"String" mayBeNull=3D"true">The =
name of the type.</param>
    /// <param name=3D"ns" optional=3D"true" mayBeNull=3D"true">The =
namespace where to look for the type.</param>
    /// <returns type=3D"Type" mayBeNull=3D"true">The type or =
null.</returns>
    var e =3D Function._validateParams(arguments, [
        {name: "typeName", type: String, mayBeNull: true},
        {name: "ns", mayBeNull: true, optional: true}
    ]);
    if (e) throw e;
    var fn;
    if (ns) {
        fn =3D Sys.__upperCaseTypes[ns.getName().toUpperCase() + '.' + =
typeName.toUpperCase()];
        return fn || null;
    }
    if (!typeName) return null;
    var htClasses =3D Type.__htClasses;
    if (!htClasses) {
        Type.__htClasses =3D htClasses =3D {};
    }
    fn =3D htClasses[typeName];
    if (!fn) {
        fn =3D window.eval(typeName);
        if (typeof(fn) !=3D=3D 'function') throw =
Error.argument('typeName', Sys.Res.notATypeName);
        htClasses[typeName] =3D fn;
    }
    return fn;
}

$type.registerNamespace =3D function =
Type$registerNamespace(namespacePath) {
    /// <summary locid=3D"M:J#Type.registerNamespace">Creates a =
namespace.</summary>
    /// <param name=3D"namespacePath" type=3D"String">The full path of =
the namespace.</param>
    var e =3D Function._validateParams(arguments, [
        {name: "namespacePath", type: String}
    ]);
    if (e) throw e;
    Type._registerNamespace(namespacePath);
}
$type._registerNamespace =3D function =
Type$_registerNamespace(namespacePath) {
    if (!Type.__fullyQualifiedIdentifierRegExp.test(namespacePath)) =
throw Error.argument('namespacePath', Sys.Res.invalidNameSpace);
    var rootObject =3D window;
    var namespaceParts =3D namespacePath.split('.');

    for (var i =3D 0, l =3D namespaceParts.length; i < l; i++) {
        var currentPart =3D namespaceParts[i];
        var ns =3D rootObject[currentPart];
        var nsType =3D typeof(ns);
        if ((nsType !=3D=3D "undefined") && (ns !=3D=3D null)) {
            if (nsType =3D=3D=3D "function") {
                throw =
Error.invalidOperation(String.format(Sys.Res.namespaceContainsClass, =
namespaceParts.splice(0, i + 1).join('.')));
            }
            if ((typeof(ns) !=3D=3D "object") || (ns instanceof Array)) =
{
                throw =
Error.invalidOperation(String.format(Sys.Res.namespaceContainsNonObject, =
namespaceParts.splice(0, i + 1).join('.')));
            }
        }
        if (!ns) {
            ns =3D rootObject[currentPart] =3D {};
        }
        if (!ns.__namespace) {
            if (!i && (namespacePath !=3D=3D "Sys")) {
                Sys.__rootNamespaces.push(ns);
            }
            ns.__namespace =3D true;
            ns.__typeName =3D namespaceParts.slice(0, i + 1).join('.');
            var parsedName;
            try {
                parsedName =3D eval(ns.__typeName);
            }
            catch(e) {
                parsedName =3D null;
            }
            if (parsedName !=3D=3D ns) {
                delete rootObject[currentPart];
                throw Error.argument('namespacePath', =
Sys.Res.invalidNameSpace);
            }
            ns.getName =3D function ns$getName() {return =
this.__typeName;}
        }
        rootObject =3D ns;
    }
}

$type._checkDependency =3D function Type$_checkDependency(dependency, =
featureName) {
    var scripts =3D Type._registerScript._scripts, isDependent =3D =
(scripts ? (!!scripts[dependency]) : false);
    if ((typeof(featureName) !=3D=3D 'undefined') && !isDependent) {
        throw =
Error.invalidOperation(String.format(Sys.Res.requiredScriptReferenceNotIn=
cluded,=20
        featureName, dependency));
    }
    return isDependent;
}

$type._registerScript =3D function Type$_registerScript(scriptName, =
dependencies) {
    var scripts =3D Type._registerScript._scripts;
    if (!scripts) {
        Type._registerScript._scripts =3D scripts =3D {};
    }
    if (scripts[scriptName]) {
        throw =
Error.invalidOperation(String.format(Sys.Res.scriptAlreadyLoaded, =
scriptName));
    }
    scripts[scriptName] =3D true;
    if (dependencies) {
        for (var i =3D 0, l =3D dependencies.length; i < l; i++) {
            var dependency =3D dependencies[i];
            if (!Type._checkDependency(dependency)) {
                throw =
Error.invalidOperation(String.format(Sys.Res.scriptDependencyNotFound, =
scriptName, dependency));
            }
        }
    }
}

$type._registerNamespace("Sys");
Sys.__upperCaseTypes =3D {};
Sys.__rootNamespaces =3D [Sys];
Sys.__registeredTypes =3D {};

Sys._isInstanceOfType =3D function _isInstanceOfType(type, instance) {
    if (typeof(instance) =3D=3D=3D "undefined" || instance =3D=3D=3D =
null) return false;
    if (instance instanceof type) return true;
    var instanceType =3D Object.getType(instance);
    return !!(instanceType =3D=3D=3D type) ||
           (instanceType.inheritsFrom && =
instanceType.inheritsFrom(type)) ||
           (instanceType.implementsInterface && =
instanceType.implementsInterface(type));
}

Sys._getBaseMethod =3D function _getBaseMethod(type, instance, name) {
    if (!Sys._isInstanceOfType(type, instance)) throw =
Error.argumentType('instance', Object.getType(instance), type);
    var baseType =3D type.getBaseType();
    if (baseType) {
        var baseMethod =3D baseType.prototype[name];
        return (baseMethod instanceof Function) ? baseMethod : null;
    }
    return null;
}

Sys._isDomElement =3D function _isDomElement(obj) {
    var val =3D false;
    if (typeof (obj.nodeType) !=3D=3D 'number') {
        var doc =3D obj.ownerDocument || obj.document || obj;
        if (doc !=3D obj) {
            var w =3D doc.defaultView || doc.parentWindow;
            val =3D (w !=3D obj);
        }
        else {
            val =3D !doc.body || !Sys._isDomElement(doc.body);
        }
    }
    return !val;
}

var isBrowser =3D Sys._isBrowser =3D function _isBrowser(name) {
    return Sys.Browser.agent =3D=3D=3D Sys.Browser[name];
}


foreach(Sys._ns, $type._registerNamespace);
delete Sys._ns;
$type =3D Array;
$type.__typeName =3D 'Array';
$type.__class =3D true;

var indexOf =3D Sys._indexOf =3D function _indexOf(array, item, start) {
    if (typeof(item) =3D=3D=3D "undefined") return -1;
    var length =3D array.length;
    if (length !=3D=3D 0) {
        start =3D start - 0;
        if (isNaN(start)) {
            start =3D 0;
        }
        else {
            if (isFinite(start)) {
                start =3D start - (start % 1);
            }
            if (start < 0) {
                start =3D Math.max(0, length + start);
            }
        }

        for (var i =3D start; i < length; i++) {
            if (array[i] =3D=3D=3D item) {
                return i;
            }
        }
    }
    return -1;
}

$type.add =3D $type.enqueue =3D function Array$enqueue(array, item) {
    /// <summary locid=3D"M:J#Array.enqueue">Adds an element at the end =
of the array.</summary>
    /// <param name=3D"array" type=3D"Array" =
elementMayBeNull=3D"true">The array to add to.</param>
    /// <param name=3D"item" mayBeNull=3D"true">The object to =
add.</param>
    var e =3D Function._validateParams(arguments, [
        {name: "array", type: Array, elementMayBeNull: true},
        {name: "item", mayBeNull: true}
    ]);
    if (e) throw e;
    array[array.length] =3D item;
}

$type.addRange =3D function Array$addRange(array, items) {
    /// <summary locid=3D"M:J#Array.addRange">Adds a range of items at =
the end of the array.</summary>
    /// <param name=3D"array" type=3D"Array" =
elementMayBeNull=3D"true">The array to add to.</param>
    /// <param name=3D"items" type=3D"Array" =
elementMayBeNull=3D"true">The array of items to append.</param>
    var e =3D Function._validateParams(arguments, [
        {name: "array", type: Array, elementMayBeNull: true},
        {name: "items", type: Array, elementMayBeNull: true}
    ]);
    if (e) throw e;

    array.push.apply(array, items);
}

$type.clear =3D function Array$clear(array) {
    /// <summary locid=3D"M:J#Array.clear">Clears the array of its =
elements.</summary>
    /// <param name=3D"array" type=3D"Array" =
elementMayBeNull=3D"true">The array to clear.</param>
    var e =3D Function._validateParams(arguments, [
        {name: "array", type: Array, elementMayBeNull: true}
    ]);
    if (e) throw e;
    array.length =3D 0;
}

$type.clone =3D function Array$clone(array) {
    /// <summary locid=3D"M:J#Array.clone">Makes a clone of the =
array.</summary>
    /// <param name=3D"array" type=3D"Array" =
elementMayBeNull=3D"true">The array to clone.</param>
    /// <returns type=3D"Array" elementMayBeNull=3D"true">A clone of the =
array.</returns>
    var e =3D Function._validateParams(arguments, [
        {name: "array", type: Array, elementMayBeNull: true}
    ]);
    if (e) throw e;
    return array.length =3D=3D=3D 1 ? [array[0]] : Array.apply(null, =
array);
}

$type.contains =3D function Array$contains(array, item) {
    /// <summary locid=3D"M:J#Array.contains">Use this method to =
determine if an array contains the specified element.</summary>
    /// <param name=3D"array" type=3D"Array" =
elementMayBeNull=3D"true">The array to look into.</param>
    /// <param name=3D"item" mayBeNull=3D"true">The object to find in =
the array.</param>
    /// <returns type=3D"Boolean">True if the object was =
found.</returns>
    var e =3D Function._validateParams(arguments, [
        {name: "array", type: Array, elementMayBeNull: true},
        {name: "item", mayBeNull: true}
    ]);
    if (e) throw e;
    return (indexOf(array, item) >=3D 0);
}

$type.dequeue =3D function Array$dequeue(array) {
    /// <summary locid=3D"M:J#Array.dequeue"></summary>
    /// <param name=3D"array" type=3D"Array" =
elementMayBeNull=3D"true">Removes and returns the object at the =
beginning of the array.</param>
    /// <returns mayBeNull=3D"true">The object that is removed from the =
beginning of the array.</returns>
    var e =3D Function._validateParams(arguments, [
        {name: "array", type: Array, elementMayBeNull: true}
    ]);
    if (e) throw e;
    return array.shift();
}

$type.forEach =3D function Array$forEach(array, method, instance) {
    /// <summary locid=3D"M:J#Array.forEach">Calls the specified =
function on each element of the array.</summary>
    /// <param name=3D"array" type=3D"Array" =
elementMayBeNull=3D"true">The array to enumerate.</param>
    /// <param name=3D"method" type=3D"Function">The method to call.   =
The method should take the array element, the index of the element and   =
the array itself as its parameters.</param>
    /// <param name=3D"instance" optional=3D"true" =
mayBeNull=3D"true">The context under which the function must run (i.e. =
what 'this' means inside the function).</param>
    var e =3D Function._validateParams(arguments, [
        {name: "array", type: Array, elementMayBeNull: true},
        {name: "method", type: Function},
        {name: "instance", mayBeNull: true, optional: true}
    ]);
    if (e) throw e;
    for (var i =3D 0, l =3D array.length; i < l; i++) {
        var elt =3D array[i];
        if (typeof(elt) !=3D=3D 'undefined') method.call(instance, elt, =
i, array);
    }
}

$type.indexOf =3D function Array$indexOf(array, item, start) {
    /// <summary locid=3D"M:J#Array.indexOf">Finds the index in the =
array of the provided item.</summary>
    /// <param name=3D"array" type=3D"Array" =
elementMayBeNull=3D"true">The array to look into.</param>
    /// <param name=3D"item" optional=3D"true" mayBeNull=3D"true">The =
object to find.</param>
    /// <param name=3D"start" optional=3D"true" mayBeNull=3D"true">The =
index where the search begins.</param>
    /// <returns type=3D"Number">The index of the item or -1 if it =
wasn't found.</returns>
    var e =3D Function._validateParams(arguments, [
        {name: "array", type: Array, elementMayBeNull: true},
        {name: "item", mayBeNull: true, optional: true},
        {name: "start", mayBeNull: true, optional: true}
    ]);
    if (e) throw e;
    return indexOf(array, item, start);
}

$type.insert =3D function Array$insert(array, index, item) {
    /// <summary locid=3D"M:J#Array.insert">Inserts an item at the =
specified index.</summary>
    /// <param name=3D"array" type=3D"Array" =
elementMayBeNull=3D"true">The array to insert into.</param>
    /// <param name=3D"index" mayBeNull=3D"true">The index where the =
item will be inserted.</param>
    /// <param name=3D"item" mayBeNull=3D"true">The item to =
insert.</param>
    var e =3D Function._validateParams(arguments, [
        {name: "array", type: Array, elementMayBeNull: true},
        {name: "index", mayBeNull: true},
        {name: "item", mayBeNull: true}
    ]);
    if (e) throw e;
    array.splice(index, 0, item);
}

$type.parse =3D function Array$parse(value) {
    /// <summary locid=3D"M:J#Array.parse">Creates an array from a =
string representation of the form "[elt1, elt2, elt3]".</summary>
    /// <param name=3D"value" type=3D"String" mayBeNull=3D"true">The =
string representation of the array.</param>
    /// <returns type=3D"Array" elementMayBeNull=3D"true">An array built =
from the string representation.</returns>
    var e =3D Function._validateParams(arguments, [
        {name: "value", type: String, mayBeNull: true}
    ]);
    if (e) throw e;
    var v =3D value ? window.eval("(" + value + ")") : [];
    if (!Array.isInstanceOfType(v)) throw Error.argument('value', =
Sys.Res.arrayParseBadFormat);
    return v;
}

$type.remove =3D function Array$remove(array, item) {
    /// <summary locid=3D"M:J#Array.remove">Removes the first occurence =
of an item from the array.</summary>
    /// <param name=3D"array" type=3D"Array" =
elementMayBeNull=3D"true">The array to remove from.</param>
    /// <param name=3D"item" mayBeNull=3D"true">The item to =
remove.</param>
    /// <returns type=3D"Boolean">True if the item was found.</returns>
    var e =3D Function._validateParams(arguments, [
        {name: "array", type: Array, elementMayBeNull: true},
        {name: "item", mayBeNull: true}
    ]);
    if (e) throw e;
    var index =3D indexOf(array, item);
    if (index >=3D 0) {
        array.splice(index, 1);
    }
    return (index >=3D 0);
}

$type.removeAt =3D function Array$removeAt(array, index) {
    /// <summary locid=3D"M:J#Array.removeAt">Removes the item at the =
specified index from the array.</summary>
    /// <param name=3D"array" type=3D"Array" =
elementMayBeNull=3D"true">The array to remove from.</param>
    /// <param name=3D"index" mayBeNull=3D"true">The index of the item =
to remove.</param>
    var e =3D Function._validateParams(arguments, [
        {name: "array", type: Array, elementMayBeNull: true},
        {name: "index", mayBeNull: true}
    ]);
    if (e) throw e;
    array.splice(index, 1);
}



Type._registerScript._scripts =3D {
	"MicrosoftAjaxCore.js": true,
	"MicrosoftAjaxGlobalization.js": true,
	"MicrosoftAjaxSerialization.js": true,
	"MicrosoftAjaxComponentModel.js": true,
	"MicrosoftAjaxHistory.js": true,
	"MicrosoftAjaxNetwork.js" : true,
	"MicrosoftAjaxWebServices.js": true };

$type =3D Sys.IDisposable =3D function IDisposable() {
    throw Error.notImplemented();
}
$type.prototype =3D {
    dispose: function IDisposable$dispose() {
        throw Error.notImplemented();
    }
}
$type.registerInterface('Sys.IDisposable');
$type =3D Sys.StringBuilder =3D function StringBuilder(initialText) {
    /// <summary locid=3D"M:J#Sys.StringBuilder.#ctor">Provides an =
optimized mechanism to concatenate a sequence of strings.</summary>
    /// <param name=3D"initialText" optional=3D"true" =
mayBeNull=3D"true">The initial text for the StringBuilder.</param>
    var e =3D Function._validateParams(arguments, [
        {name: "initialText", mayBeNull: true, optional: true}
    ]);
    if (e) throw e;
    this._parts =3D (typeof(initialText) !=3D=3D 'undefined' && =
initialText !=3D=3D null && initialText !=3D=3D '') ?
        [initialText.toString()] : [];
    this._value =3D {};
    this._len =3D 0;
}

$type.prototype =3D {
    append: function StringBuilder$append(text) {
        /// <summary locid=3D"M:J#Sys.StringBuilder.append">Appends a =
new string at the end of the StringBuilder.</summary>
        /// <param name=3D"text" mayBeNull=3D"true">The string to =
append.</param>
        /// <returns type=3D"Sys.StringBuilder"></returns>
        var e =3D Function._validateParams(arguments, [
            {name: "text", mayBeNull: true}
        ]);
        if (e) throw e;
        this._parts.push(text);
        return this;
    },

    appendLine: function StringBuilder$appendLine(text) {
        /// <summary locid=3D"M:J#Sys.StringBuilder.appendLine">Appends =
a new string as a line of text at the end of the =
StringBuilder.</summary>
        /// <param name=3D"text" optional=3D"true" =
mayBeNull=3D"true">The string to append.</param>
        /// <returns type=3D"Sys.StringBuilder"></returns>
        var e =3D Function._validateParams(arguments, [
            {name: "text", mayBeNull: true, optional: true}
        ]);
        if (e) throw e;
        this._parts.push(
            ((typeof(text) =3D=3D=3D 'undefined') || (text =3D=3D=3D =
null) || (text =3D=3D=3D '')) ?
            '\r\n' : (text + '\r\n'));
        return this;
    },

    clear: function StringBuilder$clear() {
        /// <summary locid=3D"M:J#Sys.StringBuilder.clear">Clears the =
StringBuilder of its current contents.</summary>
        if (arguments.length !=3D=3D 0) throw Error.parameterCount();
        this._parts =3D [];
        this._value =3D {};
        this._len =3D 0;
    },

    isEmpty: function StringBuilder$isEmpty() {
        /// <summary locid=3D"M:J#Sys.StringBuilder.isEmpty">Use this =
method to determine if the StringBuilder has contents.</summary>
        /// <returns type=3D"Boolean">True if the StringBuilder has any =
contents.</returns>
        if (arguments.length !=3D=3D 0) throw Error.parameterCount();
        return (!this._parts.length || !this.toString());
    },

    toString: function StringBuilder$toString(separator) {
        /// <summary locid=3D"M:J#Sys.StringBuilder.toString">Creates a =
string from the contents of the StringBuilder.</summary>
        /// <param name=3D"separator" type=3D"String" optional=3D"true" =
mayBeNull=3D"true">The separator to insert between the elements of the =
StringBuilder.</param>
        /// <returns type=3D"String">The string built from the =
StringBuilder.</returns>
        var e =3D Function._validateParams(arguments, [
            {name: "separator", type: String, mayBeNull: true, optional: =
true}
        ]);
        if (e) throw e;
        separator =3D separator || '';
        var parts =3D this._parts;
        if (this._len !=3D=3D parts.length) {
            this._value =3D {};
            this._len =3D parts.length;
        }
        var val =3D this._value;
        var ret =3D val[separator];
        if (typeof(ret) =3D=3D=3D 'undefined') {
            if (separator !=3D=3D '') {
                for (var i =3D 0; i < parts.length;) {
                    var part =3D parts[i];
                    if ((typeof(part) =3D=3D=3D 'undefined') || (part =
=3D=3D=3D '') || (part =3D=3D=3D null)) {
                        parts.splice(i, 1);
                    }
                    else {
                        i++;
                    }
                }
            }
            val[separator] =3D ret =3D parts.join(separator);
        }
        return ret;
    }
}
$type.registerClass('Sys.StringBuilder');

var agent =3D navigator.userAgent,
    browser =3D Sys.Browser =3D {
        InternetExplorer: {},
        Firefox: {},
        Safari: {},
        Opera: {},
        agent: null,
        hasDebuggerStatement: false,
        name: navigator.appName,
        version: parseFloat(navigator.appVersion),
        documentMode: 0 };

if (agent.indexOf(' MSIE ') > -1) {
    browser.agent =3D browser.InternetExplorer;
    browser.version =3D parseFloat(agent.match(/MSIE (\d+\.\d+)/)[1]);
    if ((browser.version > 7) && (document.documentMode > 6)) {
        browser.documentMode =3D document.documentMode;   =20
    }
    browser.hasDebuggerStatement =3D true;
}
else if (agent.indexOf(' Firefox/') > -1) {
    browser.agent =3D browser.Firefox;
    browser.version =3D parseFloat(agent.match(/ =
Firefox\/(\d+\.\d+)/)[1]);
    browser.name =3D 'Firefox';
    browser.hasDebuggerStatement =3D true;
}
else if (agent.indexOf(' AppleWebKit/') > -1) {
    browser.agent =3D browser.Safari;
    browser.version =3D parseFloat(agent.match(/ =
AppleWebKit\/(\d+(\.\d+)?)/)[1]);
    browser.name =3D 'Safari';
}
else if (agent.indexOf('Opera/') > -1) {
    browser.agent =3D browser.Opera;
}


$type =3D Sys.EventArgs =3D function EventArgs() {
    /// <summary locid=3D"M:J#Sys.EventArgs.#ctor">EventArgs is the base =
class for classes containing event data.</summary>
    if (arguments.length !=3D=3D 0) throw Error.parameterCount();
}
$type.registerClass('Sys.EventArgs');

Sys.EventArgs.Empty =3D new Sys.EventArgs();
$type =3D Sys.CancelEventArgs =3D function CancelEventArgs() {
    /// <summary locid=3D"M:J#Sys.CancelEventArgs.#ctor">CancelEventArgs =
is the base class for classes containing event data, which can be used =
to cancel the event.</summary>
    if (arguments.length !=3D=3D 0) throw Error.parameterCount();
    Sys.CancelEventArgs.initializeBase(this);

    this._cancel =3D false;
}
$type.prototype =3D {
    get_cancel: function CancelEventArgs$get_cancel() {
        /// <value type=3D"Boolean" =
locid=3D"P:J#Sys.CancelEventArgs.cancel"></value>
        if (arguments.length !=3D=3D 0) throw Error.parameterCount();
        return this._cancel;
    },
    set_cancel: function CancelEventArgs$set_cancel(value) {
        var e =3D Function._validateParams(arguments, [{name: "value", =
type: Boolean}]);
        if (e) throw e;
        this._cancel =3D value;
    }
}
$type.registerClass('Sys.CancelEventArgs', Sys.EventArgs);


Type.registerNamespace('Sys.UI');

$type =3D Sys._Debug =3D function _Debug() {
    /// <summary locid=3D"M:J#Sys.Debug.#ctor">Provides a set of methods =
that help debug your code.</summary>
    /// <field name=3D"isDebug" type=3D"Boolean" =
locid=3D"F:J#Sys.Debug.isDebug"></field>
    if (arguments.length !=3D=3D 0) throw Error.parameterCount();
}
$type.prototype =3D {
    _appendConsole: function _Debug$_appendConsole(text) {
        if ((typeof(Debug) !=3D=3D 'undefined') && Debug.writeln) {
            Debug.writeln(text);
        }
        if (window.console && window.console.log) {
            window.console.log(text);
        }
        if (window.opera) {
            window.opera.postError(text);
        }
        if (window.debugService) {
            window.debugService.trace(text);
        }
    },

    _getTrace: function() {
        var traceElement =3D Sys.get('#TraceConsole');
        return (traceElement && (traceElement.tagName.toUpperCase() =
=3D=3D=3D 'TEXTAREA')) ? traceElement : null;
    },

    _appendTrace: function _Debug$_appendTrace(text) {
        var traceElement =3D this._getTrace();
        if (traceElement) {
            traceElement.value +=3D text + '\n';
        }
    },

    assert: function _Debug$assert(condition, message, displayCaller) {
        /// <summary locid=3D"M:J#Sys.Debug.assert">Checks for a =
condition, displays a message and prompts the user to break   into the =
debugger if the condition is false.</summary>
        /// <param name=3D"condition" type=3D"Boolean">true to prevent a =
message being displayed; otherwise, false.</param>
        /// <param name=3D"message" type=3D"String" optional=3D"true" =
mayBeNull=3D"true">A message to display.</param>
        /// <param name=3D"displayCaller" type=3D"Boolean" =
optional=3D"true" mayBeNull=3D"true">True if the function calling assert =
should be displayed in the message.</param>
        var e =3D Function._validateParams(arguments, [
            {name: "condition", type: Boolean},
            {name: "message", type: String, mayBeNull: true, optional: =
true},
            {name: "displayCaller", type: Boolean, mayBeNull: true, =
optional: true}
        ]);
        if (e) throw e;
        if (!condition) {
            message =3D (displayCaller && this.assert.caller) ?
                String.format(Sys.Res.assertFailedCaller, message, =
this.assert.caller) :
                String.format(Sys.Res.assertFailed, message);

            if (confirm(String.format(Sys.Res.breakIntoDebugger, =
message))) {
                this.fail(message);
            }
        }
    },

    clearTrace: function _Debug$clearTrace() {
        /// <summary locid=3D"M:J#Sys.Debug.clearTrace"></summary>
        if (arguments.length !=3D=3D 0) throw Error.parameterCount();
        var traceElement =3D this._getTrace();
        if (traceElement) {
            traceElement.value =3D '';
        }
    },

    fail: function _Debug$fail(message) {
        /// <summary locid=3D"M:J#Sys.Debug.fail">Displays a message in =
the debugger's output window and breaks into the debugger.</summary>
        /// <param name=3D"message" type=3D"String" mayBeNull=3D"true">A =
message to display.</param>
        var e =3D Function._validateParams(arguments, [
            {name: "message", type: String, mayBeNull: true}
        ]);
        if (e) throw e;
        this._appendConsole(message);

        if (Sys.Browser.hasDebuggerStatement) {
            window.eval('debugger');
        }
    },

    trace: function _Debug$trace(text) {
        /// <summary locid=3D"M:J#Sys.Debug.trace">Appends a text line =
to the debugger console and the TraceConsole textarea element if =
available.</summary>
        /// <param name=3D"text">Text for trace.</param>
        var e =3D Function._validateParams(arguments, [
            {name: "text"}
        ]);
        if (e) throw e;
        this._appendConsole(text);
        this._appendTrace(text);
    },

    traceDump: function _Debug$traceDump(object, name) {
        /// <summary locid=3D"M:J#Sys.Debug.traceDump">Dumps an object =
to the debugger console and the TraceConsole textarea element if =
available.</summary>
        /// <param name=3D"object" mayBeNull=3D"true">Object for trace =
dump.</param>
        /// <param name=3D"name" type=3D"String" mayBeNull=3D"true" =
optional=3D"true">Object name.</param>
        var e =3D Function._validateParams(arguments, [
            {name: "object", mayBeNull: true},
            {name: "name", type: String, mayBeNull: true, optional: =
true}
        ]);
        if (e) throw e;
        this._traceDump(object, name, true);
    },

    _traceDump: function _Debug$_traceDump(object, name, recursive, =
indentationPadding, loopArray) {
        name =3D name || 'traceDump';
        indentationPadding =3D indentationPadding || '';
        var prefix =3D indentationPadding + name + ": ";
        if (object =3D=3D=3D null) {
            this.trace(prefix + 'null');
            return;
        }
        switch(typeof(object)) {
            case 'undefined':
                this.trace(prefix + 'Undefined');
                break;
            case 'number': case 'string': case 'boolean':
                this.trace(prefix + object);
                break;
            default:
                if (Date.isInstanceOfType(object) || =
RegExp.isInstanceOfType(object)) {
                    this.trace(prefix + object.toString());
                    break;
                }
                if (!loopArray) {
                    loopArray =3D [];
                }
                else if (Array.contains(loopArray, object)) {
                    this.trace(prefix + '...');
                    return;
                }
                loopArray.push(object);

                if ((object =3D=3D window) || (object =3D=3D=3D =
document) ||
                    (window.HTMLElement && (object instanceof =
HTMLElement)) ||
                    (typeof(object.nodeName) =3D=3D=3D 'string')) {
                    var tag =3D object.tagName || 'DomElement';
                    if (object.id) {
                        tag +=3D ' - ' + object.id;
                    }
                    this.trace(indentationPadding + name + ' {' +  tag + =
'}');
                }
                else {
                    var typeName =3D Object.getTypeName(object);
                    this.trace(indentationPadding + name + =
(typeof(typeName) =3D=3D=3D 'string' ? ' {' + typeName + '}' : ''));
                    if ((indentationPadding =3D=3D=3D '') || recursive) =
{
                        indentationPadding +=3D "    ";
                        var i, length, properties, p, v;
                        if (object instanceof Array) {
                            length =3D object.length;
                            for (i =3D 0; i < length; i++) {
                                this._traceDump(object[i], '[' + i + =
']', recursive, indentationPadding, loopArray);
                            }
                        }
                        else {
                            for (p in object) {
                                v =3D object[p];
                                if (typeof(v) !=3D=3D "function") {
                                    this._traceDump(v, p, recursive, =
indentationPadding, loopArray);
                                }
                            }
                        }
                    }
                }
                Array.remove(loopArray, object);
        }
    }
}
$type.registerClass('Sys._Debug');

$type =3D Sys.Debug =3D new Sys._Debug();
$type.isDebug =3D true;
function Sys$Enum$parse(value, ignoreCase) {
    /// <summary locid=3D"M:J#Sys.Enum.parse">Converts the string =
representation of the name or numeric value of one or more enumerated   =
constants to an equivalent enumerated object.</summary>
    /// <param name=3D"value" type=3D"String">A string containing the =
name or value to convert.</param>
    /// <param name=3D"ignoreCase" type=3D"Boolean" optional=3D"true" =
mayBeNull=3D"true">If true, the parsing will be done case-insensitively. =
 If omitted, the parsing is done case-sensitively.</param>
    /// <returns>An object of type enumType whose value is represented =
by value.</returns>
    var e =3D Function._validateParams(arguments, [
        {name: "value", type: String},
        {name: "ignoreCase", type: Boolean, mayBeNull: true, optional: =
true}
    ]);
    if (e) throw e;
    var values, parsed, val;
    if (ignoreCase) {
        values =3D this.__lowerCaseValues;
        if (!values) {
            this.__lowerCaseValues =3D values =3D {};
            var prototype =3D this.prototype;
            for (var name in prototype) {
                values[name.toLowerCase()] =3D prototype[name];
            }
        }
    }
    else {
        values =3D this.prototype;
    }
    function throwError(v) {
        if (typeof(parsed) !=3D=3D 'number') throw =
Error.argument('value', String.format(Sys.Res.enumInvalidValue, v, =
this.__typeName));
    }
    if (!this.__flags) {
        val =3D (ignoreCase ? value.toLowerCase() : value);
        parsed =3D values[val.trim()];
        if (typeof(parsed) !=3D=3D 'number') throwError.call(this, =
value);
        return parsed;
    }
    else {
        var parts =3D (ignoreCase ? value.toLowerCase() : =
value).split(',');
        var v =3D 0;

        for (var i =3D parts.length - 1; i >=3D 0; i--) {
            var part =3D parts[i].trim();
            parsed =3D values[part];
            if (typeof(parsed) !=3D=3D 'number') throwError.call(this, =
value.split(',')[i].trim());
            v |=3D parsed;
        }
        return v;
    }
}

function Sys$Enum$toString(value) {
    /// <summary locid=3D"M:J#Sys.Enum.toString">Converts the value of =
an enum instance to its equivalent string representation.</summary>
    /// <param name=3D"value" optional=3D"true" mayBeNull=3D"true">The =
value of the enum instance for which the string representation must be =
constructed.</param>
    /// <returns type=3D"String">The string representation of =
"value".</returns>
    var e =3D Function._validateParams(arguments, [
        {name: "value", mayBeNull: true, optional: true}
    ]);
    if (e) throw e;
    if ((typeof(value) =3D=3D=3D 'undefined') || (value =3D=3D=3D null)) =
return this.__string;
    if ((typeof(value) !=3D 'number') || ((value % 1) !=3D=3D 0)) throw =
Error.argumentType('value', Object.getType(value), this);
    var values =3D this.prototype;
    var i;
    if (!this.__flags || (value =3D=3D=3D 0)) {
        for (i in values) {
            if (values[i] =3D=3D=3D value) {
                return i;
            }
        }
    }
    else {
        var sorted =3D this.__sortedValues;
        if (!sorted) {
            sorted =3D [];
            for (i in values) {
                sorted.push({key: i, value: values[i]});
            }
            sorted.sort(function(a, b) {
                return a.value - b.value;
            });
            this.__sortedValues =3D sorted;
        }
        var parts =3D [];
        var v =3D value;
        for (i =3D sorted.length - 1; i >=3D 0; i--) {
            var kvp =3D sorted[i];
            var vali =3D kvp.value;
            if (vali =3D=3D=3D 0) continue;
            if ((vali & value) =3D=3D=3D vali) {
                parts.push(kvp.key);
                v -=3D vali;
                if (v =3D=3D=3D 0) break;
            }
        }
        if (parts.length && v =3D=3D=3D 0) return =
parts.reverse().join(', ');
    }
    throw Error.argumentOutOfRange('value', value, =
String.format(Sys.Res.enumInvalidValue, value, this.__typeName));
}

$type =3D Type;

$type.prototype.registerEnum =3D function Type$registerEnum(name, flags) =
{
    /// <summary locid=3D"M:J#Sys.UI.LineType.#ctor">Registers an enum =
type.</summary>
    /// <param name=3D"name" type=3D"String">The fully-qualified name of =
the enum.</param>
    /// <param name=3D"flags" type=3D"Boolean" optional=3D"true" =
mayBeNull=3D"true">True if the enum is a flags collection.</param>
    var e =3D Function._validateParams(arguments, [
        {name: "name", type: String},
        {name: "flags", type: Boolean, mayBeNull: true, optional: true}
    ]);
    if (e) throw e;
    if (!Type.__fullyQualifiedIdentifierRegExp.test(name)) throw =
Error.argument('name', Sys.Res.notATypeName);
    var parsedName;
    try {
        parsedName =3D eval(name);
    }
    catch(e) {
        throw Error.argument('name', Sys.Res.argumentTypeName);
    }
    if (parsedName !=3D=3D this) throw Error.argument('name', =
Sys.Res.badTypeName);
    if (Sys.__registeredTypes[name]) throw =
Error.invalidOperation(String.format(Sys.Res.typeRegisteredTwice, =
name));
    for (var j in this.prototype) {
        var val =3D this.prototype[j];
        if (!Type.__identifierRegExp.test(j)) throw =
Error.invalidOperation(String.format(Sys.Res.enumInvalidValueName, j));
        if (typeof(val) !=3D=3D 'number' || (val % 1) !=3D=3D 0) throw =
Error.invalidOperation(Sys.Res.enumValueNotInteger);
        if (typeof(this[j]) !=3D=3D 'undefined') throw =
Error.invalidOperation(String.format(Sys.Res.enumReservedName, j));
    }
    Sys.__upperCaseTypes[name.toUpperCase()] =3D this;

    for (var i in this.prototype) {
        this[i] =3D this.prototype[i];
    }
    this.__typeName =3D name;
    this.parse =3D Sys$Enum$parse;
    this.__string =3D this.toString();
    this.toString =3D Sys$Enum$toString;
    this.__flags =3D flags;
    this.__enum =3D true;
    Sys.__registeredTypes[name] =3D true;
}

$type.isEnum =3D function Type$isEnum(type) {
    /// <summary locid=3D"M:J#Type.isEnum"></summary>
    /// <param name=3D"type" mayBeNull=3D"true">The type to =
test.</param>
    /// <returns type=3D"Boolean">True if the type is an enum.</returns>
    var e =3D Function._validateParams(arguments, [
        {name: "type", mayBeNull: true}
    ]);
    if (e) throw e;
    return !!(type && type.__enum);
}

$type.isFlags =3D function Type$isFlags(type) {
    /// <summary locid=3D"M:J#Type.isFlags"></summary>
    /// <param name=3D"type" mayBeNull=3D"true">The type to =
test.</param>
    /// <returns type=3D"Boolean">True if the type is a set of =
flags.</returns>
    var e =3D Function._validateParams(arguments, [
        {name: "type", mayBeNull: true}
    ]);
    if (e) throw e;
    return !!(type && type.__flags);
}

$type =3D Sys.CollectionChange =3D function CollectionChange(action, =
newItems, newStartingIndex, oldItems, oldStartingIndex) {
    /// <summary locid=3D"M:J#Sys.CollectionChange.#ctor">Describes a =
change in a collection.</summary>
    /// <param name=3D"action" =
type=3D"Sys.NotifyCollectionChangedAction"></param>
    /// <param name=3D"newItems" optional=3D"true" =
mayBeNull=3D"true">The items that were added when action is add or =
replace.</param>
    /// <param name=3D"newStartingIndex" type=3D"Number" =
integer=3D"true" optional=3D"true" mayBeNull=3D"true">The index where =
new items have been inserted.</param>
    /// <param name=3D"oldItems" optional=3D"true" =
mayBeNull=3D"true">The items that were removed when action is remove or =
replace.</param>
    /// <param name=3D"oldStartingIndex" type=3D"Number" =
integer=3D"true" optional=3D"true" mayBeNull=3D"true">The index where =
old items have been removed.</param>
    /// <field name=3D"action" =
type=3D"Sys.NotifyCollectionChangedAction" =
locid=3D"F:J#Sys.CollectionChange.action"></field>
    /// <field name=3D"newItems" type=3D"Array" mayBeNull=3D"true" =
elementMayBeNull=3D"true" =
locid=3D"F:J#Sys.CollectionChange.newItems">The items that were added =
when action is add.</field>
    /// <field name=3D"newStartingIndex" type=3D"Number" =
integer=3D"true" locid=3D"F:J#Sys.CollectionChange.newStartingIndex">The =
index where new items have been inserted.</field>
    /// <field name=3D"oldItems" type=3D"Array" mayBeNull=3D"true" =
elementMayBeNull=3D"true" =
locid=3D"F:J#Sys.CollectionChange.oldItems">The items that were removed =
when action is remove.</field>
    /// <field name=3D"oldStartingIndex" type=3D"Number" =
integer=3D"true" locid=3D"F:J#Sys.CollectionChange.oldStartingIndex">The =
index where old items have been removed.</field>
    var e =3D Function._validateParams(arguments, [
        {name: "action", type: Sys.NotifyCollectionChangedAction},
        {name: "newItems", mayBeNull: true, optional: true},
        {name: "newStartingIndex", type: Number, mayBeNull: true, =
integer: true, optional: true},
        {name: "oldItems", mayBeNull: true, optional: true},
        {name: "oldStartingIndex", type: Number, mayBeNull: true, =
integer: true, optional: true}
    ]);
    if (e) throw e;
    this.action =3D action;
    if (newItems) {
        if (!(newItems instanceof Array)) {
            newItems =3D [newItems];
        }
    }
    this.newItems =3D newItems || null;
    if (typeof newStartingIndex !=3D=3D "number") {
        newStartingIndex =3D -1;
    }
    this.newStartingIndex =3D newStartingIndex;
    if (oldItems) {
        if (!(oldItems instanceof Array)) {
            oldItems =3D [oldItems];
        }
    }
    this.oldItems =3D oldItems || null;
    if (typeof oldStartingIndex !=3D=3D "number") {
        oldStartingIndex =3D -1;
    }
    this.oldStartingIndex =3D oldStartingIndex;
}
$type.registerClass("Sys.CollectionChange");
$type =3D Sys.NotifyCollectionChangedAction =3D function =
NotifyCollectionChangedAction() {
    /// <summary =
locid=3D"M:J#Sys.NotifyCollectionChangedAction.#ctor">Describes how a =
collection has changed.</summary>
    /// <field name=3D"add" type=3D"Number" integer=3D"true" =
static=3D"true" =
locid=3D"F:J#Sys.NotifyCollectionChangedAction.add"></field>
    /// <field name=3D"remove" type=3D"Number" integer=3D"true" =
static=3D"true" =
locid=3D"F:J#Sys.NotifyCollectionChangedAction.remove"></field>
    /// <field name=3D"reset" type=3D"Number" integer=3D"true" =
static=3D"true" =
locid=3D"F:J#Sys.NotifyCollectionChangedAction.reset"></field>
    if (arguments.length !=3D=3D 0) throw Error.parameterCount();
    throw Error.notImplemented();
}
$type.prototype =3D {
    add: 0,
    remove: 1,
    reset: 2
}
$type.registerEnum('Sys.NotifyCollectionChangedAction');
$type =3D Sys.NotifyCollectionChangedEventArgs =3D function =
NotifyCollectionChangedEventArgs(changes) {
    /// <summary =
locid=3D"M:J#Sys.NotifyCollectionChangedEventArgs.#ctor">Describes how =
the collection was changed.</summary>
    /// <param name=3D"changes" type=3D"Array" =
elementType=3D"Sys.CollectionChange">A list of changes that were =
performed on the collection since the last event.</param>
    var e =3D Function._validateParams(arguments, [
        {name: "changes", type: Array, elementType: =
Sys.CollectionChange}
    ]);
    if (e) throw e;
    this._changes =3D changes;
    Sys.NotifyCollectionChangedEventArgs.initializeBase(this);
}
$type.prototype =3D {
    get_changes: function NotifyCollectionChangedEventArgs$get_changes() =
{
        /// <value type=3D"Array" elementType=3D"Sys.CollectionChange" =
locid=3D"P:J#Sys.NotifyCollectionChangedEventArgs.changes"></value>
        if (arguments.length !=3D=3D 0) throw Error.parameterCount();
        return this._changes || [];
    }
}
$type.registerClass("Sys.NotifyCollectionChangedEventArgs", =
Sys.EventArgs);

$type =3D Sys.Observer =3D function Observer() {
    throw Error.invalidOperation();
}
$type.registerClass("Sys.Observer");

$type.makeObservable =3D function Observer$makeObservable(target) {
    /// <summary locid=3D"M:J#Sys.Observer.makeObservable">Makes an =
object directly observable by adding observable methods to it.</summary>
    /// <param name=3D"target" mayBeNull=3D"false">The object, array, or =
DOM element to make observable.</param>
    /// <returns>The observable object.</returns>
    var e =3D Function._validateParams(arguments, [
        {name: "target"}
    ]);
    if (e) throw e;
    var isArray =3D target instanceof Array,
        o =3D Sys.Observer;
    Sys.Observer._ensureObservable(target);
    if (target.setValue =3D=3D=3D o._observeMethods.setValue) return =
target;
    o._addMethods(target, o._observeMethods);
    if (isArray) {
        o._addMethods(target, o._arrayMethods);
    }
    return target;
}

$type._ensureObservable =3D function Observer$_ensureObservable(target) =
{
    var type =3D typeof target;
    if ((type =3D=3D=3D "string") || (type =3D=3D=3D "number") || (type =
=3D=3D=3D "boolean") || (type =3D=3D=3D "date")) {
        throw =
Error.invalidOperation(String.format(Sys.Res.notObservable, type));
    }
}
$type._addMethods =3D function Observer$_addMethods(target, methods) {
    for (var m in methods) {
        if (target[m] && (target[m] !=3D=3D methods[m])) {
            throw =
Error.invalidOperation(String.format(Sys.Res.observableConflict, m));
        }
        target[m] =3D methods[m];
    }
}
$type._addEventHandler =3D function Observer$_addEventHandler(target, =
eventName, handler) {
    Sys.Observer._getContext(target, true).events._addHandler(eventName, =
handler);
}
$type.addEventHandler =3D function Observer$addEventHandler(target, =
eventName, handler) {
    /// <summary locid=3D"M:J#Sys.Observer.addEventHandler">Adds an =
observable event handler to the target.</summary>
    /// <param name=3D"target"></param>
    /// <param name=3D"eventName" type=3D"String"></param>
    /// <param name=3D"handler" type=3D"Function"></param>
    var e =3D Function._validateParams(arguments, [
        {name: "target"},
        {name: "eventName", type: String},
        {name: "handler", type: Function}
    ]);
    if (e) throw e;
    Sys.Observer._ensureObservable(target);
    Sys.Observer._addEventHandler(target, eventName, handler);
}
$type._removeEventHandler =3D function =
Observer$_removeEventHandler(target, eventName, handler) {
    Sys.Observer._getContext(target, =
true).events._removeHandler(eventName, handler);
}
$type.removeEventHandler =3D function =
Observer$removeEventHandler(target, eventName, handler) {
    /// <summary locid=3D"M:J#Sys.Observer.removeEventHandler">Removes =
an observable event handler from the target.</summary>
    /// <param name=3D"target"></param>
    /// <param name=3D"eventName" type=3D"String"></param>
    /// <param name=3D"handler" type=3D"Function"></param>
    var e =3D Function._validateParams(arguments, [
        {name: "target"},
        {name: "eventName", type: String},
        {name: "handler", type: Function}
    ]);
    if (e) throw e;
    Sys.Observer._ensureObservable(target);
    Sys.Observer._removeEventHandler(target, eventName, handler);
}
$type.clearEventHandlers =3D function =
Observer$clearEventHandlers(target, eventName) {
    /// <summary locid=3D"M:J#Sys.Observer.clearEventHandlers">Removes =
all observable event handlers from the target.</summary>
    /// <param name=3D"target"></param>
    /// <param name=3D"eventName" type=3D"String" mayBeNull=3D"true" =
optional=3D"true">If not given, handlers for all events are =
removed.</param>
    var e =3D Function._validateParams(arguments, [
        {name: "target"},
        {name: "eventName", type: String, mayBeNull: true, optional: =
true}
    ]);
    if (e) throw e;
    Sys.Observer._ensureObservable(target);
    Sys.Observer._getContext(target, =
true).events._removeHandlers(eventName);
}
$type.raiseEvent =3D function Observer$raiseEvent(target, eventName, =
eventArgs) {
    /// <summary locid=3D"M:J#Sys.Observer.raiseEvent">Raises an =
observable event on the target.</summary>
    /// <param name=3D"target"></param>
    /// <param name=3D"eventName" type=3D"String"></param>
    /// <param name=3D"eventArgs" optional=3D"true" =
mayBeNull=3D"true"></param>
    var e =3D Function._validateParams(arguments, [
        {name: "target"},
        {name: "eventName", type: String},
        {name: "eventArgs", mayBeNull: true, optional: true}
    ]);
    if (e) throw e;
    Sys.Observer._ensureObservable(target);
    var ctx =3D Sys.Observer._getContext(target);
    if (!ctx) return;
    var handler =3D ctx.events.getHandler(eventName);
    if (handler) {
        handler(target, eventArgs || Sys.EventArgs.Empty);
    }
}
$type.addPropertyChanged =3D function =
Observer$addPropertyChanged(target, handler) {
    /// <summary locid=3D"M:J#Sys.Observer.addPropertyChanged">Adds a =
propertyChanged event handler to the target.</summary>
    /// <param name=3D"target" mayBeNull=3D"false">The object to =
observe.</param>
    /// <param name=3D"handler" type=3D"Function">The event =
handler.</param>
    var e =3D Function._validateParams(arguments, [
        {name: "target"},
        {name: "handler", type: Function}
    ]);
    if (e) throw e;
    Sys.Observer._ensureObservable(target);
    Sys.Observer._addEventHandler(target, "propertyChanged", handler);
}
$type.removePropertyChanged =3D function =
Observer$removePropertyChanged(target, handler) {
    /// <summary =
locid=3D"M:J#Sys.Observer.removePropertyChanged">Removes a =
propertyChanged event handler from the target.</summary>
    /// <param name=3D"target" mayBeNull=3D"false">The object to =
observe.</param>
    /// <param name=3D"handler" type=3D"Function">The event =
handler.</param>
    var e =3D Function._validateParams(arguments, [
        {name: "target"},
        {name: "handler", type: Function}
    ]);
    if (e) throw e;
    Sys.Observer._ensureObservable(target);
    Sys.Observer._removeEventHandler(target, "propertyChanged", =
handler);
}
$type.beginUpdate =3D function Observer$beginUpdate(target) {
    /// <summary locid=3D"M:J#Sys.Observer.beginUpdate"></summary>
    /// <param name=3D"target" mayBeNull=3D"false"></param>
    var e =3D Function._validateParams(arguments, [
        {name: "target"}
    ]);
    if (e) throw e;
    Sys.Observer._ensureObservable(target);
    Sys.Observer._getContext(target, true).updating =3D true;
}
$type.endUpdate =3D function Observer$endUpdate(target) {
    /// <summary locid=3D"M:J#Sys.Observer.endUpdate"></summary>
    /// <param name=3D"target" mayBeNull=3D"false"></param>
    var e =3D Function._validateParams(arguments, [
        {name: "target"}
    ]);
    if (e) throw e;
    Sys.Observer._ensureObservable(target);
    var ctx =3D Sys.Observer._getContext(target);
    if (!ctx || !ctx.updating) return;
    ctx.updating =3D false;
    var dirty =3D ctx.dirty;
    ctx.dirty =3D false;
    if (dirty) {
        if (target instanceof Array) {
            var changes =3D ctx.changes;
            ctx.changes =3D null;
            Sys.Observer.raiseCollectionChanged(target, changes);
        }
        Sys.Observer.raisePropertyChanged(target, "");
    }
}
$type.isUpdating =3D function Observer$isUpdating(target) {
    /// <summary locid=3D"M:J#Sys.Observer.isUpdating"></summary>
    /// <param name=3D"target" mayBeNull=3D"false"></param>
    /// <returns type=3D"Boolean"></returns>
    var e =3D Function._validateParams(arguments, [
        {name: "target"}
    ]);
    if (e) throw e;
    Sys.Observer._ensureObservable(target);
    var ctx =3D Sys.Observer._getContext(target);
    return ctx ? ctx.updating : false;
}
$type._setValue =3D function Observer$_setValue(target, propertyName, =
value) {
    var getter, setter, mainTarget =3D target, path =3D =
propertyName.split('.');
    for (var i =3D 0, l =3D (path.length - 1); i < l ; i++) {
        var name =3D path[i];
        getter =3D target["get_" + name];=20
        if (typeof (getter) =3D=3D=3D "function") {
            target =3D getter.call(target);
        }
        else {
            target =3D target[name];
        }
        var type =3D typeof (target);
        if ((target =3D=3D=3D null) || (type =3D=3D=3D "undefined")) {
            throw =
Error.invalidOperation(String.format(Sys.Res.nullReferenceInPath, =
propertyName));
        }
    }   =20
    var currentValue, lastPath =3D path[l];
    getter =3D target["get_" + lastPath];
    if (typeof(getter) =3D=3D=3D 'function') {
        currentValue =3D getter.call(target);
    }
    else {
        currentValue =3D target[lastPath];
    }
    callIf(target, "set_" + lastPath, value) || (target[lastPath] =3D =
value);
    if (currentValue !=3D=3D value) {
        var ctx =3D Sys.Observer._getContext(mainTarget);
        if (ctx && ctx.updating) {
            ctx.dirty =3D true;
            return;
        };
        Sys.Observer.raisePropertyChanged(mainTarget, path[0]);
    }
}
$type.setValue =3D function Observer$setValue(target, propertyName, =
value) {
    /// <summary locid=3D"M:J#Sys.Observer.setValue">Sets a property or =
field on the target in an observable manner.</summary>
    /// <param name=3D"target" mayBeNull=3D"false">The object to set a =
property on.</param>
    /// <param name=3D"propertyName" type=3D"String">The name of the =
property to field to set.</param>
    /// <param name=3D"value" mayBeNull=3D"true">The value to =
set.</param>
    var e =3D Function._validateParams(arguments, [
        {name: "target"},
        {name: "propertyName", type: String},
        {name: "value", mayBeNull: true}
    ]);
    if (e) throw e;
    Sys.Observer._ensureObservable(target);
    Sys.Observer._setValue(target, propertyName, value);
}
$type.raisePropertyChanged =3D function =
Observer$raisePropertyChanged(target, propertyName) {
    /// <summary locid=3D"M:J#Sys.Observer.raisePropertyChanged">Raises =
a change notification event.</summary>
    /// <param name=3D"target" mayBeNull=3D"false">The object to raise =
the event on.</param>
    /// <param name=3D"propertyName" type=3D"String">The name of the =
property that changed.</param>
    Sys.Observer.raiseEvent(target, "propertyChanged", new =
Sys.PropertyChangedEventArgs(propertyName));
}

$type.addCollectionChanged =3D function =
Observer$addCollectionChanged(target, handler) {
    /// <summary =
locid=3D"M:J#Sys.Observer.addCollectionChanged"></summary>
    /// <param name=3D"target" type=3D"Array" =
elementMayBeNull=3D"true"></param>
    /// <param name=3D"handler" type=3D"Function"></param>
    var e =3D Function._validateParams(arguments, [
        {name: "target", type: Array, elementMayBeNull: true},
        {name: "handler", type: Function}
    ]);
    if (e) throw e;
    Sys.Observer._addEventHandler(target, "collectionChanged", handler);
}
$type.removeCollectionChanged =3D function =
Observer$removeCollectionChanged(target, handler) {
    /// <summary =
locid=3D"M:J#Sys.Observer.removeCollectionChanged"></summary>
    /// <param name=3D"target" type=3D"Array" =
elementMayBeNull=3D"true"></param>
    /// <param name=3D"handler" type=3D"Function"></param>
    var e =3D Function._validateParams(arguments, [
        {name: "target", type: Array, elementMayBeNull: true},
        {name: "handler", type: Function}
    ]);
    if (e) throw e;
    Sys.Observer._removeEventHandler(target, "collectionChanged", =
handler);
}
$type._collectionChange =3D function Observer$_collectionChange(target, =
change) {
    var ctx =3D this._getContext(target);
    if (ctx && ctx.updating) {
        ctx.dirty =3D true;
        var changes =3D ctx.changes;
        if (!changes) {
            ctx.changes =3D changes =3D [change];
        }
        else {
            changes.push(change);
        }
    }
    else {
        this.raiseCollectionChanged(target, [change]);
        this.raisePropertyChanged(target, 'length');
    }
}
$type.add =3D function Observer$add(target, item) {
    /// <summary locid=3D"M:J#Sys.Observer.add">Adds an item to the =
collection in an observable manner.</summary>
    /// <param name=3D"target" type=3D"Array" =
elementMayBeNull=3D"true">The array to add to.</param>
    /// <param name=3D"item" mayBeNull=3D"true">The item to add.</param>
    var e =3D Function._validateParams(arguments, [
        {name: "target", type: Array, elementMayBeNull: true},
        {name: "item", mayBeNull: true}
    ]);
    if (e) throw e;
    var change =3D new =
Sys.CollectionChange(Sys.NotifyCollectionChangedAction.add, [item], =
target.length);
    Array.add(target, item);
    Sys.Observer._collectionChange(target, change);
}
$type.addRange =3D function Observer$addRange(target, items) {
    /// <summary locid=3D"M:J#Sys.Observer.addRange">Adds items to the =
collection in an observable manner.</summary>
    /// <param name=3D"target" type=3D"Array" =
elementMayBeNull=3D"true">The array to add to.</param>
    /// <param name=3D"items" type=3D"Array" =
elementMayBeNull=3D"true">The array of items to add.</param>
    var e =3D Function._validateParams(arguments, [
        {name: "target", type: Array, elementMayBeNull: true},
        {name: "items", type: Array, elementMayBeNull: true}
    ]);
    if (e) throw e;
    var change =3D new =
Sys.CollectionChange(Sys.NotifyCollectionChangedAction.add, items, =
target.length);
    Array.addRange(target, items);
    Sys.Observer._collectionChange(target, change);
}
$type.clear =3D function Observer$clear(target) {
    /// <summary locid=3D"M:J#Sys.Observer.clear">Clears the array of =
its elements in an observable manner.</summary>
    /// <param name=3D"target" type=3D"Array" =
elementMayBeNull=3D"true">The array to clear.</param>
    var e =3D Function._validateParams(arguments, [
        {name: "target", type: Array, elementMayBeNull: true}
    ]);
    if (e) throw e;
    var oldItems =3D Array.clone(target);
    Array.clear(target);
    Sys.Observer._collectionChange(target, new =
Sys.CollectionChange(Sys.NotifyCollectionChangedAction.reset, null, -1, =
oldItems, 0));
}
$type.insert =3D function Observer$insert(target, index, item) {
    /// <summary locid=3D"M:J#Sys.Observer.insert">Inserts an item at =
the specified index in an observable manner.</summary>
    /// <param name=3D"target" type=3D"Array" =
elementMayBeNull=3D"true">The array to insert into.</param>
    /// <param name=3D"index" type=3D"Number" integer=3D"true">The index =
where the item will be inserted.</param>
    /// <param name=3D"item" mayBeNull=3D"true">The item to =
insert.</param>
    var e =3D Function._validateParams(arguments, [
        {name: "target", type: Array, elementMayBeNull: true},
        {name: "index", type: Number, integer: true},
        {name: "item", mayBeNull: true}
    ]);
    if (e) throw e;
    Array.insert(target, index, item);
    Sys.Observer._collectionChange(target, new =
Sys.CollectionChange(Sys.NotifyCollectionChangedAction.add, [item], =
index));
}
$type.remove =3D function Observer$remove(target, item) {
    /// <summary locid=3D"M:J#Sys.Observer.remove">Removes the first =
occurence of an item from the array in an observable manner.</summary>
    /// <param name=3D"target" type=3D"Array" =
elementMayBeNull=3D"true">The array to remove from.</param>
    /// <param name=3D"item" mayBeNull=3D"true">The item to =
remove.</param>
    /// <returns type=3D"Boolean">True if the item was found.</returns>
    var e =3D Function._validateParams(arguments, [
        {name: "target", type: Array, elementMayBeNull: true},
        {name: "item", mayBeNull: true}
    ]);
    if (e) throw e;
    var index =3D Array.indexOf(target, item);
    if (index !=3D=3D -1) {
        Array.remove(target, item);
        Sys.Observer._collectionChange(target, new =
Sys.CollectionChange(Sys.NotifyCollectionChangedAction.remove, null, -1, =
[item], index));
        return true;
    }
    return false;
}
$type.removeAt =3D function Observer$removeAt(target, index) {
    /// <summary locid=3D"M:J#Sys.Observer.removeAt">Removes the item at =
the specified index from the array in an observable manner.</summary>
    /// <param name=3D"target" type=3D"Array" =
elementMayBeNull=3D"true">The array to remove from.</param>
    /// <param name=3D"index" type=3D"Number" integer=3D"true">The index =
of the item to remove.</param>
    var e =3D Function._validateParams(arguments, [
        {name: "target", type: Array, elementMayBeNull: true},
        {name: "index", type: Number, integer: true}
    ]);
    if (e) throw e;
    if ((index > -1) && (index < target.length)) {
        var item =3D target[index];
        Array.removeAt(target, index);
        Sys.Observer._collectionChange(target, new =
Sys.CollectionChange(Sys.NotifyCollectionChangedAction.remove, null, -1, =
[item], index));
    }
}
$type.raiseCollectionChanged =3D function =
Observer$raiseCollectionChanged(target, changes) {
    /// <summary =
locid=3D"M:J#Sys.Observer.raiseCollectionChanged">Raises the =
collectionChanged event.</summary>
    /// <param name=3D"target">The collection to raise the event =
on.</param>
    /// <param name=3D"changes" type=3D"Array" =
elementType=3D"Sys.CollectionChange">A list of changes that were =
performed on the collection since the last event.</param>
    Sys.Observer.raiseEvent(target, "collectionChanged", new =
Sys.NotifyCollectionChangedEventArgs(changes));
}

$type._observeMethods =3D {
    add_propertyChanged: function(handler) {
        Sys.Observer._addEventHandler(this, "propertyChanged", handler);
    },
    remove_propertyChanged: function(handler) {
        Sys.Observer._removeEventHandler(this, "propertyChanged", =
handler);
    },
    addEventHandler: function(eventName, handler) {
        /// <summary =
locid=3D"M:J#Sys.Observer.raiseCollectionChanged">Adds an observable =
event handler.</summary>
        /// <param name=3D"eventName" type=3D"String"></param>
        /// <param name=3D"handler" type=3D"Function"></param>
        var e =3D Function._validateParams(arguments, [
            {name: "eventName", type: String},
            {name: "handler", type: Function}
        ]);
        if (e) throw e;
        Sys.Observer._addEventHandler(this, eventName, handler);
    },
    removeEventHandler: function(eventName, handler) {
        /// <summary =
locid=3D"M:J#Sys.Observer.raiseCollectionChanged">Removes an observable =
event handler.</summary>
        /// <param name=3D"eventName" type=3D"String"></param>
        /// <param name=3D"handler" type=3D"Function"></param>
        var e =3D Function._validateParams(arguments, [
            {name: "eventName", type: String},
            {name: "handler", type: Function}
        ]);
        if (e) throw e;
        Sys.Observer._removeEventHandler(this, eventName, handler);
    },
    clearEventHandlers: function(eventName) {
        /// <summary =
locid=3D"M:J#Sys.Observer.raiseCollectionChanged">Removes all observable =
event handlers from the target.</summary>
        /// <param name=3D"target"></param>
        /// <param name=3D"eventName" type=3D"String" mayBeNull=3D"true" =
optional=3D"true">If not given, handlers for all events are =
removed.</param>
        var e =3D Function._validateParams(arguments, [
            {name: "target"},
            {name: "eventName", type: String, mayBeNull: true, optional: =
true}
        ]);
        if (e) throw e;
        Sys.Observer._getContext(this, =
true).events._removeHandlers(eventName);
    },
    get_isUpdating: function() {
        /// <summary =
locid=3D"M:J#Sys.Observer.raiseCollectionChanged"></summary>
        /// <returns type=3D"Boolean"></returns>
        return Sys.Observer.isUpdating(this);
    },
    beginUpdate: function() {
        /// <summary =
locid=3D"M:J#Sys.Observer.raiseCollectionChanged"></summary>
        Sys.Observer.beginUpdate(this);
    },
    endUpdate: function() {
        /// <summary =
locid=3D"M:J#Sys.Observer.raiseCollectionChanged"></summary>
        Sys.Observer.endUpdate(this);
    },
    setValue: function(name, value) {
        /// <summary =
locid=3D"M:J#Sys.Observer.raiseCollectionChanged">Sets a property or =
field on the target in an observable manner.</summary>
        /// <param name=3D"name" type=3D"String">The name of the =
property to field to set.</param>
        /// <param name=3D"value" mayBeNull=3D"true">The value to =
set.</param>
        var e =3D Function._validateParams(arguments, [
            {name: "name", type: String},
            {name: "value", mayBeNull: true}
        ]);
        if (e) throw e;
        Sys.Observer._setValue(this, name, value);
    },
    raiseEvent: function(eventName, eventArgs) {
        /// <summary =
locid=3D"M:J#Sys.Observer.raiseCollectionChanged">Raises an observable =
event.</summary>
        /// <param name=3D"eventName" type=3D"String"></param>
        /// <param name=3D"eventArgs" optional=3D"true" =
mayBeNull=3D"true"></param>
        Sys.Observer.raiseEvent(this, eventName, eventArgs||null);
    },
    raisePropertyChanged: function(name) {
        /// <summary =
locid=3D"M:J#Sys.Observer.raiseCollectionChanged">Raises a change =
notification event.</summary>
        /// <param name=3D"name" type=3D"String">The name of the =
property that changed.</param>
        Sys.Observer.raiseEvent(this, "propertyChanged", new =
Sys.PropertyChangedEventArgs(name));
    }
}
$type._arrayMethods =3D {
    add_collectionChanged: function(handler) {
        Sys.Observer._addEventHandler(this, "collectionChanged", =
handler);
    },
    remove_collectionChanged: function(handler) {
        Sys.Observer._removeEventHandler(this, "collectionChanged", =
handler);
    },
    add: function(item) {
        /// <summary =
locid=3D"M:J#Sys.Observer.raiseCollectionChanged">Adds an item to the =
collection in an observable manner.</summary>
        /// <param name=3D"item" mayBeNull=3D"true">The item to =
add.</param>
        Sys.Observer.add(this, item);
    },
    addRange: function(items) {
        /// <summary =
locid=3D"M:J#Sys.Observer.raiseCollectionChanged">Adds items to the =
collection in an observable manner.</summary>
        /// <param name=3D"items" type=3D"Array" =
elementMayBeNull=3D"true">The array of items to add.</param>
        Sys.Observer.addRange(this, items);
    },
    clear: function() {
        /// <summary =
locid=3D"M:J#Sys.Observer.raiseCollectionChanged">Clears the array of =
its elements in an observable manner.</summary>
        Sys.Observer.clear(this);
    },
    insert: function(index, item) {=20
        /// <summary =
locid=3D"M:J#Sys.Observer.raiseCollectionChanged">Inserts an item at the =
specified index in an observable manner.</summary>
        /// <param name=3D"index" type=3D"Number" integer=3D"true">The =
index where the item will be inserted.</param>
        /// <param name=3D"item" mayBeNull=3D"true">The item to =
insert.</param>
        Sys.Observer.insert(this, index, item);
    },
    remove: function(item) {
        /// <summary =
locid=3D"M:J#Sys.Observer.raiseCollectionChanged">Removes the first =
occurence of an item from the array in an observable manner.</summary>
        /// <param name=3D"item" mayBeNull=3D"true">The item to =
remove.</param>
        /// <returns type=3D"Boolean">True if the item was =
found.</returns>
        return Sys.Observer.remove(this, item);
    },
    removeAt: function(index) {
        /// <summary =
locid=3D"M:J#Sys.Observer.raiseCollectionChanged">Removes the item at =
the specified index from the array in an observable manner.</summary>
        /// <param name=3D"index" type=3D"Number" integer=3D"true">The =
index of the item to remove.</param>
        Sys.Observer.removeAt(this, index);
    },
    raiseCollectionChanged: function(changes) {
        /// <summary =
locid=3D"M:J#Sys.Observer.raiseCollectionChanged">Raises the =
collectionChanged event.</summary>
        /// <param name=3D"changes" type=3D"Array" =
elementType=3D"Sys.CollectionChange">A list of changes that were =
performed on the collection since the last event.</param>
        Sys.Observer.raiseEvent(this, "collectionChanged", new =
Sys.NotifyCollectionChangedEventArgs(changes));
    }
}
$type._getContext =3D function Observer$_getContext(obj, create) {
    var ctx =3D obj._observerContext;
    if (ctx) return ctx();
    if (create) {
        return (obj._observerContext =3D this._createContext())();
    }
    return null;
}
$type._createContext =3D function Observer$_createContext() {
    var ctx =3D {
        events: new Sys.EventHandlerList()
    };
    return function() {
        return ctx;
    }
}


function outOfRange(value, low, high) {
    return (value < low) || (value > high);
}

function expandYear(dtf, year) {
    var now =3D new Date(),
        era =3D getEra(now);
    if (year < 100) {
        var curr =3D getEraYear(now, dtf, era);
        year +=3D curr - (curr % 100);
        if (year > dtf.Calendar.TwoDigitYearMax) {
            year -=3D 100;
        }
    }
    return year;
}

function getEra(date, eras) {
    if (!eras) return 0;
    var start, ticks =3D date.getTime();
    for (var i =3D 0, l =3D eras.length; i < l; i +=3D 4) {
        start =3D eras[i+2];
        if ((start =3D=3D=3D null) || (ticks >=3D start)) {
            return i;
        }
    }
    return 0;
}

function getEraYear(date, dtf, era, sortable) {
    var year =3D date.getFullYear();
    if (!sortable && dtf.eras) {
        year -=3D dtf.eras[era + 3];
    }   =20
    return year;
}

Sys._appendPreOrPostMatch =3D function _appendPreOrPostMatch(preMatch, =
strings) {
    var quoteCount =3D 0;
    var escaped =3D false;
    for (var i =3D 0, il =3D preMatch.length; i < il; i++) {
        var c =3D preMatch.charAt(i);
        switch (c) {
        case '\'':
            if (escaped) strings.push("'");
            else quoteCount++;
            escaped =3D false;
            break;
        case '\\':
            if (escaped) strings.push("\\");
            escaped =3D !escaped;
            break;
        default:
            strings.push(c);
            escaped =3D false;
            break;
        }
    }
    return quoteCount;
}

$type =3D Date;
$type._expandFormat =3D function Date$_expandFormat(dtf, format) {
    format =3D format || "F";
    var len =3D format.length;
    if (len =3D=3D=3D 1) {
        switch (format) {
        case "d":
            return dtf["ShortDatePattern"];
        case "D":
            return dtf["LongDatePattern"];
        case "t":
            return dtf["ShortTimePattern"];
        case "T":
            return dtf["LongTimePattern"];
        case "f":
            return dtf["LongDatePattern"] + " " + =
dtf["ShortTimePattern"];
        case "F":
            return dtf["FullDateTimePattern"];
        case "M": case "m":
            return dtf["MonthDayPattern"];
        case "s":
            return dtf["SortableDateTimePattern"];
        case "Y": case "y":
            return dtf["YearMonthPattern"];
        default:
            throw Error.format(Sys.Res.formatInvalidString);
        }
    }
    else if ((len =3D=3D=3D 2) && (format.charAt(0) =3D=3D=3D "%")) {
        format =3D format.charAt(1);
    }
    return format;
}

$type._getParseRegExp =3D function Date$_getParseRegExp(dtf, format) {
    var re =3D dtf._parseRegExp;
    if (!re) {
        dtf._parseRegExp =3D re =3D {};
    }
    else {
        var reFormat =3D re[format];
        if (reFormat) {
            return reFormat;
        }
    }

    var expFormat =3D Date._expandFormat(dtf, format);
    expFormat =3D expFormat.replace(/([\^\$\.\*\+\?\|\[\]\(\)\{\}])/g, =
"\\\\$1");

    var regexp =3D ["^"];
    var groups =3D [];
    var index =3D 0;
    var quoteCount =3D 0;
    var tokenRegExp =3D Date._getTokenRegExp();
    var match;

    while ((match =3D tokenRegExp.exec(expFormat)) !=3D=3D null) {
        var preMatch =3D expFormat.slice(index, match.index);
        index =3D tokenRegExp.lastIndex;

        quoteCount +=3D Sys._appendPreOrPostMatch(preMatch, regexp);
        if (quoteCount % 2) {
            regexp.push(match[0]);
            continue;
        }

        var m =3D match[0],
            len =3D m.length,
            add;
        switch (m) {
            case 'dddd': case 'ddd':
            case 'MMMM': case 'MMM':
            case 'gg': case 'g':
                add =3D "(\\D+)";
                break;
            case 'tt': case 't':
                add =3D "(\\D*)";
                break;
            case 'yyyy':
            case 'fff':
            case 'ff':
            case 'f':
                add =3D "(\\d{" + len + "})";
                break;
            case 'dd': case 'd':
            case 'MM': case 'M':
            case 'yy': case 'y':
            case 'HH': case 'H':
            case 'hh': case 'h':
            case 'mm': case 'm':
            case 'ss': case 's':
                add =3D "(\\d\\d?)";
                break;
            case 'zzz':
                add =3D "([+-]?\\d\\d?:\\d{2})";
                break;
            case 'zz': case 'z':
                add =3D "([+-]?\\d\\d?)";
                break;
            case '/':
                add =3D "(\\" + dtf.DateSeparator + ")";
                break;
        }
        if (add) {
            regexp.push(add);
        }
        groups.push(match[0]);
    }
    Sys._appendPreOrPostMatch(expFormat.slice(index), regexp);
    regexp.push("$");
    var regexpStr =3D regexp.join('').replace(/\s+/g, "\\s+");
    var parseRegExp =3D {'regExp': regexpStr, 'groups': groups};
    re[format] =3D parseRegExp;
    return parseRegExp;
}

$type._getTokenRegExp =3D function Date$_getTokenRegExp() {
    return =
/\/|dddd|ddd|dd|d|MMMM|MMM|MM|M|yyyy|yy|y|hh|h|HH|H|mm|m|ss|s|tt|t|fff|ff=
|f|zzz|zz|z|gg|g/g;
}

$type.parseLocale =3D function Date$parseLocale(value, formats) {
    /// <summary locid=3D"M:J#Date.parseLocale">Creates a date from a =
locale-specific string representation.</summary>
    /// <param name=3D"value" type=3D"String">A locale-specific string =
that can parse to a date.</param>
    /// <param name=3D"formats" parameterArray=3D"true" =
optional=3D"true" mayBeNull=3D"true">Custom formats to match.</param>
    /// <returns type=3D"Date"></returns>
    var e =3D Function._validateParams(arguments, [
        {name: "value", type: String},
        {name: "formats", mayBeNull: true, optional: true, =
parameterArray: true}
    ]);
    if (e) throw e;
    return Date._parse(value, Sys.CultureInfo.CurrentCulture, =
arguments);
}

$type.parseInvariant =3D function Date$parseInvariant(value, formats) {
    /// <summary locid=3D"M:J#Date.parseInvariant">Creates a date from =
its string representation.</summary>
    /// <param name=3D"value" type=3D"String">A string that can parse to =
a date.</param>
    /// <param name=3D"formats" parameterArray=3D"true" =
optional=3D"true" mayBeNull=3D"true">Custom formats to match.</param>
    /// <returns type=3D"Date"></returns>
    var e =3D Function._validateParams(arguments, [
        {name: "value", type: String},
        {name: "formats", mayBeNull: true, optional: true, =
parameterArray: true}
    ]);
    if (e) throw e;
    return Date._parse(value, Sys.CultureInfo.InvariantCulture, =
arguments);
}

$type._parse =3D function Date$_parse(value, cultureInfo, args) {
    var i, l, date, format, formats, custom =3D false;
    for (i =3D 1, l =3D args.length; i < l; i++) {
        format =3D args[i];
        if (format) {
            custom =3D true;
            date =3D Date._parseExact(value, format, cultureInfo);
            if (date) return date;
        }
    }
    if (! custom) {
        formats =3D cultureInfo._getDateTimeFormats();
        for (i =3D 0, l =3D formats.length; i < l; i++) {
            date =3D Date._parseExact(value, formats[i], cultureInfo);
            if (date) return date;
        }
    }
    return null;
}

$type._parseExact =3D function Date$_parseExact(value, format, =
cultureInfo) {
    value =3D value.trim();
    var dtf =3D cultureInfo.dateTimeFormat,
        parseInfo =3D this._getParseRegExp(dtf, format),
        match =3D new RegExp(parseInfo.regExp).exec(value);
    if (match =3D=3D=3D null) return null;
   =20
    var groups =3D parseInfo.groups,
        era =3D null, year =3D null, month =3D null, date =3D null, =
weekDay =3D null,
        hour =3D 0, hourOffset, min =3D 0, sec =3D 0, msec =3D 0, =
tzMinOffset =3D null,
        pmHour =3D false;
   =20
    for (var j =3D 0, jl =3D groups.length; j < jl; j++) {
        var matchGroup =3D match[j+1];
        if (matchGroup) {
            var current =3D groups[j],
                clength =3D current.length,
                matchInt =3D parseInt(matchGroup, 10);
            switch (current) {
                case 'dd': case 'd':
                    date =3D matchInt;
                    if (outOfRange(date, 1, 31)) return null;
                    break;
                case 'MMM':
                case 'MMMM':
                    month =3D cultureInfo._getMonthIndex(matchGroup, =
clength =3D=3D=3D 3);
                    if (outOfRange(month, 0, 11)) return null;
                    break;
                case 'M': case 'MM':
                    month =3D matchInt - 1;
                    if (outOfRange(month, 0, 11)) return null;
                    break;
                case 'y': case 'yy':
                case 'yyyy':
                    year =3D clength < 4 ? expandYear(dtf,matchInt) : =
matchInt;
                    if (outOfRange(year, 0, 9999)) return null;
                    break;
                case 'h': case 'hh':
                    hour =3D matchInt;
                    if (hour =3D=3D=3D 12) hour =3D 0;
                    if (outOfRange(hour, 0, 11)) return null;
                    break;
                case 'H': case 'HH':
                    hour =3D matchInt;
                    if (outOfRange(hour, 0, 23)) return null;
                    break;
                case 'm': case 'mm':
                    min =3D matchInt;
                    if (outOfRange(min, 0, 59)) return null;
                    break;
                case 's': case 'ss':
                    sec =3D matchInt;
                    if (outOfRange(sec, 0, 59)) return null;
                    break;
                case 'tt': case 't':
                    var upperToken =3D matchGroup.toUpperCase();
                    pmHour =3D (upperToken =3D=3D=3D =
dtf.PMDesignator.toUpperCase());
                    if (!pmHour && (upperToken !=3D=3D =
dtf.AMDesignator.toUpperCase())) return null;
                    break;
                case 'f':
                case 'ff':
                case 'fff':
                    msec =3D matchInt * Math.pow(10, 3-clength);
                    if (outOfRange(msec, 0, 999)) return null;
                    break;
                case 'ddd':
                case 'dddd':
                    weekDay =3D cultureInfo._getDayIndex(matchGroup, =
clength =3D=3D=3D 3);
                    if (outOfRange(weekDay, 0, 6)) return null;
                    break;
                case 'zzz':
                    var offsets =3D matchGroup.split(/:/);
                    if (offsets.length !=3D=3D 2) return null;
                    hourOffset =3D parseInt(offsets[0], 10);
                    if (outOfRange(hourOffset, -12, 13)) return null;
                    var minOffset =3D parseInt(offsets[1], 10);
                    if (outOfRange(minOffset, 0, 59)) return null;
                    tzMinOffset =3D (hourOffset * 60) + =
(matchGroup.startsWith('-')? -minOffset : minOffset);
                    break;
                case 'z': case 'zz':
                    hourOffset =3D matchInt;
                    if (outOfRange(hourOffset, -12, 13)) return null;
                    tzMinOffset =3D hourOffset * 60;
                    break;
                case 'g': case 'gg':
                    var eraName =3D matchGroup;
                    if (!eraName || !dtf.eras) return null;
                    eraName =3D eraName.toLowerCase().trim();
                    for (var i =3D 0, l =3D dtf.eras.length; i < l; i =
+=3D 4) {
                        if (eraName =3D=3D=3D dtf.eras[i + =
1].toLowerCase()) {
                            era =3D i;
                            break;
                        }
                    }
                    if (era =3D=3D=3D null) return null;
                    break;
            }
        }
    }
    var result =3D new Date(), defaultYear, convert =3D =
dtf.Calendar.convert;
    defaultYear =3D convert ? convert.fromGregorian(result)[0] : =
result.getFullYear();
    if (year =3D=3D=3D null) {
        year =3D defaultYear;
    }
    else if (dtf.eras) {
        year +=3D dtf.eras[(era || 0) + 3];
    }
    if (month =3D=3D=3D null) {
        month =3D 0;
    }
    if (date =3D=3D=3D null) {
        date =3D 1;
    }
    if (convert) {
        result =3D convert.toGregorian(year, month, date);
        if (result =3D=3D=3D null) return null;
    }
    else {
        result.setFullYear(year, month, date);
        if (result.getDate() !=3D=3D date) return null;
        if ((weekDay !=3D=3D null) && (result.getDay() !=3D=3D weekDay)) =
{
            return null;
        }
    }
    if (pmHour && (hour < 12)) {
        hour +=3D 12;
    }
    result.setHours(hour, min, sec, msec);
    if (tzMinOffset !=3D=3D null) {
        var adjustedMin =3D result.getMinutes() - (tzMinOffset + =
result.getTimezoneOffset());
        result.setHours(result.getHours() + parseInt(adjustedMin/60, =
10), adjustedMin%60);
    }
    return result;
}

$prototype =3D $type.prototype;
$prototype.format =3D function Date$format(format) {
    /// <summary locid=3D"M:J#Date.format">Format a date using the =
invariant culture.</summary>
    /// <param name=3D"format" type=3D"String">Format string.</param>
    /// <returns type=3D"String">Formatted date.</returns>
    var e =3D Function._validateParams(arguments, [
        {name: "format", type: String}
    ]);
    if (e) throw e;
    return this._toFormattedString(format, =
Sys.CultureInfo.InvariantCulture);
}

$prototype.localeFormat =3D function Date$localeFormat(format) {
    /// <summary locid=3D"M:J#Date.localeFormat">Format a date using the =
current culture.</summary>
    /// <param name=3D"format" type=3D"String">Format string.</param>
    /// <returns type=3D"String">Formatted date.</returns>
    var e =3D Function._validateParams(arguments, [
        {name: "format", type: String}
    ]);
    if (e) throw e;
    return this._toFormattedString(format, =
Sys.CultureInfo.CurrentCulture);
}

$prototype._toFormattedString =3D function =
Date$_toFormattedString(format, cultureInfo) {
    var dtf =3D cultureInfo.dateTimeFormat,
        convert =3D dtf.Calendar.convert;
    if (!format || !format.length || (format =3D=3D=3D 'i')) {
        var ret;
        if (cultureInfo && cultureInfo.name.length) {
            if (convert) {
                ret =3D this._toFormattedString(dtf.FullDateTimePattern, =
cultureInfo);
            }
            else {
                var eraDate =3D new Date(this.getTime());
                var era =3D getEra(this, dtf.eras);
                eraDate.setFullYear(getEraYear(this, dtf, era));
                ret =3D eraDate.toLocaleString();
            }
        }
        else {
            ret =3D this.toString();
        }
        return ret;
    }

    var eras =3D dtf.eras,
        sortable =3D (format =3D=3D=3D "s");
    format =3D Date._expandFormat(dtf, format);

    ret =3D [];
    var hour;

    var zeros =3D ['0','00','000'];
    function padZeros(num, c) {
        var s =3D num+'';
        return ((c > 1) && (s.length < c)) ? (zeros[c-2]+s).substr(-c) : =
s;
    }

    var foundDay, checkedDay, dayPartRegExp =3D =
/([^d]|^)(d|dd)([^d]|$)/g;
    function hasDay() {
        if (foundDay || checkedDay) {
            return foundDay;
        }
        foundDay =3D dayPartRegExp.test(format);
        checkedDay =3D true;
        return foundDay;
    }
   =20
    var quoteCount =3D 0,
        tokenRegExp =3D Date._getTokenRegExp(),
        converted;
    if (!sortable && convert) {
        converted =3D convert.fromGregorian(this);
    }
    for (;;) {

        var index =3D tokenRegExp.lastIndex;

        var ar =3D tokenRegExp.exec(format);

        var preMatch =3D format.slice(index, ar ? ar.index : =
format.length);
        quoteCount +=3D Sys._appendPreOrPostMatch(preMatch, ret);

        if (!ar) break;

        if (quoteCount % 2) {
            ret.push(ar[0]);
            continue;
        }
       =20
        function getPart(date, part) {
            if (converted) {
                return converted[part];
            }
            switch (part) {
                case 0: return date.getFullYear();
                case 1: return date.getMonth();
                case 2: return date.getDate();
            }
        }

        var current =3D ar[0],
            clength =3D current.length;

        switch (current) {
        case "ddd":
        case "dddd":
            names =3D (clength =3D=3D=3D 3) ? dtf.AbbreviatedDayNames : =
dtf.DayNames;
            ret.push(names[this.getDay()]);
            break;
        case "d":
        case "dd":
            foundDay =3D true;
            ret.push(padZeros(getPart(this, 2), clength));
            break;
        case "MMM":
        case "MMMM":
            var namePrefix =3D (clength =3D=3D=3D 3 ? "Abbreviated" : =
""),
                genitiveNames =3D dtf[namePrefix + =
"MonthGenitiveNames"],
                names =3D dtf[namePrefix + "MonthNames"],
                part =3D getPart(this, 1);
            ret.push((genitiveNames && hasDay())
                ? genitiveNames[part]
                : names[part]);
            break;
        case "M":
        case "MM":
            ret.push(padZeros(getPart(this, 1) + 1, clength));
            break;
        case "y":
        case "yy":
        case "yyyy":
            part =3D converted ? converted[0] : getEraYear(this, dtf, =
getEra(this, eras), sortable);
            if (clength < 4) {
                part =3D part % 100;
            }
            ret.push(padZeros(part, clength));
            break;
        case "h":
        case "hh":
            hour =3D this.getHours() % 12;
            if (hour =3D=3D=3D 0) hour =3D 12;
            ret.push(padZeros(hour, clength));
            break;
        case "H":
        case "HH":
            ret.push(padZeros(this.getHours(), clength));
            break;
        case "m":
        case "mm":
            ret.push(padZeros(this.getMinutes(), clength));
            break;
        case "s":
        case "ss":
            ret.push(padZeros(this.getSeconds(), clength));
            break;
        case "t":
        case "tt":
            part =3D (this.getHours() < 12) ? dtf.AMDesignator : =
dtf.PMDesignator;
            ret.push(clength =3D=3D=3D 1 ? part.charAt(0) : part);
            break;
        case "f":
        case "ff":
        case "fff":
            ret.push(padZeros(this.getMilliseconds(), 3).substr(0, =
clength));
            break;
        case "z":=20
        case "zz":
            hour =3D this.getTimezoneOffset() / 60;
            ret.push(((hour <=3D 0) ? '+' : '-') + =
padZeros(Math.floor(Math.abs(hour)), clength));
            break;
        case "zzz":
            hour =3D this.getTimezoneOffset() / 60;
            ret.push(((hour <=3D 0) ? '+' : '-') + =
padZeros(Math.floor(Math.abs(hour)), 2) +
                ":" + padZeros(Math.abs(this.getTimezoneOffset() % 60), =
2));
            break;
        case "g":
        case "gg":
            if (dtf.eras) {
                ret.push(dtf.eras[getEra(this, eras) + 1]);
            }
            break;
        case "/":
            ret.push(dtf.DateSeparator);
            break;
        }
    }
    return ret.join('');
}
String.localeFormat =3D function String$localeFormat(format, args) {
    /// <summary locid=3D"M:J#String.localeFormat">Replaces the format =
items in a specified String with the text equivalents of the values of   =
corresponding object instances. The current culture will be used to =
format dates and numbers.</summary>
    /// <param name=3D"format" type=3D"String">A format string.</param>
    /// <param name=3D"args" parameterArray=3D"true" =
mayBeNull=3D"true">The objects to format.</param>
    /// <returns type=3D"String">A copy of format in which the format =
items have been replaced by the   string equivalent of the corresponding =
instances of object arguments.</returns>
    var e =3D Function._validateParams(arguments, [
        {name: "format", type: String},
        {name: "args", mayBeNull: true, parameterArray: true}
    ]);
    if (e) throw e;
    return String._toFormattedString(true, arguments);
}
var formattingPatterns =3D {
    P: ["Percent", ["-n %", "-n%", "-%n"], ["n %", "n%", "%n" ], 100],
    N: ["Number",["(n)","-n","- n","n-","n -"], null, 1],
    C: =
["Currency",["($n)","-$n","$-n","$n-","(n$)","-n$","n-$","n$-","-n =
$","-$ n","n $-","$ n-","$ -n","n- $","($ n)","(n $)"],["$n","n$","$ =
n","n $"], 1]
};

Sys._toFormattedString =3D function _toFormattedString(format, =
cultureInfo) {
    if (!format || !format.length || (format =3D=3D=3D 'i')) {
        return (cultureInfo && cultureInfo.name.length) ?
            this.toLocaleString() :
            this.toString();
    }
   =20
    function zeroPad(str, count, left) {
        for (var l=3Dstr.length; l < count; l++) {
            str =3D (left ? ('0' + str) : (str + '0'));
        }
        return str;
    }
   =20
    function expandNumber(number, precision, groupSizes, sep, =
decimalChar) {
        var curSize =3D groupSizes[0];
        var curGroupIndex =3D 1;



        var factor =3D Math.pow(10, precision);
        var rounded =3D (Math.round(number * factor) / factor);
        if (!isFinite(rounded)) {
            rounded =3D number;
        }
        number =3D rounded;
       =20
        var numberString =3D number+'';
        var right =3D "";
        var exponent;
       =20
       =20
        var split =3D numberString.split(/e/i);
        numberString =3D split[0];
        exponent =3D (split.length > 1 ? parseInt(split[1]) : 0);
        split =3D numberString.split('.');
        numberString =3D split[0];
        right =3D split.length > 1 ? split[1] : "";
       =20
        var l;
        if (exponent > 0) {
            right =3D zeroPad(right, exponent, false);
            numberString +=3D right.slice(0, exponent);
            right =3D right.substr(exponent);
        }
        else if (exponent < 0) {
            exponent =3D -exponent;
            numberString =3D zeroPad(numberString, exponent+1, true);
            right =3D numberString.slice(-exponent, numberString.length) =
+ right;
            numberString =3D numberString.slice(0, -exponent);
        }

        if (precision > 0) {
            right =3D decimalChar +
                ((right.length > precision) ? right.slice(0, precision) =
: zeroPad(right, precision, false));
        }
        else {
            right =3D "";
        }

        var stringIndex =3D numberString.length-1;
        var ret =3D "";
        while (stringIndex >=3D 0) {
            if (curSize =3D=3D=3D 0 || curSize > stringIndex) {
                return numberString.slice(0, stringIndex + 1) +
                    (ret.length ? (sep + ret + right) : right);
            }

            ret =3D numberString.slice(stringIndex - curSize + 1, =
stringIndex + 1) +
                (ret.length ? (sep+ret) : "");

            stringIndex -=3D curSize;

            if (curGroupIndex < groupSizes.length) {
                curSize =3D groupSizes[curGroupIndex];
                curGroupIndex++;
            }
        }
        return numberString.slice(0, stringIndex + 1) + sep + ret + =
right;
    }
    var nf =3D cultureInfo.numberFormat;

    var number =3D Math.abs(this);

    format =3D format || "D";

    var precision =3D -1;
    if (format.length > 1) precision =3D parseInt(format.slice(1), 10);

    var pattern,
        current =3D format.charAt(0).toUpperCase();   =20
    switch (current) {
    case "D":
        pattern =3D 'n';

        if (precision !=3D=3D -1) {
            number =3D zeroPad(""+number, precision, true);
        }

        if (this < 0) number =3D -number;
        break;
    case "C":
    case "N":
    case "P":
        current =3D formattingPatterns[current];
        var name =3D current[0];
        pattern =3D (this < 0) ? current[1][nf[name+"NegativePattern"]] =
: (current[2] ? current[2][nf[name+"PositivePattern"]] : "n");
        if (precision =3D=3D=3D -1) precision =3D =
nf[name+"DecimalDigits"];
        number =3D expandNumber(Math.abs(this)*current[3], precision, =
nf[name+"GroupSizes"], nf[name+"GroupSeparator"], =
nf[name+"DecimalSeparator"]);
        break;
    default:
        throw Error.format(Sys.Res.formatBadFormatSpecifier);
    }

    var regex =3D /n|\$|-|%/g;

    var ret =3D "";

    for (;;) {

        var index =3D regex.lastIndex;

        var ar =3D regex.exec(pattern);

        ret +=3D pattern.slice(index, ar ? ar.index : pattern.length);

        if (!ar)
            break;

        switch (ar[0]) {
        case "n":
            ret +=3D number;
            break;
        case "$":
            ret +=3D nf.CurrencySymbol;
            break;
        case "-":
            if (/[1-9]/.test(number)) {
                ret +=3D nf.NegativeSign;
            }
            break;
        case "%":
            ret +=3D nf.PercentSymbol;
            break;
        }
    }

    return ret;
}

$type =3D Number;
$type.parseLocale =3D function Number$parseLocale(value) {
    /// <summary locid=3D"M:J#Number.parseLocale">Creates a number from =
its locale string representation.</summary>
    /// <param name=3D"value" type=3D"String">A string that can parse to =
a number.</param>
    /// <returns type=3D"Number"></returns>
    var e =3D Function._validateParams(arguments, [
        {name: "value", type: String}
    ], false);
    if (e) throw e;
    return Number._parse(value, Sys.CultureInfo.CurrentCulture);
}
$type.parseInvariant =3D function Number$parseInvariant(value) {
    /// <summary locid=3D"M:J#Number.parseInvariant">Creates a number =
from its string representation.</summary>
    /// <param name=3D"value" type=3D"String">A string that can parse to =
a number.</param>
    /// <returns type=3D"Number"></returns>
    var e =3D Function._validateParams(arguments, [
        {name: "value", type: String}
    ], false);
    if (e) throw e;
    return Number._parse(value, Sys.CultureInfo.InvariantCulture);
}
$type._parse =3D function Number$_parse(value, cultureInfo) {
    value =3D value.trim();
   =20
    if (value.match(/^[+-]?infinity$/i)) {
        return parseFloat(value);
    }
    if (value.match(/^0x[a-f0-9]+$/i)) {
        return parseInt(value);
    }

    var numFormat =3D cultureInfo.numberFormat;
    var signInfo =3D Number._parseNumberNegativePattern(value, =
numFormat, numFormat.NumberNegativePattern);
    var sign =3D signInfo[0];
    var num =3D signInfo[1];
   =20
    if ((sign =3D=3D=3D '') && (numFormat.NumberNegativePattern !=3D=3D =
1)) {
        signInfo =3D Number._parseNumberNegativePattern(value, =
numFormat, 1);
        sign =3D signInfo[0];
        num =3D signInfo[1];
    }
    if (sign =3D=3D=3D '') sign =3D '+';
   =20
    var exponent;
    var intAndFraction;
    var exponentPos =3D num.indexOf('e');
    if (exponentPos < 0) exponentPos =3D num.indexOf('E');
    if (exponentPos < 0) {
        intAndFraction =3D num;
        exponent =3D null;
    }
    else {
        intAndFraction =3D num.substr(0, exponentPos);
        exponent =3D num.substr(exponentPos + 1);
    }
   =20
    var integer;
    var fraction;
    var decSep =3D numFormat.NumberDecimalSeparator
    var decimalPos =3D intAndFraction.indexOf(decSep);
    if (decimalPos < 0) {
        integer =3D intAndFraction;
        fraction =3D null;
    }
    else {
        integer =3D intAndFraction.substr(0, decimalPos);
        fraction =3D intAndFraction.substr(decimalPos + decSep.length);
    }
   =20
    var numGroupSep =3D numFormat.NumberGroupSeparator
    integer =3D integer.split(numGroupSep).join('');
    var altNumGroupSeparator =3D numGroupSep.replace(/\u00A0/g, " ");
    if (numGroupSep !=3D=3D altNumGroupSeparator) {
        integer =3D integer.split(altNumGroupSeparator).join('');
    }
   =20
    var p =3D sign + integer;
    if (fraction !=3D=3D null) {
        p +=3D '.' + fraction;
    }
    if (exponent !=3D=3D null) {
        var expSignInfo =3D Number._parseNumberNegativePattern(exponent, =
numFormat, 1);
        if (expSignInfo[0] =3D=3D=3D '') {
            expSignInfo[0] =3D '+';
        }
        p +=3D 'e' + expSignInfo[0] + expSignInfo[1];
    }

    if (p.match(/^[+-]?\d*\.?\d*(e[+-]?\d+)?$/)) {
        return parseFloat(p);
    }
    return Number.NaN;
}
$type._parseNumberNegativePattern =3D function =
Number$_parseNumberNegativePattern(value, numFormat, =
numberNegativePattern) {
    var neg =3D numFormat.NegativeSign;
    var pos =3D numFormat.PositiveSign;   =20
    switch (numberNegativePattern) {
        case 4:
            neg =3D ' ' + neg;
            pos =3D ' ' + pos;
        case 3:
            if (value.endsWith(neg)) {
                return ['-', value.substr(0, value.length - =
neg.length)];
            }
            else if (value.endsWith(pos)) {
                return ['+', value.substr(0, value.length - =
pos.length)];
            }
            break;
        case 2:
            neg +=3D ' ';
            pos +=3D ' ';
        case 1:
            if (value.startsWith(neg)) {
                return ['-', value.substr(neg.length)];
            }
            else if (value.startsWith(pos)) {
                return ['+', value.substr(pos.length)];
            }
            break;
        case 0:
            if (value.startsWith('(') && value.endsWith(')')) {
                return ['-', value.substr(1, value.length - 2)];
            }
            break;
    }
    return ['', value];
}

$prototype =3D $type.prototype;
$prototype.format =3D function Number$format(format) {
    /// <summary locid=3D"M:J#Number.format">Format a number using the =
invariant culture.</summary>
    /// <param name=3D"format" type=3D"String">Format string.</param>
    /// <returns type=3D"String">Formatted number.</returns>
    var e =3D Function._validateParams(arguments, [
        {name: "format", type: String}
    ]);
    if (e) throw e;
    return Sys._toFormattedString.call(this, format, =
Sys.CultureInfo.InvariantCulture);
}
$prototype.localeFormat =3D function Number$localeFormat(format) {
    /// <summary locid=3D"M:J#Number.localeFormat">Format a number using =
the current culture.</summary>
    /// <param name=3D"format" type=3D"String">Format string.</param>
    /// <returns type=3D"String">Formatted number.</returns>
    var e =3D Function._validateParams(arguments, [
        {name: "format", type: String}
    ]);
    if (e) throw e;
    return Sys._toFormattedString.call(this, format, =
Sys.CultureInfo.CurrentCulture);
}
function toUpper(value) {
    return value.split("\u00A0").join(' ').toUpperCase();
}
function toUpperArray(arr) {
    var result =3D [];
    foreach(arr, function(value, i) {
        result[i] =3D toUpper(value);
    });
    return result;
}

function clone(obj) {
    var objNew =3D {};
    forIn(obj, function(value, field) {
        objNew[field] =3D (value instanceof Array) ? (value.length =
=3D=3D=3D 1 ? [value] : Array.apply(null, value)) :
            ((typeof(value) =3D=3D=3D "object") ? clone(value) : value);
    });
    return objNew;
}

$type =3D Sys.CultureInfo =3D function CultureInfo(name, numberFormat, =
dateTimeFormat) {
    /// <summary locid=3D"M:J#Sys.CultureInfo.#ctor"></summary>
    /// <param name=3D"name" type=3D"String">CultureInfo name.</param>
    /// <param name=3D"numberFormat" type=3D"Object">CultureInfo number =
format information.</param>
    /// <param name=3D"dateTimeFormat" type=3D"Object">CultureInfo date =
time format information.</param>
    var e =3D Function._validateParams(arguments, [
        {name: "name", type: String},
        {name: "numberFormat", type: Object},
        {name: "dateTimeFormat", type: Object}
    ]);
    if (e) throw e;
    this.name =3D name;
    this.numberFormat =3D numberFormat;
    this.dateTimeFormat =3D dateTimeFormat;
}
$type.prototype =3D {
    _getDateTimeFormats: function CultureInfo$_getDateTimeFormats() {
        var formats =3D this._dateTimeFormats;
        if (!formats) {
            var dtf =3D this.dateTimeFormat;
            this._dateTimeFormats =3D formats =3D
              [ dtf["MonthDayPattern"],
                dtf["YearMonthPattern"],
                dtf["ShortDatePattern"],
                dtf["ShortTimePattern"],
                dtf["LongDatePattern"],
                dtf["LongTimePattern"],
                dtf["FullDateTimePattern"],
                dtf["RFC1123Pattern"],
                dtf["SortableDateTimePattern"],
                dtf["UniversalSortableDateTimePattern"] ];
        }
        return formats;
    },
    _getMonthIndex: function CultureInfo$_getMonthIndex(value, abbr) {
        var name =3D abbr ? "_upperAbbrMonths" : "_upperMonths",
            genitiveName =3D name + "Genitive",
            upperMonths =3D this[name];
        if (!upperMonths) {
            var prefix =3D (abbr ? "Abbreviated" : "");
            this[name] =3D =
toUpperArray(this.dateTimeFormat[prefix+"MonthNames"]);
            this[genitiveName] =3D =
toUpperArray(this.dateTimeFormat[prefix+"MonthGenitiveNames"]);
        }
        value =3D toUpper(value);
        var i =3D indexOf(this[name], value);
        if (i < 0) {
            i =3D indexOf(this[genitiveName], value);
        }
        return i;
    },   =20
    _getDayIndex: function CultureInfo$_getDayIndex(value, abbr) {
        var name =3D abbr ? "_upperAbbrDays" : "_upperDays",
            upperDays =3D this[name];
        if (!upperDays) {
            this[name] =3D toUpperArray(this.dateTimeFormat[(abbr ? =
"Abbreviated" : "")+"DayNames"]);
        }
        return indexOf(this[name], toUpper(value));
    }
}
$type.registerClass('Sys.CultureInfo');

$type._parse =3D function(value) {
    var dtf =3D value.dateTimeFormat;
    if (dtf && !dtf.eras) {
        dtf.eras =3D value.eras;
    }
    return new Sys.CultureInfo(value.name, value.numberFormat, dtf);
}
$type._setup =3D function() {
    var cultureInfo =3D window.__cultureInfo,
        monthNames =3D =
["January","February","March","April","May","June","July","August","Septe=
mber","October","November","December",""],
        shortMonthNames =3D =
["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec",=
""],
        invariant =3D =
{"name":"","numberFormat":{"CurrencyDecimalDigits":2,"CurrencyDecimalSepa=
rator":".","CurrencyGroupSizes":[3],"NumberGroupSizes":[3],"PercentGroupS=
izes":[3],"CurrencyGroupSeparator":",","CurrencySymbol":"\u00A4","NaNSymb=
ol":"NaN","CurrencyNegativePattern":0,"NumberNegativePattern":1,"PercentP=
ositivePattern":0,"PercentNegativePattern":0,"NegativeInfinitySymbol":"-I=
nfinity","NegativeSign":"-","NumberDecimalDigits":2,"NumberDecimalSeparat=
or":".","NumberGroupSeparator":",","CurrencyPositivePattern":0,"PositiveI=
nfinitySymbol":"Infinity","PositiveSign":"+","PercentDecimalDigits":2,"Pe=
rcentDecimalSeparator":".","PercentGroupSeparator":",","PercentSymbol":"%=
","PerMilleSymbol":"\u2030","NativeDigits":["0","1","2","3","4","5","6","=
7","8","9"],"DigitSubstitution":1},"dateTimeFormat":{"AMDesignator":"AM",=
"Calendar":{"MinSupportedDateTime":"@-62135568000000@","MaxSupportedDateT=
ime":"@253402300799999@","AlgorithmType":1,"CalendarType":1,"Eras":[1],"T=
woDigitYearMax":2029},"DateSeparator":"/","FirstDayOfWeek":0,"CalendarWee=
kRule":0,"FullDateTimePattern":"dddd, dd MMMM yyyy =
HH:mm:ss","LongDatePattern":"dddd, dd MMMM =
yyyy","LongTimePattern":"HH:mm:ss","MonthDayPattern":"MMMM =
dd","PMDesignator":"PM","RFC1123Pattern":"ddd, dd MMM yyyy =
HH\':\'mm\':\'ss =
\'GMT\'","ShortDatePattern":"MM/dd/yyyy","ShortTimePattern":"HH:mm","Sort=
ableDateTimePattern":"yyyy\'-\'MM\'-\'dd\'T\'HH\':\'mm\':\'ss","TimeSepar=
ator":":","UniversalSortableDateTimePattern":"yyyy\'-\'MM\'-\'dd =
HH\':\'mm\':\'ss\'Z\'","YearMonthPattern":"yyyy =
MMMM","AbbreviatedDayNames":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"=
ShortestDayNames":["Su","Mo","Tu","We","Th","Fr","Sa"],"DayNames":["Sunda=
y","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"Abbrev=
iatedMonthNames":shortMonthNames,"MonthNames":monthNames,"NativeCalendarN=
ame":"Gregorian =
Calendar","AbbreviatedMonthGenitiveNames":Array.clone(shortMonthNames),"M=
onthGenitiveNames":Array.clone(monthNames)},"eras":[1,"A.D.",null,0]};
    this.InvariantCulture =3D this._parse(invariant);
    switch(typeof(cultureInfo)) {
        case "string":
            cultureInfo =3D window.eval("(" + cultureInfo + ")");
        case "object":
            this.CurrentCulture =3D this._parse(cultureInfo);
            delete __cultureInfo;   =20
            break;
        default:
            cultureInfo =3D clone(invariant);
            cultureInfo.name =3D "en-US";
            cultureInfo.numberFormat.CurrencySymbol =3D "$";
            var dtf =3D cultureInfo.dateTimeFormat;
            dtf.FullDatePattern =3D "dddd, MMMM dd, yyyy h:mm:ss tt";
            dtf.LongDatePattern =3D "dddd, MMMM dd, yyyy";
            dtf.LongTimePattern =3D "h:mm:ss tt";
            dtf.ShortDatePattern =3D "M/d/yyyy";
            dtf.ShortTimePattern =3D "h:mm tt";
            dtf.YearMonthPattern =3D "MMMM, yyyy";
            this.CurrentCulture =3D this._parse(cultureInfo);
            break;
    }
}

$type._setup();





Type.registerNamespace('Sys.Serialization');

$type =3D Sys.Serialization.JavaScriptSerializer =3D function =
Serialization$JavaScriptSerializer() {
    /// <summary =
locid=3D"M:J#Sys.Serialization.JavaScriptSerializer.#ctor">Provides =
serialization from JavaScript object to JavaScript object =
notation.</summary>
    if (arguments.length !=3D=3D 0) throw Error.parameterCount();
}
$type.registerClass('Sys.Serialization.JavaScriptSerializer');

$type._esc =3D {
    charsRegExs: { '"': /\"/g, '\\': /\\/g }, /*"*/
    chars: ['\\', '"'],
    dateRegEx: =
/(^|[^\\])\"\\\/Date\((-?[0-9]+)(?:[a-zA-Z]|(?:\+|-)[0-9]{4})?\)\\\/\"/g,=
 /* " */
    escapeChars: {'\\':'\\\\', '"':'\\"', "\b":"\\b", "\t":"\\t", =
"\n":"\\n", "\f":"\\f", "\r":"\\r"},
    escapeRegExG: /[\"\\\x00-\x1F]/g,
    escapeRegEx: /[\"\\\x00-\x1F]/i,
    jsonRegEx: /[^,:{}\[\]0-9.\-+Eaeflnr-u \n\r\t]/g,
    jsonStringRegEx: /\"(\\.|[^\"\\])*\"/g /*"*/
};
$type._init =3D function() {
    var esc =3D this._esc,
        toEsc =3D esc.chars,
        toEscRE =3D esc.charsRegExs,
        escChars =3D esc.escapeChars;
    for (var i =3D 0; i < 32; i++) {
        var c =3D String.fromCharCode(i);
        toEsc[i+2] =3D c;
        toEscRE[c] =3D new RegExp(c, 'g');
        escChars[c] =3D escChars[c] || ("\\u" + ("000" + =
i.toString(16)).slice(-4));
    }
    this._load =3D true;
}
$type._serializeNumberWithBuilder =3D function(object, stringBuilder) {
    if (!isFinite(object)) {
        throw =
Error.invalidOperation(Sys.Res.cannotSerializeNonFiniteNumbers);
    }
    stringBuilder.append(String(object));
}
$type._serializeStringWithBuilder =3D function(string, stringBuilder) {
    stringBuilder.append('"');
    var esc =3D this._esc;
    if (esc.escapeRegEx.test(string)) {
        if (!this._load) {
            this._init();
        }
        if (string.length < 128) {
            string =3D string.replace(esc.escapeRegExG,
                function(x) { return esc.escapeChars[x]; });
        }
        else {
            for (var i =3D 0; i < 34; i++) {
                var c =3D esc.chars[i];
                if (string.indexOf(c) !=3D=3D -1) {
                    var escChar =3D esc.escapeChars[c];
                    string =3D (isBrowser("Opera") || =
isBrowser("Firefox")) ?
                        string.split(c).join(escChar) :
                        string.replace(esc.charsRegExs[c], escChar);
                }
            }
       }
    }
    stringBuilder.append(string).append('"');
}
$type._serializeWithBuilder =3D function(object, stringBuilder, sort, =
prevObjects) {
    var i;
    switch (typeof object) {
    case 'object':
        if (object) {
            if (prevObjects){
                if (Sys._indexOf(prevObjects, object) !=3D=3D -1) {
                    throw =
Error.invalidOperation(Sys.Res.cannotSerializeObjectWithCycle);
                }
            }
            else {
                prevObjects =3D [];
            }
            try {
                prevObjects.push(object);
               =20
                if (Number.isInstanceOfType(object)) {
                    this._serializeNumberWithBuilder(object, =
stringBuilder);
                }
                else if (Boolean.isInstanceOfType(object)) {
                    stringBuilder.append(object);
                }
                else if (String.isInstanceOfType(object)) {
                    this._serializeStringWithBuilder(object, =
stringBuilder);
                }
           =20
                else if (object instanceof Array) {
                    stringBuilder.append('[');
                  =20
                    for (i =3D 0; i < object.length; ++i) {
                        if (i) {
                            stringBuilder.append(',');
                        }
                        this._serializeWithBuilder(object[i], =
stringBuilder, false, prevObjects);
                    }
                    stringBuilder.append(']');
                }
                else {
                    if (Date.isInstanceOfType(object)) {
                        stringBuilder.append('"\\/Date(').
                            append(object.getTime()).
                            append(')\\/"');
                        break;
                    }

                    var properties =3D [],
                        propertyCount =3D 0;
                    for (var name in object) {
                        if (name.charAt(0) !=3D=3D '$') {
                            if (name =3D=3D=3D '__type' && =
propertyCount) {
                                properties[propertyCount++] =3D =
properties[0];
                                properties[0] =3D name;
                            }
                            else {
                                properties[propertyCount++] =3D name;
                            }
                        }
                    }
                    if (sort) properties.sort();

                    stringBuilder.append('{');
                    =20
                    var needComma;
                    for (i=3D0; i < propertyCount; i++) {
                        var prop =3D properties[i], value =3D =
object[prop],
                            type =3D typeof(value);
                        if (type !=3D=3D 'undefined' && type !=3D=3D =
'function') {
                            if (needComma) {
                                stringBuilder.append(',');
                            }
                            this._serializeWithBuilder(prop, =
stringBuilder, sort, prevObjects);
                            stringBuilder.append(':');
                            this._serializeWithBuilder(value, =
stringBuilder, sort, prevObjects);
                            needComma =3D true;
                        }
                    }
                stringBuilder.append('}');
                }
            }
            finally {
                Array.removeAt(prevObjects, prevObjects.length - 1);
            }
        }
        else {
            stringBuilder.append('null');
        }
        break;

    case 'number':
        this._serializeNumberWithBuilder(object, stringBuilder);
        break;

    case 'string':
        this._serializeStringWithBuilder(object, stringBuilder);
        break;

    case 'boolean':
        stringBuilder.append(object);
        break;

    default:
        stringBuilder.append('null');
        break;
    }
}

$type.serialize =3D function JavaScriptSerializer$serialize(object) {
    /// <summary =
locid=3D"M:J#Sys.Serialization.JavaScriptSerializer.serialize">Generates =
a JSON string from an object.</summary>
    /// <param name=3D"object" mayBeNull=3D"true">The object to =
serialize.</param>
    /// <returns type=3D"String">The JSON string representation of the =
object.</returns>
    var e =3D Function._validateParams(arguments, [
        {name: "object", mayBeNull: true}
    ]);
    if (e) throw e;
    var stringBuilder =3D new Sys.StringBuilder();
    Sys.Serialization.JavaScriptSerializer._serializeWithBuilder(object, =
stringBuilder, false);
    return stringBuilder.toString();
}

$type.deserialize =3D function JavaScriptSerializer$deserialize(data, =
secure) {
    /// <summary =
locid=3D"M:J#Sys.Serialization.JavaScriptSerializer.deserialize">Deserial=
izes a JSON string.</summary>
    /// <param name=3D"data" type=3D"String">The JSON string to =
eval.</param>
    /// <param name=3D"secure" type=3D"Boolean" optional=3D"true" =
mayBeNull=3D"true">True if the method should perform JSON conformance =
checks before evaluating. False by default.</param>
    /// <returns>The results of eval applied to data.</returns>
    var e =3D Function._validateParams(arguments, [
        {name: "data", type: String},
        {name: "secure", type: Boolean, mayBeNull: true, optional: true}
    ]);
    if (e) throw e;
    if (!data.length) throw Error.argument('data', =
Sys.Res.cannotDeserializeEmptyString);
    var er, esc =3D Sys.Serialization.JavaScriptSerializer._esc;
    try {   =20
        var exp =3D data.replace(esc.dateRegEx, "$1new Date($2)");
       =20
        if (secure && =
esc.jsonRegEx.test(exp.replace(esc.jsonStringRegEx, ''))) throw null;

        return window.eval('(' + exp + ')');
    }
    catch (er) {
         throw Error.argument('data', =
Sys.Res.cannotDeserializeInvalidJson);
    }
}


Type.registerNamespace('Sys.UI');

$type =3D Sys.EventHandlerList =3D function EventHandlerList() {
    /// <summary locid=3D"M:J#Sys.EventHandlerList.#ctor">The =
EventHandlerList class contains a dictionary of multicast =
events.</summary>
    if (arguments.length !=3D=3D 0) throw Error.parameterCount();
    this._list =3D {};
}

$type.prototype =3D {
    _addHandler: function EventHandlerList$_addHandler(id, handler) {
        Array.add(this._getEvent(id, true), handler);
    },
    addHandler: function EventHandlerList$addHandler(id, handler) {
        /// <summary locid=3D"M:J#Sys.EventHandlerList.addHandler">The =
addHandler method adds a handler to the event identified by =
id.</summary>
        /// <param name=3D"id" type=3D"String">The identifier for the =
event.</param>
        /// <param name=3D"handler" type=3D"Function">The handler to add =
to the event.</param>
        var e =3D Function._validateParams(arguments, [
            {name: "id", type: String},
            {name: "handler", type: Function}
        ]);
        if (e) throw e;
        this._addHandler(id, handler);
    },
    _removeHandler: function EventHandlerList$_removeHandler(id, =
handler) {
        var evt =3D this._getEvent(id);
        if (!evt) return;
        Array.remove(evt, handler);
    },
    _removeHandlers: function EventHandlerList$_removeHandlers(id) {
        if (!id) {
            this._list =3D {};
        }
        else {
            var evt =3D this._getEvent(id);
            if (!evt) return;
            evt.length =3D 0;
        }
    },
    removeHandler: function EventHandlerList$removeHandler(id, handler) =
{
        /// <summary =
locid=3D"M:J#Sys.EventHandlerList.removeHandler">The removeHandler =
method removes a handler to the event identified by id.</summary>
        /// <param name=3D"id" type=3D"String">The identifier for the =
event.</param>
        /// <param name=3D"handler" type=3D"Function">The handler to =
remove from the event.</param>
        var e =3D Function._validateParams(arguments, [
            {name: "id", type: String},
            {name: "handler", type: Function}
        ]);
        if (e) throw e;
        this._removeHandler(id, handler);
    },
    getHandler: function EventHandlerList$getHandler(id) {
        /// <summary locid=3D"M:J#Sys.EventHandlerList.getHandler">The =
getHandler method returns a single function that will call all   =
handlers sequentially for the specified event.</summary>
        /// <param name=3D"id" type=3D"String">The identifier for the =
event.</param>
        /// <returns type=3D"Function">A function that will call each =
handler sequentially.</returns>
        var e =3D Function._validateParams(arguments, [
            {name: "id", type: String}
        ]);
        if (e) throw e;
        var evt =3D this._getEvent(id);
        if (!evt || !evt.length) return null;
        evt =3D Array.clone(evt);
        return function(source, args) {
            for (var i =3D 0, l =3D evt.length; i < l; i++) {
                evt[i](source, args);
            }
        };
    },
    _getEvent: function EventHandlerList$_getEvent(id, create) {
        var e =3D this._list[id];
        if (!e) {
            if (!create) return null;
            this._list[id] =3D e =3D [];
        }
        return e;
    }
}
$type.registerClass('Sys.EventHandlerList');
$type =3D Sys.CommandEventArgs =3D function =
CommandEventArgs(commandName, commandArgument, commandSource, =
commandEvent) {
    /// <summary locid=3D"M:J#Sys.CommandEventArgs.#ctor"></summary>
    /// <param name=3D"commandName" type=3D"String">The command =
name.</param>
    /// <param name=3D"commandArgument" mayBeNull=3D"true">The command =
arguments.</param>
    /// <param name=3D"commandSource" mayBeNull=3D"true">The command =
source.</param>
    /// <param name=3D"commandEvent" type=3D"Sys.UI.DomEvent" =
mayBeNull=3D"true" optional=3D"true">The DOM event that caused the =
command, if any.</param>
    var e =3D Function._validateParams(arguments, [
        {name: "commandName", type: String},
        {name: "commandArgument", mayBeNull: true},
        {name: "commandSource", mayBeNull: true},
        {name: "commandEvent", type: Sys.UI.DomEvent, mayBeNull: true, =
optional: true }
    ]);
    if (e) throw e;
    Sys.CommandEventArgs.initializeBase(this);
    this._commandName =3D commandName;
    this._commandArgument =3D commandArgument;
    this._commandSource =3D commandSource;
    this._commandEvent =3D commandEvent;
}
$type.prototype =3D {
    get_commandName: function CommandEventArgs$get_commandName() {
        /// <value type=3D"String" =
locid=3D"P:J#Sys.CommandEventArgs.commandName">The command name.</value>
        if (arguments.length !=3D=3D 0) throw Error.parameterCount();
        return this._commandName || null;
    },
    get_commandArgument: function CommandEventArgs$get_commandArgument() =
{
        /// <value mayBeNull=3D"true" =
locid=3D"P:J#Sys.CommandEventArgs.commandArgument">The command =
arguments.</value>
        if (arguments.length !=3D=3D 0) throw Error.parameterCount();
        return this._commandArgument;
    },
    get_commandSource: function CommandEventArgs$get_commandSource() {
        /// <value mayBeNull=3D"true" =
locid=3D"P:J#Sys.CommandEventArgs.commandSource">The command =
source.</value>
        if (arguments.length !=3D=3D 0) throw Error.parameterCount();
        return this._commandSource || null;
    },
    get_commandEvent: function CommandEventArgs$get_commandEvent() {
        /// <value mayBeNull=3D"true" type=3D"Sys.UI.DomEvent" =
locid=3D"P:J#Sys.CommandEventArgs.commandEvent">The DOM event that =
caused the command, if any.</value>
        if (arguments.length !=3D=3D 0) throw Error.parameterCount();
        return this._commandEvent || null;
    }
}
$type.registerClass("Sys.CommandEventArgs", Sys.CancelEventArgs);
$type =3D Sys.INotifyPropertyChange =3D function INotifyPropertyChange() =
{
    /// <summary locid=3D"M:J#Sys.INotifyPropertyChange.#ctor">Implement =
this interface to become a provider of property change =
notifications.</summary>
    if (arguments.length !=3D=3D 0) throw Error.parameterCount();
    throw Error.notImplemented();
}
$type.prototype =3D {
    add_propertyChanged: function =
INotifyPropertyChange$add_propertyChanged(handler) {
    /// <summary =
locid=3D"E:J#Sys.INotifyPropertyChange.propertyChanged"></summary>
    var e =3D Function._validateParams(arguments, [{name: "handler", =
type: Function}]);
    if (e) throw e;
        throw Error.notImplemented();
    },
    remove_propertyChanged: function =
INotifyPropertyChange$remove_propertyChanged(handler) {
    var e =3D Function._validateParams(arguments, [{name: "handler", =
type: Function}]);
    if (e) throw e;
        throw Error.notImplemented();
    }
}
$type.registerInterface('Sys.INotifyPropertyChange');
$type =3D Sys.PropertyChangedEventArgs =3D function =
PropertyChangedEventArgs(propertyName) {
    /// <summary =
locid=3D"M:J#Sys.PropertyChangedEventArgs.#ctor">Describes property =
changes.</summary>
    /// <param name=3D"propertyName" type=3D"String">The name of the =
property that changed.</param>
    var e =3D Function._validateParams(arguments, [
        {name: "propertyName", type: String}
    ]);
    if (e) throw e;
    Sys.PropertyChangedEventArgs.initializeBase(this);
    this._propertyName =3D propertyName;
}
 $type.prototype =3D {
    get_propertyName: function =
PropertyChangedEventArgs$get_propertyName() {
        /// <value type=3D"String" =
locid=3D"P:J#Sys.PropertyChangedEventArgs.propertyName">The name of the =
property that changed.</value>
        if (arguments.length !=3D=3D 0) throw Error.parameterCount();
        return this._propertyName;
    }
}
$type.registerClass('Sys.PropertyChangedEventArgs', Sys.EventArgs);
$type =3D Sys.INotifyDisposing =3D function INotifyDisposing() {
    /// <summary locid=3D"M:J#Sys.INotifyDisposing.#ctor">Implement this =
interface if the class exposes an event to notify when it's =
disposing.</summary>
    if (arguments.length !=3D=3D 0) throw Error.parameterCount();
    throw Error.notImplemented();
}
$type.prototype =3D {
    add_disposing: function INotifyDisposing$add_disposing(handler) {
    /// <summary locid=3D"E:J#Sys.INotifyDisposing.disposing"></summary>
    var e =3D Function._validateParams(arguments, [{name: "handler", =
type: Function}]);
    if (e) throw e;
        throw Error.notImplemented();
    },
    remove_disposing: function =
INotifyDisposing$remove_disposing(handler) {
    var e =3D Function._validateParams(arguments, [{name: "handler", =
type: Function}]);
    if (e) throw e;
        throw Error.notImplemented();
    }
}
$type.registerInterface("Sys.INotifyDisposing");
$type =3D Sys.Component =3D function Component() {
    /// <summary locid=3D"M:J#Sys.Component.#ctor">Base class for =
Control, Behavior and any object that wants its lifetime to be =
managed.</summary>
    if (arguments.length !=3D=3D 0) throw Error.parameterCount();
    if (Sys.Application) Sys.Application.registerDisposableObject(this);
}
$type.prototype =3D {
    _idSet: false,
    get_events: function Component$get_events() {
        /// <value type=3D"Sys.EventHandlerList" =
locid=3D"P:J#Sys.Component.events">The collection of event handlers for =
this behavior.  This property should only be used by derived behaviors  =
and should not be publicly called by other code.</value>
        if (arguments.length !=3D=3D 0) throw Error.parameterCount();
        return Sys.Observer._getContext(this, true).events;
    },
    get_id: function Component$get_id() {
        /// <value type=3D"String" =
locid=3D"P:J#Sys.Component.id"></value>
        if (arguments.length !=3D=3D 0) throw Error.parameterCount();
        return this._id || null;
    },
    set_id: function Component$set_id(value) {
        var e =3D Function._validateParams(arguments, [{name: "value", =
type: String}]);
        if (e) throw e;
        if (this._idSet) throw =
Error.invalidOperation(Sys.Res.componentCantSetIdTwice);
        this._idSet =3D true;
        var oldId =3D this.get_id();
        if (oldId && Sys.Application.findComponent(oldId)) throw =
Error.invalidOperation(Sys.Res.componentCantSetIdAfterAddedToApp);
        this._id =3D value;
    },
    get_isInitialized: function Component$get_isInitialized() {
        /// <value type=3D"Boolean" =
locid=3D"P:J#Sys.Component.isInitialized"></value>
        if (arguments.length !=3D=3D 0) throw Error.parameterCount();
        return !!this._initialized;
    },
    get_isUpdating: function Component$get_isUpdating() {
        /// <value type=3D"Boolean" =
locid=3D"P:J#Sys.Component.isUpdating"></value>
        if (arguments.length !=3D=3D 0) throw Error.parameterCount();
        return !!this._updating;
    },
    add_disposing: function Component$add_disposing(handler) {
        /// <summary locid=3D"E:J#Sys.Component.disposing"></summary>
        var e =3D Function._validateParams(arguments, [{name: "handler", =
type: Function}]);
        if (e) throw e;
        this._addHandler("disposing", handler);
    },
    remove_disposing: function Component$remove_disposing(handler) {
        var e =3D Function._validateParams(arguments, [{name: "handler", =
type: Function}]);
        if (e) throw e;
        this._removeHandler("disposing", handler);
    },
    add_propertyChanged: function Component$add_propertyChanged(handler) =
{
        /// <summary =
locid=3D"E:J#Sys.Component.propertyChanged"></summary>
        var e =3D Function._validateParams(arguments, [{name: "handler", =
type: Function}]);
        if (e) throw e;
        this._addHandler("propertyChanged", handler);
    },
    remove_propertyChanged: function =
Component$remove_propertyChanged(handler) {
        var e =3D Function._validateParams(arguments, [{name: "handler", =
type: Function}]);
        if (e) throw e;
        this._removeHandler("propertyChanged", handler);
    },
    _addHandler: function Component$_addHandler(eventName, handler) {
        Sys.Observer.addEventHandler(this, eventName, handler);
    },
    _removeHandler: function Component$_removeHandler(eventName, =
handler) {
        Sys.Observer.removeEventHandler(this, eventName, handler);
    },
    beginUpdate: function Component$beginUpdate() {
        this._updating =3D true;
    },
    dispose: function Component$dispose() {
        Sys.Observer.raiseEvent(this, "disposing")
        Sys.Observer.clearEventHandlers(this);
        Sys.Application.unregisterDisposableObject(this);
        Sys.Application.removeComponent(this);
    },
    endUpdate: function Component$endUpdate() {
        this._updating =3D false;
        if (!this._initialized) this.initialize();
        this.updated();
    },
    initialize: function Component$initialize() {
        this._initialized =3D true;
    },
    raisePropertyChanged: function =
Component$raisePropertyChanged(propertyName) {
        /// <summary =
locid=3D"M:J#Sys.Component.raisePropertyChanged">Raises a change =
notification event.</summary>
        /// <param name=3D"propertyName" type=3D"String">The name of the =
property that changed.</param>
        var e =3D Function._validateParams(arguments, [
            {name: "propertyName", type: String}
        ]);
        if (e) throw e;
        Sys.Observer.raisePropertyChanged(this, propertyName);
    },
    updated: function Component$updated() {
    }
}
$type.registerClass('Sys.Component', null, Sys.IDisposable, =
Sys.INotifyPropertyChange, Sys.INotifyDisposing);

$type._setProperties =3D function Component$_setProperties(target, =
properties) {
    /// <summary locid=3D"M:J#Sys.Component._setProperties">Recursively =
sets properties on an object.</summary>
    /// <param name=3D"target">The object on which to set the property =
values.</param>
    /// <param name=3D"properties">A JSON object containing the property =
values.</param>
    var e =3D Function._validateParams(arguments, [
        {name: "target"},
        {name: "properties"}
    ]);
    if (e) throw e;
    var current;
    var targetType =3D Object.getType(target);
    var isObject =3D (targetType =3D=3D=3D Object) || (targetType =
=3D=3D=3D Sys.UI.DomElement);
    var isComponent =3D Sys.Component.isInstanceOfType(target) && =
!target.get_isUpdating();
    if (isComponent) target.beginUpdate();
    for (var name in properties) {
        var val =3D properties[name];
        var getter =3D isObject ? null : target["get_" + name];
        if (isObject || typeof(getter) !=3D=3D 'function') {
            var targetVal =3D target[name];
            if (!val || (typeof(val) !=3D=3D 'object') || (isObject && =
!targetVal)) {
                target[name] =3D val;
            }
            else {
                this._setProperties(targetVal, val);
            }
        }
        else {
            var setter =3D target["set_" + name];
            if (typeof(setter) =3D=3D=3D 'function') {
                setter.apply(target, [val]);
            }
            else if (val instanceof Array) {
                current =3D getter.apply(target);
                if (!(current instanceof Array)) throw new =
Error.invalidOperation(String.format(Sys.Res.propertyNotAnArray, name));
                for (var i =3D 0, j =3D current.length, l=3D val.length; =
i < l; i++, j++) {
                    current[j] =3D val[i];
                }
            }
            else if ((typeof(val) =3D=3D=3D 'object') && =
(Object.getType(val) =3D=3D=3D Object)) {
                current =3D getter.apply(target);
                if ((typeof(current) =3D=3D=3D 'undefined') || (current =
=3D=3D=3D null)) throw new =
Error.invalidOperation(String.format(Sys.Res.propertyNullOrUndefined, =
name));
                this._setProperties(current, val);
            }
            else {
                throw new =
Error.invalidOperation(String.format(Sys.Res.propertyNotWritable, =
name));
            }
        }
    }
    if (isComponent) target.endUpdate();
}

$type._setReferences =3D function Component$_setReferences(component, =
references) {
    var reference, refs =3D {};
    forIn(references, function(id, name) {
        refs[name] =3D reference =3D $find(id);
        if (!reference) throw =
Error.invalidOperation(String.format(Sys.Res.referenceNotFound, id));
    });
    Sys._set(component, refs);
}

$create =3D $type.create =3D function Component$create(type, properties, =
events, references, element) {
    /// <summary locid=3D"M:J#Sys.Component.create">Instantiates a =
component of the specified type, attaches it to the specified element if =
it's  a Control or Behavior, sets the properties as described by the =
specified JSON object,  then calls initialize.</summary>
    /// <param name=3D"type" type=3D"Type">The type of the component to =
create.</param>
    /// <param name=3D"properties" optional=3D"true" =
mayBeNull=3D"true">A JSON object that describes the properties and their =
values.</param>
    /// <param name=3D"events" optional=3D"true" mayBeNull=3D"true">A =
JSON object that describes the events and their handlers.</param>
    /// <param name=3D"references" optional=3D"true" =
mayBeNull=3D"true">A JSON object that describes the properties that are =
references to other components.  The contents of this object consists of =
name/id pairs.  If in a two-pass creation, the setting of these =
properties will be delayed until the second pass.</param>
    /// <param name=3D"element" domElement=3D"true" optional=3D"true" =
mayBeNull=3D"true">The DOM element the component must be attached =
to.</param>
    /// <returns type=3D"Object">The component instance.</returns>
    var e =3D Function._validateParams(arguments, [
        {name: "type", type: Type},
        {name: "properties", mayBeNull: true, optional: true},
        {name: "events", mayBeNull: true, optional: true},
        {name: "references", mayBeNull: true, optional: true},
        {name: "element", mayBeNull: true, domElement: true, optional: =
true}
    ]);
    if (e) throw e;
    if (type.inheritsFrom(Sys.UI.Behavior) || =
type.inheritsFrom(Sys.UI.Control)) {
        if (!element) throw Error.argument('element', =
Sys.Res.createNoDom);
    }
    else if (element) throw Error.argument('element', =
Sys.Res.createComponentOnDom);
    var component =3D (element ? new type(element): new type());
    callIf(component, "beginUpdate");
    if (properties) {
        Sys.Component._setProperties(component, properties);
    }
    if (events) {
        for (var name in events) {
            if (!(component["add_" + name] instanceof Function)) throw =
new Error.invalidOperation(String.format(Sys.Res.undefinedEvent, name));
            if (!(events[name] instanceof Function)) throw new =
Error.invalidOperation(Sys.Res.eventHandlerNotFunction);
            component["add_" + name](events[name]);
        }
    }
    Sys.Component._register(component, references);
    return component;
}
$type._register =3D function Component$_register(component, references, =
dontUpdate) {
    var ret;
    if (Sys.Component.isInstanceOfType(component)) {
        ret =3D true;
        var app =3D Sys.Application;
        if (component.get_id()) {
            app.addComponent(component);
        }
        if (app.get_isCreatingComponents()) {
            app._createdComponents.push(component);
            if (references) {
                app._addComponentToSecondPass(component, references);
            }
            else if (!dontUpdate) {
                component.endUpdate();
            }
        }
        else {
            if (references) {
                Sys.Component._setReferences(component, references);
            }
            if (!dontUpdate) {
                component.endUpdate();
            }
        }
    }
    return ret;
}

Sys._getComponent =3D function _getComponent(found, selector, context) {
    var component =3D Sys.Application.findComponent(selector);
    if (component) {
        found.push(component);
    }
}

Sys._2Pass =3D function _2Pass(callback) {
    var app =3D Sys.Application,
        useTwoPass =3D !app.get_isCreatingComponents();
    if (useTwoPass) app.beginCreateComponents();
    foreach(callback, function(c) { c() });
    if (useTwoPass) app.endCreateComponents();
}
$type =3D Sys.UI.MouseButton =3D function MouseButton() {
    /// <summary locid=3D"M:J#Sys.UI.MouseButton.#ctor">Describes mouse =
buttons. The values are those from the DOM standard, which are different =
from the IE values.</summary>
    /// <field name=3D"leftButton" type=3D"Number" integer=3D"true" =
static=3D"true" locid=3D"F:J#Sys.UI.MouseButton.leftButton"></field>
    /// <field name=3D"middleButton" type=3D"Number" integer=3D"true" =
static=3D"true" locid=3D"F:J#Sys.UI.MouseButton.middleButton"></field>
    /// <field name=3D"rightButton" type=3D"Number" integer=3D"true" =
static=3D"true" locid=3D"F:J#Sys.UI.MouseButton.rightButton"></field>
    if (arguments.length !=3D=3D 0) throw Error.parameterCount();
    throw Error.notImplemented();
}
$type.prototype =3D {
    leftButton: 0,
    middleButton: 1,
    rightButton: 2
}
$type.registerEnum("Sys.UI.MouseButton");
$type =3D Sys.UI.Key =3D function Key() {
    /// <summary locid=3D"M:J#Sys.UI.Key.#ctor">Describes key =
codes.</summary>
    /// <field name=3D"backspace" type=3D"Number" integer=3D"true" =
static=3D"true" locid=3D"F:J#Sys.UI.Key.backspace"></field>
    /// <field name=3D"tab" type=3D"Number" integer=3D"true" =
static=3D"true" locid=3D"F:J#Sys.UI.Key.tab"></field>
    /// <field name=3D"enter" type=3D"Number" integer=3D"true" =
static=3D"true" locid=3D"F:J#Sys.UI.Key.enter"></field>
    /// <field name=3D"esc" type=3D"Number" integer=3D"true" =
static=3D"true" locid=3D"F:J#Sys.UI.Key.esc"></field>
    /// <field name=3D"space" type=3D"Number" integer=3D"true" =
static=3D"true" locid=3D"F:J#Sys.UI.Key.space"></field>
    /// <field name=3D"pageUp" type=3D"Number" integer=3D"true" =
static=3D"true" locid=3D"F:J#Sys.UI.Key.pageUp"></field>
    /// <field name=3D"pageDown" type=3D"Number" integer=3D"true" =
static=3D"true" locid=3D"F:J#Sys.UI.Key.pageDown"></field>
    /// <field name=3D"end" type=3D"Number" integer=3D"true" =
static=3D"true" locid=3D"F:J#Sys.UI.Key.end"></field>
    /// <field name=3D"home" type=3D"Number" integer=3D"true" =
static=3D"true" locid=3D"F:J#Sys.UI.Key.home"></field>
    /// <field name=3D"left" type=3D"Number" integer=3D"true" =
static=3D"true" locid=3D"F:J#Sys.UI.Key.left"></field>
    /// <field name=3D"up" type=3D"Number" integer=3D"true" =
static=3D"true" locid=3D"F:J#Sys.UI.Key.up"></field>
    /// <field name=3D"right" type=3D"Number" integer=3D"true" =
static=3D"true" locid=3D"F:J#Sys.UI.Key.right"></field>
    /// <field name=3D"down" type=3D"Number" integer=3D"true" =
static=3D"true" locid=3D"F:J#Sys.UI.Key.down"></field>
    /// <field name=3D"del" type=3D"Number" integer=3D"true" =
static=3D"true" locid=3D"F:J#Sys.UI.Key.del"></field>
    if (arguments.length !=3D=3D 0) throw Error.parameterCount();
    throw Error.notImplemented();
}
$type.prototype =3D {
    backspace: 8,
    tab: 9,
    enter: 13,
    esc: 27,
    space: 32,
    pageUp: 33,
    pageDown: 34,
    end: 35,
    home: 36,
    left: 37,
    up: 38,
    right: 39,
    down: 40,
    del: 127
}
$type.registerEnum("Sys.UI.Key");
$type =3D Sys.UI.Point =3D function Point(x, y) {
    /// <summary locid=3D"M:J#Sys.UI.Point.#ctor"></summary>
    /// <param name=3D"x" type=3D"Number" integer=3D"true"></param>
    /// <param name=3D"y" type=3D"Number" integer=3D"true"></param>
    /// <field name=3D"x" type=3D"Number" integer=3D"true" =
locid=3D"F:J#Sys.UI.Point.x"></field>
    /// <field name=3D"y" type=3D"Number" integer=3D"true" =
locid=3D"F:J#Sys.UI.Point.y"></field>
    var e =3D Function._validateParams(arguments, [
        {name: "x", type: Number, integer: true},
        {name: "y", type: Number, integer: true}
    ]);
    if (e) throw e;
    this.x =3D x;
    this.y =3D y;
}
$type.registerClass('Sys.UI.Point');
$type =3D Sys.UI.Bounds =3D function Bounds(x, y, width, height) {
    /// <summary locid=3D"M:J#Sys.UI.Bounds.#ctor"></summary>
    /// <param name=3D"x" type=3D"Number" integer=3D"true"></param>
    /// <param name=3D"y" type=3D"Number" integer=3D"true"></param>
    /// <param name=3D"width" type=3D"Number" integer=3D"true"></param>
    /// <param name=3D"height" type=3D"Number" integer=3D"true"></param>
    /// <field name=3D"x" type=3D"Number" integer=3D"true" =
locid=3D"F:J#Sys.UI.Bounds.x"></field>
    /// <field name=3D"y" type=3D"Number" integer=3D"true" =
locid=3D"F:J#Sys.UI.Bounds.y"></field>
    /// <field name=3D"width" type=3D"Number" integer=3D"true" =
locid=3D"F:J#Sys.UI.Bounds.width"></field>
    /// <field name=3D"height" type=3D"Number" integer=3D"true" =
locid=3D"F:J#Sys.UI.Bounds.height"></field>
    var e =3D Function._validateParams(arguments, [
        {name: "x", type: Number, integer: true},
        {name: "y", type: Number, integer: true},
        {name: "width", type: Number, integer: true},
        {name: "height", type: Number, integer: true}
    ]);
    if (e) throw e;
    this.x =3D x;
    this.y =3D y;
    this.height =3D height;
    this.width =3D width;
}
$type.registerClass('Sys.UI.Bounds');
$type =3D Sys.UI.DomEvent =3D function DomEvent(eventObject) {
    /// <summary locid=3D"M:J#Sys.UI.DomEvent.#ctor">A cross-browser =
object that represents event properties.</summary>
    /// <param name=3D"eventObject">The browser-specific event object =
(window.event for IE).</param>
    /// <field name=3D"altKey" type=3D"Boolean" =
locid=3D"F:J#Sys.UI.DomEvent.altKey"></field>
    /// <field name=3D"button" type=3D"Sys.UI.MouseButton" =
locid=3D"F:J#Sys.UI.DomEvent.button"></field>
    /// <field name=3D"charCode" type=3D"Number" integer=3D"true" =
locid=3D"F:J#Sys.UI.DomEvent.charCode">The character code for the =
pressed key.</field>
    /// <field name=3D"clientX" type=3D"Number" integer=3D"true" =
locid=3D"F:J#Sys.UI.DomEvent.clientX"></field>
    /// <field name=3D"clientY" type=3D"Number" integer=3D"true" =
locid=3D"F:J#Sys.UI.DomEvent.clientY"></field>
    /// <field name=3D"ctrlKey" type=3D"Boolean" =
locid=3D"F:J#Sys.UI.DomEvent.ctrlKey"></field>
    /// <field name=3D"keyCode" type=3D"Number" integer=3D"true" =
locid=3D"F:J#Sys.UI.DomEvent.keyCode">The key code for the pressed =
key.</field>
    /// <field name=3D"offsetX" type=3D"Number" integer=3D"true" =
locid=3D"F:J#Sys.UI.DomEvent.offsetX"></field>
    /// <field name=3D"offsetY" type=3D"Number" integer=3D"true" =
locid=3D"F:J#Sys.UI.DomEvent.offsetY"></field>
    /// <field name=3D"screenX" type=3D"Number" integer=3D"true" =
locid=3D"F:J#Sys.UI.DomEvent.screenX"></field>
    /// <field name=3D"screenY" type=3D"Number" integer=3D"true" =
locid=3D"F:J#Sys.UI.DomEvent.screenY"></field>
    /// <field name=3D"shiftKey" type=3D"Boolean" =
locid=3D"F:J#Sys.UI.DomEvent.shiftKey"></field>
    /// <field name=3D"target" =
locid=3D"F:J#Sys.UI.DomEvent.target"></field>
    /// <field name=3D"type" type=3D"String" =
locid=3D"F:J#Sys.UI.DomEvent.type"></field>
    var e =3D Function._validateParams(arguments, [
        {name: "eventObject"}
    ]);
    if (e) throw e;
    var ev =3D eventObject;
    var etype =3D this.type =3D ev.type.toLowerCase();
    this.rawEvent =3D ev;
    this.altKey =3D ev.altKey;
    if (typeof(ev.button) !=3D=3D 'undefined') {
        this.button =3D (typeof(ev.which) !=3D=3D 'undefined') ? =
ev.button :
            (ev.button =3D=3D=3D 4) ? Sys.UI.MouseButton.middleButton :
            (ev.button =3D=3D=3D 2) ? Sys.UI.MouseButton.rightButton :
            Sys.UI.MouseButton.leftButton;
    }
    if (etype =3D=3D=3D 'keypress') {
        this.charCode =3D ev.charCode || ev.keyCode;
    }
    else if (ev.keyCode && (ev.keyCode =3D=3D=3D 46)) {
        this.keyCode =3D 127;
    }
    else {
        this.keyCode =3D ev.keyCode;
    }
    this.clientX =3D ev.clientX;
    this.clientY =3D ev.clientY;
    this.ctrlKey =3D ev.ctrlKey;
    this.target =3D ev.target || ev.srcElement;
    if (!etype.startsWith('key')) {
        if ((typeof(ev.offsetX) !=3D=3D 'undefined') && =
(typeof(ev.offsetY) !=3D=3D 'undefined')) {
            this.offsetX =3D ev.offsetX;
            this.offsetY =3D ev.offsetY;
        }
        else if (this.target && (this.target.nodeType !=3D=3D 3) && =
(typeof(ev.clientX) =3D=3D=3D 'number')) {
            var loc =3D Sys.UI.DomElement.getLocation(this.target);
            var w =3D Sys.UI.DomElement._getWindow(this.target);
            this.offsetX =3D (w.pageXOffset || 0) + ev.clientX - loc.x;
            this.offsetY =3D (w.pageYOffset || 0) + ev.clientY - loc.y;
        }
    }
    this.screenX =3D ev.screenX;
    this.screenY =3D ev.screenY;
    this.shiftKey =3D ev.shiftKey;
}
$type.prototype =3D {
    preventDefault: function DomEvent$preventDefault() {
        /// <summary =
locid=3D"M:J#Sys.UI.DomEvent.preventDefault">Prevents the default event =
action from happening. For example, a textbox keydown event,  if =
suppressed, will prevent the character from being appended to the =
textbox.</summary>
        if (arguments.length !=3D=3D 0) throw Error.parameterCount();
        var raw =3D this.rawEvent;
        if (raw.preventDefault) {
            raw.preventDefault();
        }
        else if (window.event) {
            raw.returnValue =3D false;
        }
    },
    stopPropagation: function DomEvent$stopPropagation() {
        /// <summary =
locid=3D"M:J#Sys.UI.DomEvent.stopPropagation">Prevents the event from =
being propagated to parent elements.</summary>
        if (arguments.length !=3D=3D 0) throw Error.parameterCount();
        var raw =3D this.rawEvent;
        if (raw.stopPropagation) {
            raw.stopPropagation();
        }
        else if (window.event) {
            raw.cancelBubble =3D true;
        }
    }
}
$type.registerClass('Sys.UI.DomEvent');

$addHandler =3D $type.addHandler =3D function =
DomEvent$addHandler(elements, eventName, handler, autoRemove) {
    /// <summary locid=3D"M:J#Sys.UI.DomEvent.addHandler">A =
cross-browser way to add a DOM event handler to an element.</summary>
    /// <param name=3D"elements">The element or text node, or array of =
elements or text nodes, that exposes the event. You may also pass a DOM =
selector or array of DOM selectors.</param>
    /// <param name=3D"eventName" type=3D"String">The name of the event. =
Do not include the 'on' prefix, for example, 'click' instead of =
'onclick'.</param>
    /// <param name=3D"handler" type=3D"Function">The event handler to =
add.</param>
    /// <param name=3D"autoRemove" type=3D"Boolean" optional=3D"true" =
mayBeNull=3D"true">Whether the handler should be removed automatically =
when the element is disposed of, such as when an UpdatePanel refreshes, =
or Sys.Application.disposeElement is called.</param>
    var e =3D Function._validateParams(arguments, [
        {name: "elements"},
        {name: "eventName", type: String},
        {name: "handler", type: Function},
        {name: "autoRemove", type: Boolean, mayBeNull: true, optional: =
true}
    ]);
    if (e) throw e;
    if (eventName =3D=3D=3D "error") throw =
Error.invalidOperation(Sys.Res.addHandlerCantBeUsedForError);
    Sys.query(elements).each(function() {
        var nodeType =3D this.nodeType;
        if (nodeType =3D=3D=3D 3 || nodeType =3D=3D=3D 2 || nodeType =
=3D=3D=3D 8) return;
        Sys.UI.DomEvent._ensureDomNode(this);
        if (!this._events) {
            this._events =3D {};
        }
        var eventCache =3D this._events[eventName];
        if (!eventCache) {
            this._events[eventName] =3D eventCache =3D [];
        }
        var element =3D this,=20
            browserHandler;
        if (this.addEventListener) {
            browserHandler =3D function(e) {
                return handler.call(element, new Sys.UI.DomEvent(e));
            }
            this.addEventListener(eventName, browserHandler, false);
        }
        else if (this.attachEvent) {
            browserHandler =3D function() {
                var ex, ev =3D {};
                try {ev =3D Sys.UI.DomElement._getWindow(element).event} =
catch(ex) {}
                return handler.call(element, new Sys.UI.DomEvent(ev));
            }
            this.attachEvent('on' + eventName, browserHandler);
        }
        eventCache.push({handler: handler, browserHandler: =
browserHandler, autoRemove: autoRemove });
        if (autoRemove) {
            Sys.UI.DomElement._onDispose(this, =
Sys.UI.DomEvent._disposeHandlers);
        }
    });
}

Sys.registerPlugin({
    name: "addHandler",
    dom: true,
    returnType: "Sys.ElementSet",
    description: "A cross-browser way to add a DOM event handler to an =
element.",
    parameters: [
        {name: "eventName", type: "String", description: "The name of =
the event. Do not include the 'on' prefix, for example, 'click' instead =
of 'onclick'."},
        {name: "handler", type: "Function", description: "The event =
handler to add."},
        {name: "autoRemove", type: "Boolean", description: "Whether the =
handler should be removed automatically when the element is disposed of, =
such as when an UpdatePanel refreshes, or Sys.Application.disposeElement =
is called."}
    ],
    plugin: function (eventName, handler, autoRemove) {
        Sys.UI.DomEvent.addHandler(this.get(), eventName, handler, =
autoRemove);
        return this;
    }
});

$addHandlers =3D $type.addHandlers =3D function =
DomEvent$addHandlers(elements, events, handlerOwner, autoRemove) {
    /// <summary locid=3D"M:J#Sys.UI.DomEvent.addHandlers">Adds a list =
of event handlers to an element.  If a handlerOwner is specified, =
delegates are created with each of the handlers.</summary>
    /// <param name=3D"elements">The element or text node, or array of =
element or text nodes, that exposes the event. You may also pass a DOM =
selector or array of DOM selectors.</param>
    /// <param name=3D"events" type=3D"Object">A dictionary of event =
handlers.</param>
    /// <param name=3D"handlerOwner" optional=3D"true" =
mayBeNull=3D"true">The owner of the event handlers that will be the this =
pointer  for the delegates that will be created from the =
handlers.</param>
    /// <param name=3D"autoRemove" type=3D"Boolean" optional=3D"true" =
mayBeNull=3D"true">Whether the handler should be removed automatically =
when the element is disposed of, such as when an UpdatePanel refreshes, =
or when Sys.Application.disposeElement is called.</param>
    var e =3D Function._validateParams(arguments, [
        {name: "elements"},
        {name: "events", type: Object},
        {name: "handlerOwner", mayBeNull: true, optional: true},
        {name: "autoRemove", type: Boolean, mayBeNull: true, optional: =
true}
    ]);
    if (e) throw e;
    Sys.query(elements).each(function() {
        var nodeType =3D this.nodeType;
        if (nodeType =3D=3D=3D 3 || nodeType =3D=3D=3D 2 || nodeType =
=3D=3D=3D 8) return;
        Sys.UI.DomEvent._ensureDomNode(this);
        for (var name in events) {
            var handler =3D events[name];
            if (typeof(handler) !=3D=3D 'function') throw =
Error.invalidOperation(Sys.Res.cantAddNonFunctionhandler);
            if (handlerOwner) {
                handler =3D Function.createDelegate(handlerOwner, =
handler);
            }
            $addHandler(this, name, handler, autoRemove || false);
        }
    });
}

Sys.registerPlugin({
    name: "addHandlers",
    dom: true,
    returnType: "Sys.ElementSet",
    description: "Adds a list of event handlers to an element. If a =
handlerOwner is specified, delegates are created with each of the =
handlers.",
    parameters: [
        {name: "events", type: "Object", description: "A dictionary of =
event handlers."},
        {name: "handlerOwner", description: "The owner of the event =
handlers that will be the this pointer for the delegates that will be =
created from the handlers."},
        {name: "autoRemove", type: "Boolean", description: "Whether the =
handler should be removed automatically when the element is disposed of, =
such as when an UpdatePanel refreshes, or Sys.Application.disposeElement =
is called."}
    ],
    plugin: function (events, handlerOwner, autoRemove) {
        Sys.UI.DomEvent.addHandlers(this.get(), events, handlerOwner, =
autoRemove);
        return this;
    }
});

$clearHandlers =3D $type.clearHandlers =3D function =
DomEvent$clearHandlers(elements) {
    /// <summary locid=3D"M:J#Sys.UI.DomEvent.clearHandlers">Clears all =
the event handlers that were added to the element or array of =
elements.</summary>
    /// <param name=3D"elements">The element or text node, or an array =
of elements or text nodes. You may also pass a DOM selector or array of =
DOM selectors.</param>
    var e =3D Function._validateParams(arguments, [
        {name: "elements"}
    ]);
    if (e) throw e;
    Sys.query(elements).each(function() {
        var nodeType =3D this.nodeType;
        if (nodeType =3D=3D=3D 3 || nodeType =3D=3D=3D 2 || nodeType =
=3D=3D=3D 8) return;
        Sys.UI.DomEvent._ensureDomNode(this);
        Sys.UI.DomEvent._clearHandlers(this, false);
    });
}

Sys.registerPlugin({
    name: "clearHandlers",
    dom: true,
    returnType: "Sys.ElementSet",
    description: "Clears all the event handlers that were added to the =
element or array of elements.",
    plugin: function() {
        Sys.UI.DomEvent.clearHandlers(this.get());
        return this;
    }
});

$type._clearHandlers =3D function DomEvent$_clearHandlers(elements, =
autoRemoving) {
    Sys.query(elements).each(function() {
        var nodeType =3D this.nodeType;
        if (nodeType =3D=3D=3D 3 || nodeType =3D=3D=3D 2 || nodeType =
=3D=3D=3D 8) return;
        Sys.UI.DomEvent._ensureDomNode(this);
        var cache =3D this._events;
        if (cache) {
            for (var name in cache) {
                var handlers =3D cache[name];
                for (var i =3D handlers.length - 1; i >=3D 0; i--) {
                    var entry =3D handlers[i];
                    if (!autoRemoving || entry.autoRemove) {
                        $removeHandler(this, name, entry.handler);
                    }
                }
            }
        }
    });
}

$type._disposeHandlers =3D function DomEvent$_disposeHandlers() {
    Sys.UI.DomEvent._clearHandlers(this, true);
}

$removeHandler =3D $type.removeHandler =3D function =
DomEvent$removeHandler(elements, eventName, handler) {
    /// <summary locid=3D"M:J#Sys.UI.DomEvent.removeHandler">A =
cross-browser way to remove a DOM event handler from an =
element.</summary>
    /// <param name=3D"elements">The element or text node, or array of =
elements or text nodes, that exposes the event. You may also pass a DOM =
selector or array of DOM selectors.</param>
    /// <param name=3D"eventName" type=3D"String">The name of the event. =
Do not include the 'on' prefix, for example, 'click' instead of =
'onclick'.</param>
    /// <param name=3D"handler" type=3D"Function">The event handler to =
remove.</param>
    var e =3D Function._validateParams(arguments, [
        {name: "elements"},
        {name: "eventName", type: String},
        {name: "handler", type: Function}
    ]);
    if (e) throw e;
    Sys.UI.DomEvent._removeHandler(elements, eventName, handler);
}
$type._removeHandler =3D function DomEvent$_removeHandler(elements, =
eventName, handler) {
    Sys.query(elements).each(function() {
        var nodeType =3D this.nodeType;
        if (nodeType =3D=3D=3D 3 || nodeType =3D=3D=3D 2 || nodeType =
=3D=3D=3D 8) return;
        Sys.UI.DomEvent._ensureDomNode(this);
        var browserHandler =3D null;
        if ((typeof(this._events) !=3D=3D 'object') || !this._events) =
throw Error.invalidOperation(Sys.Res.eventHandlerInvalid);
        var cache =3D this._events[eventName];
        if (!(cache instanceof Array)) throw =
Error.invalidOperation(Sys.Res.eventHandlerInvalid);
        for (var i =3D 0, l =3D cache.length; i < l; i++) {
            if (cache[i].handler =3D=3D=3D handler) {
                browserHandler =3D cache[i].browserHandler;
                break;
            }
        }
        if (typeof(browserHandler) !=3D=3D 'function') throw =
Error.invalidOperation(Sys.Res.eventHandlerInvalid);
        if (this.removeEventListener) {
            this.removeEventListener(eventName, browserHandler, false);
        }
        else if (this.detachEvent) {
            this.detachEvent('on' + eventName, browserHandler);
        }
        cache.splice(i, 1);
    });
}

Sys.registerPlugin({
    name: "removeHandler",
    dom: true,
    returnType: "Sys.ElementSet",
    description: "A cross-browser way to remove a DOM event handler from =
an element.",
    parameters: [
        {name: "eventName", type: "String", description: "The name of =
the event. Do not include the 'on' prefix, for example, 'click' instead =
of 'onclick'."},
        {name: "handler", type: "Function", description: "The event =
handler to remove."}
    ],
    plugin: function (eventName, handler) {
        Sys.UI.DomEvent.removeHandler(this.get(), eventName, handler);
        return this;
    }
});


$type._ensureDomNode =3D function DomEvent$_ensureDomNode(element) {
    if (element && element.tagName && (element.tagName.toUpperCase() =
=3D=3D=3D "SCRIPT")) return;
   =20
    var doc =3D element ? (element.ownerDocument || element.document || =
element) : null;
    if (!element ||
        ((typeof(element.document) !=3D=3D 'object') && (element !=3D =
doc) && (typeof(element.nodeType) !=3D=3D 'number'))) {
        throw Error.argument("element", Sys.Res.argumentDomNode);
    }
}
$type =3D Sys.UI.DomElement =3D function DomElement() {
    /// <summary locid=3D"M:J#Sys.UI.DomElement.#ctor">This static class =
provides helpers to work with DOM elements.</summary>
    if (arguments.length !=3D=3D 0) throw Error.parameterCount();
    throw Error.notImplemented();
}
$type.registerClass('Sys.UI.DomElement');

$type.addCssClass =3D function DomElement$addCssClass(element, =
className) {
    /// <summary locid=3D"M:J#Sys.UI.DomElement.addCssClass">Adds a CSS =
class to an element if it doesn't already have it.</summary>
    /// <param name=3D"element" domElement=3D"true"></param>
    /// <param name=3D"className" type=3D"String">The name of the CSS =
class to add.</param>
    var e =3D Function._validateParams(arguments, [
        {name: "element", domElement: true},
        {name: "className", type: String}
    ]);
    if (e) throw e;
    if (!Sys.UI.DomElement.containsCssClass(element, className)) {
        if (element.className =3D=3D=3D '') {
            element.className =3D className;
        }
        else {
            element.className +=3D ' ' + className;
        }
    }
}

$type.containsCssClass =3D function DomElement$containsCssClass(element, =
className) {
    /// <summary =
locid=3D"M:J#Sys.UI.DomElement.containsCssClass">Determines if an =
element has the specified CSS class.</summary>
    /// <param name=3D"element" domElement=3D"true"></param>
    /// <param name=3D"className" type=3D"String">The name of the CSS =
class to test.</param>
    /// <returns type=3D"Boolean">True if the CSS class was found on the =
element.</returns>
    var e =3D Function._validateParams(arguments, [
        {name: "element", domElement: true},
        {name: "className", type: String}
    ]);
    if (e) throw e;
    return Array.contains(element.className.split(' '), className);
}

$type.getBounds =3D function DomElement$getBounds(element) {
    /// <summary locid=3D"M:J#Sys.UI.DomElement.getBounds">Gets the =
coordinates, width and height of an element.</summary>
    /// <param name=3D"element" domElement=3D"true"></param>
    /// <returns type=3D"Sys.UI.Bounds">A Bounds object with four =
fields, x, y, width and height, which contain the pixel coordinates,  =
width and height of the element.</returns>
    var e =3D Function._validateParams(arguments, [
        {name: "element", domElement: true}
    ]);
    if (e) throw e;
    var offset =3D Sys.UI.DomElement.getLocation(element);

    return new Sys.UI.Bounds(offset.x, offset.y, element.offsetWidth || =
0, element.offsetHeight || 0);
}

$get =3D $type.getElementById =3D function DomElement$getElementById(id, =
element) {
    /// <summary locid=3D"M:J#Sys.UI.DomElement.getElementById">Finds an =
element by id.</summary>
    /// <param name=3D"id" type=3D"String">The id of the element to =
find.</param>
    /// <param name=3D"element" domElement=3D"true" optional=3D"true" =
mayBeNull=3D"true"></param>
    /// <returns domElement=3D"true" mayBeNull=3D"true">The element, or =
null if it was not found.</returns>
    var e =3D Function._validateParams(arguments, [
        {name: "id", type: String},
        {name: "element", mayBeNull: true, domElement: true, optional: =
true}
    ]);
    if (e) throw e;
    return Sys.get("#" + id, element || null);
}

if (document.documentElement.getBoundingClientRect) {
    $type.getLocation =3D function DomElement$getLocation(element) {
        /// <summary locid=3D"M:J#Sys.UI.DomElement.getLocation">Gets =
the coordinates of a DOM element.</summary>
        /// <param name=3D"element" domElement=3D"true"></param>
        /// <returns type=3D"Sys.UI.Point">A Point object with two =
fields, x and y, which contain the pixel coordinates of the =
element.</returns>
        var e =3D Function._validateParams(arguments, [
            {name: "element", domElement: true}
        ]);
        if (e) throw e;
       =20
        if (element.self || element.nodeType =3D=3D=3D 9 ||
            (element =3D=3D=3D document.documentElement) ||
            (element.parentNode =3D=3D=3D =
element.ownerDocument.documentElement)) {
            return new Sys.UI.Point(0, 0);
        }       =20
       =20
        var clientRect =3D element.getBoundingClientRect();
        if (!clientRect) {
            return new Sys.UI.Point(0,0);
        }
        var ex, ownerDoc =3D element.ownerDocument, documentElement =3D =
ownerDoc.documentElement,
            offsetX =3D Math.round(clientRect.left) + =
(documentElement.scrollLeft || (ownerDoc.body ? ownerDoc.body.scrollLeft =
: 0)),
            offsetY =3D Math.round(clientRect.top) + =
(documentElement.scrollTop || (ownerDoc.body ? ownerDoc.body.scrollTop : =
0));
        if (isBrowser("InternetExplorer")) {
            try {
                var f =3D =
element.ownerDocument.parentWindow.frameElement || null;
                if (f) {
                    f =3D f.frameBorder;
                    var offset =3D (f =3D=3D=3D "0" || f =3D=3D=3D "no") =
? 2 : 0;
                    offsetX +=3D offset;
                    offsetY +=3D offset;
                }
            }
            catch(ex) {
            }
            if (Sys.Browser.version =3D=3D=3D 7 && =
!document.documentMode) {
                var body =3D document.body,
                    rect =3D body.getBoundingClientRect(),
                    zoom =3D (rect.right-rect.left) / body.clientWidth;
                zoom =3D Math.round(zoom * 100);
                zoom =3D (zoom - zoom % 5) / 100;
                if (!isNaN(zoom) && (zoom !=3D=3D 1)) {
                    offsetX =3D Math.round(offsetX / zoom);
                    offsetY =3D Math.round(offsetY / zoom);
                }
            }       =20
            if ((document.documentMode || 0) < 8) {
                offsetX -=3D documentElement.clientLeft;
                offsetY -=3D documentElement.clientTop;
            }
        }
        return new Sys.UI.Point(offsetX, offsetY);
    }
}
else if (isBrowser("Safari")) {
    $type.getLocation =3D function =
DomElement$getLocation_Safari(element) {
        /// <summary locid=3D"M:J#Sys.UI.DomElement.getLocation">Gets =
the coordinates of a DOM element.</summary>
        /// <param name=3D"element" domElement=3D"true"></param>
        /// <returns type=3D"Sys.UI.Point">A Point object with two =
fields, x and y, which contain the pixel coordinates of the =
element.</returns>
        var e =3D Function._validateParams(arguments, [
            {name: "element", domElement: true}
        ]);
        if (e) throw e;
        if ((element.window && (element.window =3D=3D=3D element)) || =
element.nodeType =3D=3D=3D 9) return new Sys.UI.Point(0,0);

        var offsetX =3D 0, offsetY =3D 0,
            parent,
            previous =3D null,
            previousStyle =3D null,
            currentStyle;
        for (parent =3D element; parent; previous =3D parent, =
previousStyle =3D currentStyle, parent =3D parent.offsetParent) {
            currentStyle =3D Sys.UI.DomElement._getCurrentStyle(parent);
            var tagName =3D parent.tagName ? =
parent.tagName.toUpperCase() : null;

            if ((parent.offsetLeft || parent.offsetTop) &&
                ((tagName !=3D=3D "BODY") || (!previousStyle || =
previousStyle.position !=3D=3D "absolute"))) {
                offsetX +=3D parent.offsetLeft;
                offsetY +=3D parent.offsetTop;
            }

            if (previous && Sys.Browser.version >=3D 3) {
                offsetX +=3D parseInt(currentStyle.borderLeftWidth);
                offsetY +=3D parseInt(currentStyle.borderTopWidth);
            }
        }

        currentStyle =3D Sys.UI.DomElement._getCurrentStyle(element);
        var elementPosition =3D currentStyle ? currentStyle.position : =
null;
        if (elementPosition !=3D=3D "absolute") {
            for (parent =3D element.parentNode; parent; parent =3D =
parent.parentNode) {
                tagName =3D parent.tagName ? =
parent.tagName.toUpperCase() : null;

                if ((tagName !=3D=3D "BODY") && (tagName !=3D=3D "HTML") =
&& (parent.scrollLeft || parent.scrollTop)) {
                    offsetX -=3D (parent.scrollLeft || 0);
                    offsetY -=3D (parent.scrollTop || 0);
                }
                currentStyle =3D =
Sys.UI.DomElement._getCurrentStyle(parent);
                var parentPosition =3D currentStyle ? =
currentStyle.position : null;

                if (parentPosition && (parentPosition =3D=3D=3D =
"absolute")) break;
            }
        }
        return new Sys.UI.Point(offsetX, offsetY);
    }
}
else {
    $type.getLocation =3D function =
DomElement$getLocation_Generic(element) {
        /// <summary locid=3D"M:J#Sys.UI.DomElement.getLocation">Gets =
the coordinates of a DOM element.</summary>
        /// <param name=3D"element" domElement=3D"true"></param>
        /// <returns type=3D"Sys.UI.Point">A Point object with two =
fields, x and y, which contain the pixel coordinates of the =
element.</returns>
        var e =3D Function._validateParams(arguments, [
            {name: "element", domElement: true}
        ]);
        if (e) throw e;
        if ((element.window && (element.window =3D=3D=3D element)) || =
element.nodeType =3D=3D=3D 9) return new Sys.UI.Point(0,0);

        var offsetX =3D 0, offsetY =3D 0,
            parent,
            previous =3D null,
            previousStyle =3D null,
            currentStyle =3D null;
        for (parent =3D element; parent; previous =3D parent, =
previousStyle =3D currentStyle, parent =3D parent.offsetParent) {
            var tagName =3D parent.tagName ? =
parent.tagName.toUpperCase() : null;
            currentStyle =3D Sys.UI.DomElement._getCurrentStyle(parent);

            if ((parent.offsetLeft || parent.offsetTop) &&
                !((tagName =3D=3D=3D "BODY") &&
                (!previousStyle || previousStyle.position !=3D=3D =
"absolute"))) {

                offsetX +=3D parent.offsetLeft;
                offsetY +=3D parent.offsetTop;
            }

            if (previous !=3D=3D null && currentStyle) {
                if ((tagName !=3D=3D "TABLE") && (tagName !=3D=3D "TD") =
&& (tagName !=3D=3D "HTML")) {
                    offsetX +=3D parseInt(currentStyle.borderLeftWidth) =
|| 0;
                    offsetY +=3D parseInt(currentStyle.borderTopWidth) =
|| 0;
                }
                if (tagName =3D=3D=3D "TABLE" &&
                    (currentStyle.position =3D=3D=3D "relative" || =
currentStyle.position =3D=3D=3D "absolute")) {
                    offsetX +=3D parseInt(currentStyle.marginLeft) || 0;
                    offsetY +=3D parseInt(currentStyle.marginTop) || 0;
                }
            }
        }

        currentStyle =3D Sys.UI.DomElement._getCurrentStyle(element);
        var elementPosition =3D currentStyle ? currentStyle.position : =
null;
        if (elementPosition !=3D=3D "absolute") {
            for (parent =3D element.parentNode; parent; parent =3D =
parent.parentNode) {
                tagName =3D parent.tagName ? =
parent.tagName.toUpperCase() : null;

                if ((tagName !=3D=3D "BODY") && (tagName !=3D=3D "HTML") =
&& (parent.scrollLeft || parent.scrollTop)) {

                    offsetX -=3D (parent.scrollLeft || 0);
                    offsetY -=3D (parent.scrollTop || 0);

                    currentStyle =3D =
Sys.UI.DomElement._getCurrentStyle(parent);
                    if (currentStyle) {
                        offsetX +=3D =
parseInt(currentStyle.borderLeftWidth) || 0;
                        offsetY +=3D =
parseInt(currentStyle.borderTopWidth) || 0;
                    }
                }
            }
        }
        return new Sys.UI.Point(offsetX, offsetY);
    }
}

$type.isDomElement =3D function DomElement$isDomElement(obj) {
    /// <summary locid=3D"M:J#Sys.UI.DomElement.isDomElement">Determines =
if the given argument is a DOM element.</summary>
    /// <param name=3D"obj"></param>
    /// <returns type=3D"Boolean">True if the object is a DOM element, =
otherwise false.</returns>
    var e =3D Function._validateParams(arguments, [
        {name: "obj"}
    ]);
    if (e) throw e;
    return Sys._isDomElement(obj);
}

$type.removeCssClass =3D function DomElement$removeCssClass(element, =
className) {
    /// <summary locid=3D"M:J#Sys.UI.DomElement.removeCssClass">Removes =
a CSS class from an element.</summary>
    /// <param name=3D"element" domElement=3D"true"></param>
    /// <param name=3D"className" type=3D"String">The name of the CSS =
class to remove.</param>
    var e =3D Function._validateParams(arguments, [
        {name: "element", domElement: true},
        {name: "className", type: String}
    ]);
    if (e) throw e;
    var currentClassName =3D ' ' + element.className + ' ';
    var index =3D currentClassName.indexOf(' ' + className + ' ');
    if (index >=3D 0) {
        element.className =3D (currentClassName.substr(0, index) + ' ' +
            currentClassName.substring(index + className.length + 1, =
currentClassName.length)).trim();
    }
}

$type.resolveElement =3D function =
DomElement$resolveElement(elementOrElementId, containerElement) {
    /// <summary locid=3D"M:J#Sys.UI.DomElement.resolveElement">Returns =
the element with the specified Id in the specified container, or the =
element if it is already an element.</summary>
    /// <param name=3D"elementOrElementId" mayBeNull=3D"true"></param>
    /// <param name=3D"containerElement" domElement=3D"true" =
optional=3D"true" mayBeNull=3D"true"></param>
    /// <returns domElement=3D"true"></returns>
    var e =3D Function._validateParams(arguments, [
        {name: "elementOrElementId", mayBeNull: true},
        {name: "containerElement", mayBeNull: true, domElement: true, =
optional: true}
    ]);
    if (e) throw e;
    var el =3D elementOrElementId;
    if (!el) return null;
    if (typeof(el) =3D=3D=3D "string") {
        el =3D Sys.get("#" + el, containerElement);
        if (!el) {
            throw Error.argument("elementOrElementId", =
String.format(Sys.Res.elementNotFound, elementOrElementId));
        }
    }
    else if(!Sys.UI.DomElement.isDomElement(el)) {
        throw Error.argument("elementOrElementId", =
Sys.Res.expectedElementOrId);
    }
    return el;
}

$type.raiseBubbleEvent =3D function DomElement$raiseBubbleEvent(source, =
args) {
    /// <summary locid=3D"M:J#Sys.UI.DomElement.raiseBubbleEvent">Raises =
a bubble event.</summary>
    /// <param name=3D"source" domElement=3D"true">The DOM element that =
triggers the event.</param>
    /// <param name=3D"args" type=3D"Sys.EventArgs">The event =
arguments.</param>
    var e =3D Function._validateParams(arguments, [
        {name: "source", domElement: true},
        {name: "args", type: Sys.EventArgs}
    ]);
    if (e) throw e;
    var target =3D source;
    while (target) {
        var control =3D target.control;
        if (control && control.onBubbleEvent && =
control.raiseBubbleEvent) {
            if (!control.onBubbleEvent(source, args)) {
                control._raiseBubbleEvent(source, args);
            }
            return;
        }
        target =3D target.parentNode;
    }
}

$type._ensureGet =3D function DomElement$_ensureGet(selector, context, =
arg) {
    var ret =3D Sys.get(selector, context);
    if (!ret && typeof(selector) =3D=3D=3D "string") {
        throw =
Error.invalidOperation(String.format(Sys.Res.selectorNotFound, =
selector));
    }
    else if (ret && !this.isDomElement(ret)) {
        throw =
Error.invalidOperation(String.format(Sys.Res.expectedDomElementOrSelector=
, arg));
    }
    return ret;
}

$type.setLocation =3D function DomElement$setLocation(element, x, y) {
    /// <summary locid=3D"M:J#Sys.UI.DomElement.setLocation">Sets the =
position of an element.</summary>
    /// <param name=3D"element" domElement=3D"true"></param>
    /// <param name=3D"x" type=3D"Number" integer=3D"true"></param>
    /// <param name=3D"y" type=3D"Number" integer=3D"true"></param>
    var e =3D Function._validateParams(arguments, [
        {name: "element", domElement: true},
        {name: "x", type: Number, integer: true},
        {name: "y", type: Number, integer: true}
    ]);
    if (e) throw e;
    var style =3D element.style;
    style.position =3D 'absolute';
    style.left =3D x + "px";
    style.top =3D y + "px";
}

$type.toggleCssClass =3D function DomElement$toggleCssClass(element, =
className) {
    /// <summary locid=3D"M:J#Sys.UI.DomElement.toggleCssClass">Toggles =
a CSS class on and off o an element.</summary>
    /// <param name=3D"element" domElement=3D"true"></param>
    /// <param name=3D"className" type=3D"String">The name of the CSS =
class to toggle.</param>
    var e =3D Function._validateParams(arguments, [
        {name: "element", domElement: true},
        {name: "className", type: String}
    ]);
    if (e) throw e;
    if (Sys.UI.DomElement.containsCssClass(element, className)) {
        Sys.UI.DomElement.removeCssClass(element, className);
    }
    else {
        Sys.UI.DomElement.addCssClass(element, className);
    }
}

$type.getVisibilityMode =3D function =
DomElement$getVisibilityMode(element) {
    /// <summary =
locid=3D"M:J#Sys.UI.DomElement.getVisibilityMode"></summary>
    /// <param name=3D"element" domElement=3D"true"></param>
    /// <returns type=3D"Sys.UI.VisibilityMode"></returns>
    var e =3D Function._validateParams(arguments, [
        {name: "element", domElement: true}
    ]);
    if (e) throw e;
    return (element._visibilityMode =3D=3D=3D =
Sys.UI.VisibilityMode.hide) ?
        Sys.UI.VisibilityMode.hide :
        Sys.UI.VisibilityMode.collapse;
}
$type.setVisibilityMode =3D function =
DomElement$setVisibilityMode(element, value) {
    /// <summary =
locid=3D"M:J#Sys.UI.DomElement.setVisibilityMode"></summary>
    /// <param name=3D"element" domElement=3D"true"></param>
    /// <param name=3D"value" type=3D"Sys.UI.VisibilityMode"></param>
    var e =3D Function._validateParams(arguments, [
        {name: "element", domElement: true},
        {name: "value", type: Sys.UI.VisibilityMode}
    ]);
    if (e) throw e;
    Sys.UI.DomElement._ensureOldDisplayMode(element);
    if (element._visibilityMode !=3D=3D value) {
        element._visibilityMode =3D value;
        if (Sys.UI.DomElement.getVisible(element) =3D=3D=3D false) {
            element.style.display =3D (value =3D=3D=3D =
Sys.UI.VisibilityMode.hide) ? element._oldDisplayMode : 'none';
        }
    }
}

$type.getVisible =3D function DomElement$getVisible(element) {
    /// <summary locid=3D"M:J#Sys.UI.DomElement.getVisible"></summary>
    /// <param name=3D"element" domElement=3D"true"></param>
    /// <returns type=3D"Boolean"></returns>
    var e =3D Function._validateParams(arguments, [
        {name: "element", domElement: true}
    ]);
    if (e) throw e;
    var style =3D element.currentStyle || =
Sys.UI.DomElement._getCurrentStyle(element);
    return style ? (style.visibility !=3D=3D 'hidden') && (style.display =
!=3D=3D 'none') : true;
}
$type.setVisible =3D function DomElement$setVisible(element, value) {
    /// <summary locid=3D"M:J#Sys.UI.DomElement.setVisible"></summary>
    /// <param name=3D"element" domElement=3D"true"></param>
    /// <param name=3D"value" type=3D"Boolean"></param>
    var e =3D Function._validateParams(arguments, [
        {name: "element", domElement: true},
        {name: "value", type: Boolean}
    ]);
    if (e) throw e;
    if (value !=3D=3D Sys.UI.DomElement.getVisible(element)) {
        Sys.UI.DomElement._ensureOldDisplayMode(element);
        var style =3D element.style;
        style.visibility =3D value ? 'visible' : 'hidden';
        style.display =3D (value || (element._visibilityMode =3D=3D=3D =
Sys.UI.VisibilityMode.hide)) ? element._oldDisplayMode : 'none';
    }
}

$type.setCommand =3D function DomElement$setCommand(commandSource, =
commandName, commandArgument, commandTarget) {
    /// <summary locid=3D"M:J#Sys.UI.DomElement.setCommand">Causes a DOM =
element to raise a bubble event when clicked.</summary>
    /// <param name=3D"commandSource">The DOM element, array of DOM =
elements, or DOM element selectors that causes the event when =
clicked.</param>
    /// <param name=3D"commandName" type=3D"String" =
mayBeNull=3D"true">The name of the command to raise.</param>
    /// <param name=3D"commandArgument" mayBeNull=3D"true" =
optional=3D"true">Optional command argument.</param>
    /// <param name=3D"commandTarget" optional=3D"true" =
mayBeNull=3D"true">DOM element from which the command should start =
bubbling up.</param>
    var e =3D Function._validateParams(arguments, [
        {name: "commandSource"},
        {name: "commandName", type: String, mayBeNull: true},
        {name: "commandArgument", mayBeNull: true, optional: true},
        {name: "commandTarget", mayBeNull: true, optional: true}
    ]);
    if (e) throw e;
    Sys.UI.DomEvent.addHandler(commandSource, 'click', function(ev) {
        var source =3D commandTarget || this;
        Sys.UI.DomElement.raiseBubbleEvent(source, new =
Sys.CommandEventArgs(commandName, commandArgument, this, ev));=20
    }, true /*autoRemove*/);
}

Sys.registerPlugin({
    name: "setCommand",
    dom: true,
    returnType: "Sys.ElementSet",
    description: "Causes a DOM element to raise a bubble event when =
clicked.",
    parameters: [
        {name: "commandName", type:"String", description: "The name of =
the command to raise."},
        {name: "commandArgument", description: "Optional command =
argument."},
        {name: "commandTarget", description: "DOM element from which the =
command should start bubbling up."}
    ],
    plugin: function(commandName, commandArgument, commandTarget) {
        var e =3D Function._validateParams(arguments, [
            {name: "commandName", type: String, mayBeNull: true},
            {name: "commandArgument", mayBeNull: true, optional: true},
            {name: "commandTarget", mayBeNull: true, optional: true}
        ]);
        if (e) throw e;
        return this.addHandler('click', function(ev) {
            var source =3D commandTarget || this;
            Sys.UI.DomElement.raiseBubbleEvent(source, new =
Sys.CommandEventArgs(commandName, commandArgument, this, ev));=20
        }, true /*autoRemove*/);
    }
});

$type._ensureOldDisplayMode =3D function =
DomElement$_ensureOldDisplayMode(element) {
    if (!element._oldDisplayMode) {
        var style =3D element.currentStyle || =
this._getCurrentStyle(element);
        element._oldDisplayMode =3D style ? style.display : null;
        if (!element._oldDisplayMode || element._oldDisplayMode =
=3D=3D=3D 'none') {
            var tagName =3D element.tagName,
                mode =3D 'inline';
            if =
(/^(DIV|P|ADDRESS|BLOCKQUOTE|BODY|COL|COLGROUP|DD|DL|DT|FIELDSET|FORM|H1|=
H2|H3|H4|H5|H6|HR|IFRAME|LEGEND|OL|PRE|TABLE|TD|TH|TR|UL)$/i.test(tagName=
)) {
                mode =3D 'block';
            }
            else if (tagName.toUpperCase() =3D=3D=3D "LI") {
                mode =3D 'list-item';
            }
            element._oldDisplayMode =3D mode;
        }
    }
}

$type._getWindow =3D function DomElement$_getWindow(element) {
    var doc =3D element.ownerDocument || element.document || element;
    return doc.defaultView || doc.parentWindow;
}

$type._getCurrentStyle =3D function DomElement$_getCurrentStyle(element) =
{
    if (element.nodeType =3D=3D=3D 3) return null;
    var w =3D this._getWindow(element);
    if (element.documentElement) element =3D element.documentElement;
    var computedStyle =3D (w && (element !=3D=3D w) && =
w.getComputedStyle) ?
        w.getComputedStyle(element, null) :
        element.currentStyle || element.style;
    return computedStyle;
}

$type._onDispose =3D function DomElement$_onDispose(element, fn) {
    var queue, d =3D element.dispose;
    if (d !=3D=3D Sys.UI.DomElement._dispose) {
        element.dispose =3D Sys.UI.DomElement._dispose;
        element.__msajaxdispose =3D queue =3D [];
        if (typeof(d) =3D=3D=3D "function") {
            queue.push(d);
        }
    }
    else {
        queue =3D element.__msajaxdispose;
    }
    queue.push(fn);
}

$type._dispose =3D function DomElement$_dispose() {
    var queue =3D this.__msajaxdispose;
    if (queue) {
        for (var i =3D 0, l =3D queue.length; i < l; i++) {
            queue[i].apply(this);
        }
    }
    if (this.control && typeof(this.control.dispose) =3D=3D=3D =
"function") {
        this.control.dispose();
    }
    this.__msajaxdispose =3D null;
    this.dispose =3D null;
}
$type =3D Sys.IContainer =3D function IContainer() {
    throw Error.notImplemented();
}
$type.prototype =3D {
    addComponent: function IContainer$addComponent(component) {
        /// <summary =
locid=3D"M:J#Sys.IContainer.addComponent"></summary>
        /// <param name=3D"component" type=3D"Sys.Component"></param>
        var e =3D Function._validateParams(arguments, [
            {name: "component", type: Sys.Component}
        ]);
        if (e) throw e;
        throw Error.notImplemented();
    },
    removeComponent: function IContainer$removeComponent(component) {
        /// <summary =
locid=3D"M:J#Sys.IContainer.removeComponent"></summary>
        /// <param name=3D"component" type=3D"Sys.Component"></param>
        var e =3D Function._validateParams(arguments, [
            {name: "component", type: Sys.Component}
        ]);
        if (e) throw e;
        throw Error.notImplemented();
    },
    findComponent: function IContainer$findComponent(id) {
        /// <summary =
locid=3D"M:J#Sys.IContainer.findComponent"></summary>
        /// <param name=3D"id" type=3D"String"></param>
        /// <returns type=3D"Sys.Component"></returns>
        var e =3D Function._validateParams(arguments, [
            {name: "id", type: String}
        ]);
        if (e) throw e;
        throw Error.notImplemented();
    },
    getComponents: function IContainer$getComponents() {
        /// <summary =
locid=3D"M:J#Sys.IContainer.getComponents"></summary>
        /// <returns type=3D"Array" =
elementType=3D"Sys.Component"></returns>
        if (arguments.length !=3D=3D 0) throw Error.parameterCount();
        throw Error.notImplemented();
    }
}
$type.registerInterface("Sys.IContainer");

$type =3D Sys.ApplicationLoadEventArgs =3D function =
ApplicationLoadEventArgs(components, isPartialLoad) {
    /// <summary =
locid=3D"M:J#Sys.ApplicationLoadEventArgs.#ctor"></summary>
    /// <param name=3D"components" type=3D"Array" =
elementType=3D"Sys.Component">The list of components that were created =
since the last time the load event was raised.</param>
    /// <param name=3D"isPartialLoad" type=3D"Boolean">True if the page =
is partially loading.</param>
    var e =3D Function._validateParams(arguments, [
        {name: "components", type: Array, elementType: Sys.Component},
        {name: "isPartialLoad", type: Boolean}
    ]);
    if (e) throw e;
    Sys.ApplicationLoadEventArgs.initializeBase(this);
    this._components =3D components;
    this._isPartialLoad =3D isPartialLoad;
}
$type.prototype =3D {
    get_components: function ApplicationLoadEventArgs$get_components() {
        /// <value type=3D"Array" elementType=3D"Sys.Component" =
locid=3D"P:J#Sys.ApplicationLoadEventArgs.components">The list of =
components that were created since the last time the load event was =
raised.</value>
        if (arguments.length !=3D=3D 0) throw Error.parameterCount();
        return this._components;
    },
    get_isPartialLoad: function =
ApplicationLoadEventArgs$get_isPartialLoad() {
        /// <value type=3D"Boolean" =
locid=3D"P:J#Sys.ApplicationLoadEventArgs.isPartialLoad">True if the =
page is partially loading.</value>
        if (arguments.length !=3D=3D 0) throw Error.parameterCount();
        return this._isPartialLoad;
    }
}
$type.registerClass('Sys.ApplicationLoadEventArgs', Sys.EventArgs);
$type =3D Sys._Application =3D function _Application() {
    /// <summary locid=3D"M:J#Sys.Application.#ctor"></summary>
    if (arguments.length !=3D=3D 0) throw Error.parameterCount();
    Sys._Application.initializeBase(this);

    this._disposableObjects =3D [];
    this._components =3D {};
    this._createdComponents =3D [];
    this._secondPassComponents =3D [];

    this._unloadHandlerDelegate =3D Function.createDelegate(this, =
this._unloadHandler);
    Sys.UI.DomEvent.addHandler(window, "unload", =
this._unloadHandlerDelegate);
}
$type.prototype =3D {
    _deleteCount: 0,

    get_isCreatingComponents: function =
_Application$get_isCreatingComponents() {
        /// <value type=3D"Boolean" =
locid=3D"P:J#Sys.Application.isCreatingComponents"></value>
        if (arguments.length !=3D=3D 0) throw Error.parameterCount();
        return !!this._creatingComponents;
    },
    get_isDisposing: function _Application$get_isDisposing() {
        /// <value type=3D"Boolean" =
locid=3D"P:J#Sys.Application.isDisposing"></value>
        if (arguments.length !=3D=3D 0) throw Error.parameterCount();
        return !!this._disposing;
    },
    add_init: function _Application$add_init(handler) {
        /// <summary locid=3D"E:J#Sys.Application.init"></summary>
        var e =3D Function._validateParams(arguments, [{name: "handler", =
type: Function}]);
        if (e) throw e;
        if (this._initialized) {
            handler(this, Sys.EventArgs.Empty);
        }
        else {
            this._addHandler("init", handler);
        }
    },
    remove_init: function _Application$remove_init(handler) {
        var e =3D Function._validateParams(arguments, [{name: "handler", =
type: Function}]);
        if (e) throw e;
        this._removeHandler("init", handler);
    },
    add_load: function _Application$add_load(handler) {
        /// <summary locid=3D"E:J#Sys.Application.load"></summary>
        var e =3D Function._validateParams(arguments, [{name: "handler", =
type: Function}]);
        if (e) throw e;
        this._addHandler("load", handler);
    },
    remove_load: function _Application$remove_load(handler) {
        var e =3D Function._validateParams(arguments, [{name: "handler", =
type: Function}]);
        if (e) throw e;
        this._removeHandler("load", handler);
    },
    add_unload: function _Application$add_unload(handler) {
        /// <summary locid=3D"E:J#Sys.Application.unload"></summary>
        var e =3D Function._validateParams(arguments, [{name: "handler", =
type: Function}]);
        if (e) throw e;
        this._addHandler("unload", handler);
    },
    remove_unload: function _Application$remove_unload(handler) {
        var e =3D Function._validateParams(arguments, [{name: "handler", =
type: Function}]);
        if (e) throw e;
        this._removeHandler("unload", handler);
    },
    addComponent: function _Application$addComponent(component) {
        /// <summary locid=3D"M:J#Sys.Application.addComponent">Adds a =
top-level component to the application.</summary>
        /// <param name=3D"component" type=3D"Sys.Component">The =
component to add.</param>
        var e =3D Function._validateParams(arguments, [
            {name: "component", type: Sys.Component}
        ]);
        if (e) throw e;
        var id =3D component.get_id();
        if (!id) throw Error.invalidOperation(Sys.Res.cantAddWithoutId);
        if (typeof(this._components[id]) !=3D=3D 'undefined') throw =
Error.invalidOperation(String.format(Sys.Res.appDuplicateComponent, =
id));
        this._components[id] =3D component;
    },
    beginCreateComponents: function _Application$beginCreateComponents() =
{
        /// <summary =
locid=3D"M:J#Sys.Application.beginCreateComponents"></summary>
        if (arguments.length !=3D=3D 0) throw Error.parameterCount();
        this._creatingComponents =3D true;
    },
    dispose: function _Application$dispose() {
        /// <summary locid=3D"M:J#Sys.Application.dispose"></summary>
        if (arguments.length !=3D=3D 0) throw Error.parameterCount();
        if (!this._disposing) {
            this._disposing =3D true;
            if (this._timerCookie) {
                window.clearTimeout(this._timerCookie);
                delete this._timerCookie;
            }
            var endHandler =3D this._endRequestHandler;
            var beginHandler =3D this._beginRequestHandler;
            if (endHandler || beginHandler) {
                var prm =3D =
Sys.WebForms.PageRequestManager.getInstance();
                if (endHandler) prm.remove_endRequest(endHandler);
                if (beginHandler) prm.remove_beginRequest(beginHandler);
                delete this._endRequestHandler;
                delete this._beginRequestHandler;
            }
            if (window.pageUnload) {
                window.pageUnload(this, Sys.EventArgs.Empty);
            }
            Sys.Observer.raiseEvent(this, "unload");
            var disposableObjects =3D =
Array.clone(this._disposableObjects);
            for (var i =3D 0, l =3D disposableObjects.length; i < l; =
i++) {
                var object =3D disposableObjects[i];
                if (typeof(object) !=3D=3D "undefined") {
                    object.dispose();
                }
            }
            this._disposableObjects.length =3D 0;

            Sys.UI.DomEvent.removeHandler(window, "unload", =
this._unloadHandlerDelegate);

            if (Sys._ScriptLoader) {
                var sl =3D Sys._ScriptLoader.getInstance();
                if (sl) {
                    sl.dispose();
                }
            }

            Sys._Application.callBaseMethod(this, 'dispose');
        }
    },
    disposeElement: function _Application$disposeElement(element, =
childNodesOnly) {
        /// <summary =
locid=3D"M:J#Sys._Application.disposeElement">Disposes of control and =
behavior resources associated with an element and its child =
nodes.</summary>
        /// <param name=3D"element">The element to dispose.</param>
        /// <param name=3D"childNodesOnly" type=3D"Boolean">Whether to =
dispose of the element and its child nodes or only its child =
nodes.</param>
        var e =3D Function._validateParams(arguments, [
            {name: "element"},
            {name: "childNodesOnly", type: Boolean}
        ]);
        if (e) throw e;
        if (element.nodeType =3D=3D=3D 1) {
            var d, c, i, list,
                allElements =3D element.getElementsByTagName("*"),
                length =3D allElements.length,
                children =3D new Array(length);
            for (i =3D 0; i < length; i++) {
                children[i] =3D allElements[i];
            }
            for (i =3D length - 1; i >=3D 0; i--) {
                var child =3D children[i];
                d =3D child.dispose;
                if (d && typeof(d) =3D=3D=3D "function") {
                    child.dispose();
                }
                else {
                    c =3D child.control;
                    if (c && typeof(c.dispose) =3D=3D=3D "function") {
                        c.dispose();
                    }
                }
                list =3D child._behaviors;
                if (list) {
                    this._disposeComponents(list);
                }
                list =3D child._components;
                if (list) {
                    this._disposeComponents(list);
                    child._components =3D null;
                }
            }
            if (!childNodesOnly) {
                d =3D element.dispose;
                if (d && typeof(d) =3D=3D=3D "function") {
                    element.dispose();
                }
                else {
                    c =3D element.control;
                    if (c && typeof(c.dispose) =3D=3D=3D "function") {
                        c.dispose();
                    }
                }
                list =3D element._behaviors;
                if (list) {
                    this._disposeComponents(list);
                }
                list =3D element._components;
                if (list) {
                    this._disposeComponents(list);
                    element._components =3D null;
                }
            }
        }
    },   =20
    endCreateComponents: function _Application$endCreateComponents() {
        /// <summary =
locid=3D"M:J#Sys.Application.endCreateComponents"></summary>
        if (arguments.length !=3D=3D 0) throw Error.parameterCount();
        var components =3D this._secondPassComponents;
        for (var i =3D 0, l =3D components.length; i < l; i++) {
            var entry =3D components[i],
                component =3D entry.component;
            Sys.Component._setReferences(component, entry.references);
            component.endUpdate();
        }
        this._secondPassComponents =3D [];
        this._creatingComponents =3D false;
    },
    findComponent: function _Application$findComponent(id, parent) {
        /// <summary locid=3D"M:J#Sys.Application.findComponent">Finds =
top-level components that were added through addComponent if no parent =
is specified  or children of the specified parent. If parent is a =
component</summary>
        /// <param name=3D"id" type=3D"String">The id of the component =
to find.</param>
        /// <param name=3D"parent" optional=3D"true" =
mayBeNull=3D"true">The component or element that contains the component =
to find.  If not specified or null, the search is made on =
Application.</param>
        /// <returns type=3D"Sys.Component" mayBeNull=3D"true">The =
component, or null if it wasn't found.</returns>
        var e =3D Function._validateParams(arguments, [
            {name: "id", type: String},
            {name: "parent", mayBeNull: true, optional: true}
        ]);
        if (e) throw e;
        return (parent ?
            ((Sys.IContainer.isInstanceOfType(parent)) ?
                parent.findComponent(id) :
                parent[id] || null) :
            Sys.Application._components[id] || null);
    },
    getComponents: function _Application$getComponents() {
        /// <summary =
locid=3D"M:J#Sys.Application.getComponents"></summary>
        /// <returns type=3D"Array" =
elementType=3D"Sys.Component"></returns>
        if (arguments.length !=3D=3D 0) throw Error.parameterCount();
        var res =3D [];
        var components =3D this._components;
        for (var name in components) {
            if (components.hasOwnProperty(name)) {
                res.push(components[name]);
            }
        }
        return res;
    },
    initialize: function _Application$initialize() {
        /// <summary locid=3D"M:J#Sys.Application.initialize"></summary>
        if (arguments.length !=3D=3D 0) throw Error.parameterCount();
        window.setTimeout(Function.createDelegate(this, =
this._doInitialize), 0);
    },
    _doInitialize: function _Application$_doInitialize() {
        if(!this.get_isInitialized() && !this._disposing) {
            Sys._Application.callBaseMethod(this, 'initialize');
            this._raiseInit();
            if (this.get_stateString) {
                if (Sys.WebForms && Sys.WebForms.PageRequestManager) {
                    var prm =3D =
Sys.WebForms.PageRequestManager.getInstance();
                    this._beginRequestHandler =3D =
Function.createDelegate(this, this._onPageRequestManagerBeginRequest);
                    prm.add_beginRequest(this._beginRequestHandler);
                    this._endRequestHandler =3D =
Function.createDelegate(this, this._onPageRequestManagerEndRequest);
                    prm.add_endRequest(this._endRequestHandler);
                }
                var loadedEntry =3D this.get_stateString();
                if (loadedEntry !=3D=3D this._currentEntry) {
                    this._navigate(loadedEntry);
                }
                else {
                    this._ensureHistory();
                }
            }
            this.raiseLoad();
        }
    },
    notifyScriptLoaded: function _Application$notifyScriptLoaded() {
        /// <summary =
locid=3D"M:J#Sys.Application.notifyScriptLoaded">Called by referenced =
scripts to indicate that they have completed loading. =
[Obsolete]</summary>
        if (arguments.length !=3D=3D 0) throw Error.parameterCount();
    },
    registerDisposableObject: function =
_Application$registerDisposableObject(object) {
        /// <summary =
locid=3D"M:J#Sys.Application.registerDisposableObject">Registers a =
disposable object with the application.</summary>
        /// <param name=3D"object" type=3D"Sys.IDisposable">The object =
to register.</param>
        var e =3D Function._validateParams(arguments, [
            {name: "object", type: Sys.IDisposable}
        ]);
        if (e) throw e;
        if (!this._disposing) {
            var objects =3D this._disposableObjects,
                i =3D objects.length;
            objects[i] =3D object;
            object.__msdisposeindex =3D i;
        }
    },
    raiseLoad: function _Application$raiseLoad() {
        /// <summary locid=3D"M:J#Sys.Application.raiseLoad"></summary>
        if (arguments.length !=3D=3D 0) throw Error.parameterCount();
        var args =3D new =
Sys.ApplicationLoadEventArgs(Array.clone(this._createdComponents), =
!!this._loaded);
        this._loaded =3D true;
        Sys.Observer.raiseEvent(this, "load", args);
        if (window.pageLoad) {
            window.pageLoad(this, args);
        }
        this._createdComponents =3D [];
    },
    removeComponent: function _Application$removeComponent(component) {
        /// <summary =
locid=3D"M:J#Sys.Application.removeComponent">Removes a top-level =
component from the application.</summary>
        /// <param name=3D"component" type=3D"Sys.Component">The =
component to remove.</param>
        var e =3D Function._validateParams(arguments, [
            {name: "component", type: Sys.Component}
        ]);
        if (e) throw e;
        var id =3D component.get_id();
        if (id) delete this._components[id];
    },
    unregisterDisposableObject: function =
_Application$unregisterDisposableObject(object) {
        /// <summary =
locid=3D"M:J#Sys.Application.unregisterDisposableObject">Unregisters a =
disposable object from the application.</summary>
        /// <param name=3D"object" type=3D"Sys.IDisposable">The object =
to unregister.</param>
        var e =3D Function._validateParams(arguments, [
            {name: "object", type: Sys.IDisposable}
        ]);
        if (e) throw e;
        if (!this._disposing) {
            var i =3D object.__msdisposeindex;
            if (typeof(i) =3D=3D=3D "number") {
                var disposableObjects =3D this._disposableObjects;
                delete disposableObjects[i];
                delete object.__msdisposeindex;
                if (++this._deleteCount > 1000) {
                    var newArray =3D [];
                    for (var j =3D 0, l =3D disposableObjects.length; j =
< l; j++) {
                        object =3D disposableObjects[j];
                        if (typeof(object) !=3D=3D "undefined") {
                            object.__msdisposeindex =3D newArray.length;
                            newArray.push(object);
                        }
                    }
                    this._disposableObjects =3D newArray;
                    this._deleteCount =3D 0;
                }
            }
        }
    },
    _addComponentToSecondPass: function =
_Application$_addComponentToSecondPass(component, references) {
        this._secondPassComponents.push({component: component, =
references: references});
    },
    _disposeComponents: function _Application$_disposeComponents(list) {
        if (list) {
            for (var i =3D list.length - 1; i >=3D 0; i--) {
                var item =3D list[i];
                if (typeof(item.dispose) =3D=3D=3D "function") {
                    item.dispose();
                }
            }
        }
    },
    _raiseInit: function _Application$_raiseInit() {
        this.beginCreateComponents();
        Sys.Observer.raiseEvent(this, "init");
        this.endCreateComponents();
    },
    _unloadHandler: function _Application$_unloadHandler(event) {
        this.dispose();
    }
}
$type.registerClass('Sys._Application', Sys.Component, Sys.IContainer);

Sys.Application =3D new Sys._Application();
window.$find =3D Sys.Application.findComponent;

Sys.onReady(function() {
    Sys.Application._doInitialize();
});


$type =3D Sys.UI.Behavior =3D function Behavior(element) {
    /// <summary locid=3D"M:J#Sys.UI.Behavior.#ctor"></summary>
    /// <param name=3D"element" domElement=3D"true">The DOM element the =
behavior is associated with.</param>
    var e =3D Function._validateParams(arguments, [
        {name: "element", domElement: true}
    ]);
    if (e) throw e;
    Sys.UI.Behavior.initializeBase(this);
    this._element =3D element;
    var behaviors =3D (element._behaviors =3D element._behaviors || []);
    behaviors.push(this);
}
$type.prototype =3D {
    get_element: function Behavior$get_element() {
        /// <value domElement=3D"true" =
locid=3D"P:J#Sys.UI.Behavior.element">The DOM element this behavior is =
associated with</value>
        if (arguments.length !=3D=3D 0) throw Error.parameterCount();
        return this._element;
    },
    get_id: function Behavior$get_id() {
        /// <value type=3D"String" =
locid=3D"P:J#Sys.UI.Behavior.id"></value>
        if (arguments.length !=3D=3D 0) throw Error.parameterCount();
        var baseId =3D Sys.UI.Behavior.callBaseMethod(this, 'get_id');
        if (baseId) return baseId;
        var element =3D this._element;
        if (!element || !element.id) return '';
        return element.id + '$' + this.get_name();
    },
    get_name: function Behavior$get_name() {
        /// <value type=3D"String" =
locid=3D"P:J#Sys.UI.Behavior.name"></value>
        if (arguments.length !=3D=3D 0) throw Error.parameterCount();
        if (this._name) return this._name;
        var name =3D Object.getTypeName(this);
        var i =3D name.lastIndexOf('.');
        if (i >=3D 0) name =3D name.substr(i + 1);
        if (!this._initialized) this._name =3D name;
        return name;
    },
    set_name: function Behavior$set_name(value) {
        var e =3D Function._validateParams(arguments, [{name: "value", =
type: String}]);
        if (e) throw e;
        if ((value =3D=3D=3D '') || (value.charAt(0) =3D=3D=3D ' ') || =
(value.charAt(value.length - 1) =3D=3D=3D ' '))
            throw Error.argument('value', Sys.Res.invalidId);
        if (typeof(this._element[value]) !=3D=3D 'undefined')
            throw =
Error.invalidOperation(String.format(Sys.Res.behaviorDuplicateName, =
value));
        if (this.get_isInitialized()) throw =
Error.invalidOperation(Sys.Res.cantSetNameAfterInit);
        this._name =3D value;
    },
    initialize: function Behavior$initialize() {
        Sys.UI.Behavior.callBaseMethod(this, 'initialize');
        var name =3D this.get_name();
        if (name) this._element[name] =3D this;
    },
    dispose: function Behavior$dispose() {
        Sys.UI.Behavior.callBaseMethod(this, 'dispose');
        var e =3D this._element;
        if (e) {
            var name =3D this.get_name();
            if (name) {
                e[name] =3D null;
            }
            var behaviors =3D e._behaviors;
            Array.remove(behaviors, this);
            if (!behaviors.length) {
                e._behaviors =3D null;
            }
            delete this._element;
        }
    }
}
$type.registerClass('Sys.UI.Behavior', Sys.Component);

$type.getBehaviorByName =3D function Behavior$getBehaviorByName(element, =
name) {
    /// <summary locid=3D"M:J#Sys.UI.Behavior.getBehaviorByName">Gets a =
behavior with the specified name from the dom element.</summary>
    /// <param name=3D"element" domElement=3D"true">The DOM element to =
inspect.</param>
    /// <param name=3D"name" type=3D"String">The name of the behavior to =
look for.</param>
    /// <returns type=3D"Sys.UI.Behavior" mayBeNull=3D"true">The =
behaviors or null if it was not found.</returns>
    var e =3D Function._validateParams(arguments, [
        {name: "element", domElement: true},
        {name: "name", type: String}
    ]);
    if (e) throw e;
    var b =3D element[name];
    return (b && Sys.UI.Behavior.isInstanceOfType(b)) ? b : null;
}

$type.getBehaviors =3D function Behavior$getBehaviors(element) {
    /// <summary locid=3D"M:J#Sys.UI.Behavior.getBehaviors">Gets a =
collection containing the behaviors associated with an =
element.</summary>
    /// <param name=3D"element" domElement=3D"true">The DOM =
element.</param>
    /// <returns type=3D"Array" elementType=3D"Sys.UI.Behavior">An array =
containing the behaviors associated with the DOM element.</returns>
    var e =3D Function._validateParams(arguments, [
        {name: "element", domElement: true}
    ]);
    if (e) throw e;
    var behaviors =3D element._behaviors;
    return behaviors ? Array.clone(behaviors) : [];
}

Sys.UI.Behavior.getBehaviorsByType =3D function =
Behavior$getBehaviorsByType(element, type) {
    /// <summary locid=3D"M:J#Sys.UI.Behavior.getBehaviorsByType">Gets =
an array of behaviors with the specified type from the dom =
element.</summary>
    /// <param name=3D"element" domElement=3D"true">The DOM element to =
inspect.</param>
    /// <param name=3D"type" type=3D"Type">The type of behavior to look =
for.</param>
    /// <returns type=3D"Array" elementType=3D"Sys.UI.Behavior">An array =
containing the behaviors of the specified type found on the element.  =
The array is empty if no behavior of this type was found.</returns>
    var e =3D Function._validateParams(arguments, [
        {name: "element", domElement: true},
        {name: "type", type: Type}
    ]);
    if (e) throw e;
    var behaviors =3D element._behaviors;
    var results =3D [];
    if (behaviors) {
        for (var i =3D 0, l =3D behaviors.length; i < l; i++) {
            var behavior =3D behaviors[i];
            if (type.isInstanceOfType(behavior)) {
                results.push(behavior);
            }
        }
    }
    return results;
}
$type =3D Sys.UI.VisibilityMode =3D function VisibilityMode() {
    /// <summary locid=3D"M:J#Sys.UI.VisibilityMode.#ctor">Describes how =
a DOM element should disappear when its visible property is set to =
false.</summary>
    /// <field name=3D"hide" type=3D"Number" integer=3D"true" =
static=3D"true" locid=3D"F:J#Sys.UI.VisibilityMode.hide">The element =
disappears but its space remains</field>
    /// <field name=3D"collapse" type=3D"Number" integer=3D"true" =
static=3D"true" locid=3D"F:J#Sys.UI.VisibilityMode.collapse">The element =
disappears and the space it occupied is collapsed.</field>
    if (arguments.length !=3D=3D 0) throw Error.parameterCount();
    throw Error.notImplemented();
}
$type.prototype =3D {
    hide: 0,
    collapse: 1
}
$type.registerEnum("Sys.UI.VisibilityMode");

$type =3D Sys.UI.Control =3D function Control(element) {
    /// <summary locid=3D"M:J#Sys.UI.Control.#ctor"></summary>
    /// <param name=3D"element" domElement=3D"true">The DOM element the =
behavior is associated with.</param>
    var e =3D Function._validateParams(arguments, [
        {name: "element", domElement: true}
    ]);
    if (e) throw e;
    if (element.control) throw =
Error.invalidOperation(Sys.Res.controlAlreadyDefined);
    Sys.UI.Control.initializeBase(this);

    this._element =3D element;
    element.control =3D this;
    var role =3D this.get_role();
    if (role) {
        element.setAttribute("role", role);
    }
}
$type.prototype =3D {
    _parent: null,
    _visibilityMode: Sys.UI.VisibilityMode.hide,

    get_element: function Control$get_element() {
        /// <value domElement=3D"true" =
locid=3D"P:J#Sys.UI.Control.element">The DOM element this behavior is =
associated with</value>
        if (arguments.length !=3D=3D 0) throw Error.parameterCount();
        return this._element;
    },
    get_id: function Control$get_id() {
        /// <value type=3D"String" =
locid=3D"P:J#Sys.UI.Control.id"></value>
        if (arguments.length !=3D=3D 0) throw Error.parameterCount();
        return this._id || (this._element ? this._element.id : "");
    },
    get_parent: function Control$get_parent() {
        /// <value type=3D"Sys.UI.Control" =
locid=3D"P:J#Sys.UI.Control.parent"></value>
        if (arguments.length !=3D=3D 0) throw Error.parameterCount();
        if (this._parent) return this._parent;
        if (!this._element) return null;
       =20
        var parentElement =3D this._element.parentNode;
        while (parentElement) {
            if (parentElement.control) {
                return parentElement.control;
            }
            parentElement =3D parentElement.parentNode;
        }
        return null;
    },
    set_parent: function Control$set_parent(value) {
        var e =3D Function._validateParams(arguments, [{name: "value", =
type: Sys.UI.Control}]);
        if (e) throw e;
        if (!this._element) throw =
Error.invalidOperation(Sys.Res.cantBeCalledAfterDispose);
        var parents =3D [this];
        var current =3D value;
        while (current) {
            if (Array.contains(parents, current)) throw =
Error.invalidOperation(Sys.Res.circularParentChain);
            parents.push(current);
            current =3D current.get_parent();
        }
        this._parent =3D value;
    },
    get_role: function Control$get_role() {
        /// <value type=3D"String" =
locid=3D"P:J#Sys.UI.Control.role"></value>
        if (arguments.length !=3D=3D 0) throw Error.parameterCount();
        return null;
    },
    get_visibilityMode: function Control$get_visibilityMode() {
        /// <value type=3D"Sys.UI.VisibilityMode" =
locid=3D"P:J#Sys.UI.Control.visibilityMode"></value>
        if (arguments.length !=3D=3D 0) throw Error.parameterCount();
        if (!this._element) throw =
Error.invalidOperation(Sys.Res.cantBeCalledAfterDispose);
        return Sys.UI.DomElement.getVisibilityMode(this._element);
    },
    set_visibilityMode: function Control$set_visibilityMode(value) {
        var e =3D Function._validateParams(arguments, [{name: "value", =
type: Sys.UI.VisibilityMode}]);
        if (e) throw e;
        if (!this._element) throw =
Error.invalidOperation(Sys.Res.cantBeCalledAfterDispose);
        Sys.UI.DomElement.setVisibilityMode(this._element, value);
    },
    get_visible: function Control$get_visible() {
        /// <value type=3D"Boolean" =
locid=3D"P:J#Sys.UI.Control.visible"></value>
        if (arguments.length !=3D=3D 0) throw Error.parameterCount();
        if (!this._element) throw =
Error.invalidOperation(Sys.Res.cantBeCalledAfterDispose);
        return Sys.UI.DomElement.getVisible(this._element);
    },
    set_visible: function Control$set_visible(value) {
        var e =3D Function._validateParams(arguments, [{name: "value", =
type: Boolean}]);
        if (e) throw e;
        if (!this._element) throw =
Error.invalidOperation(Sys.Res.cantBeCalledAfterDispose);
        Sys.UI.DomElement.setVisible(this._element, value)
    },
    addCssClass: function Control$addCssClass(className) {
        /// <summary locid=3D"M:J#Sys.UI.Control.addCssClass">Adds a CSS =
class to the control if it doesn't already have it.</summary>
        /// <param name=3D"className" type=3D"String">The name of the =
CSS class to add.</param>
        var e =3D Function._validateParams(arguments, [
            {name: "className", type: String}
        ]);
        if (e) throw e;
        if (!this._element) throw =
Error.invalidOperation(Sys.Res.cantBeCalledAfterDispose);
        Sys.UI.DomElement.addCssClass(this._element, className);
    },
    dispose: function Control$dispose() {
        Sys.UI.Control.callBaseMethod(this, 'dispose');
        if (this._element) {
            this._element.control =3D null;
            delete this._element;
        }
        if (this._parent) delete this._parent;
    },
    onBubbleEvent: function Control$onBubbleEvent(source, args) {
        /// <summary =
locid=3D"M:J#Sys.UI.Control.onBubbleEvent"></summary>
        /// <param name=3D"source">The object that triggered the =
event.</param>
        /// <param name=3D"args" type=3D"Sys.EventArgs">The event =
arguments.</param>
        /// <returns type=3D"Boolean">False, because the event was not =
handled and should bubble up further. Derived classes should override =
that and return true whenever they handle the event to prevent it from =
bubbling up.</returns>
        var e =3D Function._validateParams(arguments, [
            {name: "source"},
            {name: "args", type: Sys.EventArgs}
        ]);
        if (e) throw e;
        return false;
    },
    raiseBubbleEvent: function Control$raiseBubbleEvent(source, args) {
        /// <summary =
locid=3D"M:J#Sys.UI.Control.raiseBubbleEvent"></summary>
        /// <param name=3D"source">The object that triggered the =
event.</param>
        /// <param name=3D"args" type=3D"Sys.EventArgs">The event =
arguments.</param>
        var e =3D Function._validateParams(arguments, [
            {name: "source"},
            {name: "args", type: Sys.EventArgs}
        ]);
        if (e) throw e;
        this._raiseBubbleEvent(source, args);
    },
    _raiseBubbleEvent: function Control$_raiseBubbleEvent(source, args) =
{
        var currentTarget =3D this.get_parent();
        while (currentTarget) {
            if (currentTarget.onBubbleEvent(source, args)) {
                return;
            }
            currentTarget =3D currentTarget.get_parent();
        }
    },
    removeCssClass: function Control$removeCssClass(className) {
        /// <summary locid=3D"M:J#Sys.UI.Control.removeCssClass">Removes =
a CSS class from the control.</summary>
        /// <param name=3D"className" type=3D"String">The name of the =
CSS class to remove.</param>
        var e =3D Function._validateParams(arguments, [
            {name: "className", type: String}
        ]);
        if (e) throw e;
        if (!this._element) throw =
Error.invalidOperation(Sys.Res.cantBeCalledAfterDispose);
        Sys.UI.DomElement.removeCssClass(this._element, className);
    },
    toggleCssClass: function Control$toggleCssClass(className) {
        /// <summary locid=3D"M:J#Sys.UI.Control.toggleCssClass">Toggles =
a CSS class on and off on the control.</summary>
        /// <param name=3D"className" type=3D"String">The name of the =
CSS class to toggle.</param>
        var e =3D Function._validateParams(arguments, [
            {name: "className", type: String}
        ]);
        if (e) throw e;
        if (!this._element) throw =
Error.invalidOperation(Sys.Res.cantBeCalledAfterDispose);
        Sys.UI.DomElement.toggleCssClass(this._element, className);
    }
}
$type.registerClass('Sys.UI.Control', Sys.Component);



$type =3D Sys.HistoryEventArgs =3D function HistoryEventArgs(state) {
    /// <summary locid=3D"M:J#Sys.HistoryEventArgs.#ctor"></summary>
    /// <param name=3D"state" type=3D"Object"></param>
    var e =3D Function._validateParams(arguments, [
        {name: "state", type: Object}
    ]);
    if (e) throw e;
    Sys.HistoryEventArgs.initializeBase(this);
    this._state =3D state;
}
$type.prototype =3D {
    get_state: function HistoryEventArgs$get_state() {
        /// <value type=3D"Object" =
locid=3D"P:J#Sys.HistoryEventArgs.state"></value>
        if (arguments.length !=3D=3D 0) throw Error.parameterCount();
        return this._state;
    }
}
$type.registerClass('Sys.HistoryEventArgs', Sys.EventArgs);
$type =3D Sys.Application;
$type._currentEntry =3D '';
$type._initialState =3D null;
$type._state =3D {};

$prototype =3D Sys._Application.prototype;
$prototype.get_stateString =3D function _Application$get_stateString() {
    /// <summary =
locid=3D"M:J#Sys._Application.get_stateString"></summary>
    if (arguments.length !=3D=3D 0) throw Error.parameterCount();
    var hash =3D null;
   =20
    if (isBrowser("Firefox")) {
        var href =3D window.location.href;
        var hashIndex =3D href.indexOf('#');
        if (hashIndex !=3D=3D -1) {
            hash =3D href.substring(hashIndex + 1);
        }
        else {
            hash =3D "";
        }
        return hash;
    }
    else {
        hash =3D window.location.hash;
    }
   =20
    if (hash.length && (hash.charAt(0) =3D=3D=3D '#')) {
        hash =3D hash.substring(1);
    }

    return hash;
};

$prototype.get_enableHistory =3D function =
_Application$get_enableHistory() {
    /// <summary =
locid=3D"M:J#Sys._Application.get_enableHistory"></summary>
    if (arguments.length !=3D=3D 0) throw Error.parameterCount();
    return !!this._enableHistory;
};

$prototype.set_enableHistory =3D function =
_Application$set_enableHistory(value) {
    if (this._initialized && !this._initializing) {
        throw =
Error.invalidOperation(Sys.Res.historyCannotEnableHistory);
    }
    else if (this._historyEnabledInScriptManager && !value) {
        throw =
Error.invalidOperation(Sys.Res.invalidHistorySettingCombination);
    }
    this._enableHistory =3D value;
};

$prototype.add_navigate =3D function _Application$add_navigate(handler) =
{
    /// <summary locid=3D"E:J#Sys.Application.navigate"></summary>
    /// <param name=3D"handler" type=3D"Function"></param>
    var e =3D Function._validateParams(arguments, [
        {name: "handler", type: Function}
    ]);
    if (e) throw e;
    this._addHandler("navigate", handler);
};

$prototype.remove_navigate =3D function =
_Application$remove_navigate(handler) {
    /// <summary =
locid=3D"M:J#Sys._Application.remove_navigate"></summary>
    /// <param name=3D"handler" type=3D"Function"></param>
    var e =3D Function._validateParams(arguments, [
        {name: "handler", type: Function}
    ]);
    if (e) throw e;
    this._removeHandler("navigate", handler);
};

$prototype.addHistoryPoint =3D function =
_Application$addHistoryPoint(state, title) {
    /// <summary =
locid=3D"M:J#Sys.Application.addHistoryPoint"></summary>
    /// <param name=3D"state" type=3D"Object">A dictionary of state bits =
that will be added to the main state   to form the global state of the =
new history point.   The state must be a string dictionary. The =
application is responsible   for converting the state bits from and into =
the relevant types.</param>
    /// <param name=3D"title" type=3D"String" optional=3D"true" =
mayBeNull=3D"true">The title for the new history point.</param>
    var e =3D Function._validateParams(arguments, [
        {name: "state", type: Object},
        {name: "title", type: String, mayBeNull: true, optional: true}
    ]);
    if (e) throw e;
    if (!this._enableHistory) throw =
Error.invalidOperation(Sys.Res.historyCannotAddHistoryPointWithHistoryDis=
abled);
    for (var n in state) {
        var v =3D state[n];
        var t =3D typeof(v);
        if ((v !=3D=3D null) && ((t =3D=3D=3D 'object') || (t =3D=3D=3D =
'function') || (t =3D=3D=3D 'undefined'))) {
            throw Error.argument('state', =
Sys.Res.stateMustBeStringDictionary);
        }
    }
    this._ensureHistory();
    var initialState =3D this._state;
    for (var key in state) {
        var value =3D state[key];
        if (value =3D=3D=3D null) {
            if (typeof(initialState[key]) !=3D=3D 'undefined') {
                delete initialState[key];
            }
        }
        else {
            initialState[key] =3D value;
        }
    }
    var entry =3D this._serializeState(initialState);
    this._historyPointIsNew =3D true;
    this._setState(entry, title);
    this._raiseNavigate();
};

$prototype.setServerId =3D function _Application$setServerId(clientId, =
uniqueId) {
    /// <summary locid=3D"M:J#Sys.Application.setServerId"></summary>
    /// <param name=3D"clientId" type=3D"String"></param>
    /// <param name=3D"uniqueId" type=3D"String"></param>
    var e =3D Function._validateParams(arguments, [
        {name: "clientId", type: String},
        {name: "uniqueId", type: String}
    ]);
    if (e) throw e;
    this._clientId =3D clientId;
    this._uniqueId =3D uniqueId;
};

$prototype.setServerState =3D function =
_Application$setServerState(value) {
    /// <summary locid=3D"M:J#Sys.Application.setServerState"></summary>
    /// <param name=3D"value" type=3D"String"></param>
    var e =3D Function._validateParams(arguments, [
        {name: "value", type: String}
    ]);
    if (e) throw e;
    this._ensureHistory();
    this._state.__s =3D value;
    this._updateHiddenField(value);
};

$prototype._deserializeState =3D function =
_Application$_deserializeState(entry) {
    var result =3D {};
    entry =3D entry || '';
    var serverSeparator =3D entry.indexOf('&&');
    if ((serverSeparator !=3D=3D -1) && (serverSeparator + 2 < =
entry.length)) {
        result.__s =3D entry.substr(serverSeparator + 2);
        entry =3D entry.substr(0, serverSeparator);
    }
    var tokens =3D entry.split('&');
    for (var i =3D 0, l =3D tokens.length; i < l; i++) {
        var token =3D tokens[i];
        var equal =3D token.indexOf('=3D');
        if ((equal !=3D=3D -1) && (equal + 1 < token.length)) {
            var name =3D token.substr(0, equal);
            var value =3D token.substr(equal + 1);
            result[name] =3D decodeURIComponent(value);
        }
    }
    return result;
};

$prototype._enableHistoryInScriptManager =3D function =
_Application$_enableHistoryInScriptManager() {
    this._enableHistory =3D true;
    this._historyEnabledInScriptManager =3D true;
};

$prototype._ensureHistory =3D function _Application$_ensureHistory() {
    if (!this._historyInitialized && this._enableHistory) {
        if (isBrowser("InternetExplorer") && (Sys.Browser.documentMode < =
8)) {
            this._historyFrame =3D Sys.get('#__historyFrame');
            if (!this._historyFrame) throw =
Error.invalidOperation(Sys.Res.historyMissingFrame);
            this._ignoreIFrame =3D true;
        }
        this._timerHandler =3D Function.createDelegate(this, =
this._onIdle);
        this._timerCookie =3D window.setTimeout(this._timerHandler, =
100);
       =20
        var e;
        try {
            this._initialState =3D =
this._deserializeState(this.get_stateString());
        }
        catch(e) {}
       =20
        this._historyInitialized =3D true;
    }
};

$prototype._navigate =3D function _Application$_navigate(entry) {
    this._ensureHistory();

    var state =3D this._deserializeState(entry);
   =20
    if (this._uniqueId) {
        var oldServerEntry =3D this._state.__s || '';
        var newServerEntry =3D state.__s || '';
        if (newServerEntry !=3D=3D oldServerEntry) {
            this._updateHiddenField(newServerEntry);
            __doPostBack(this._uniqueId, newServerEntry);
            this._state =3D state;
            return;
        }
    }
    this._setState(entry);
    this._state =3D state;
    this._raiseNavigate();
};

$prototype._onIdle =3D function _Application$_onIdle() {
    delete this._timerCookie;
   =20
    var entry =3D this.get_stateString();
    if (entry !=3D=3D this._currentEntry) {
        if (!this._ignoreTimer) {
            this._historyPointIsNew =3D false;
            this._navigate(entry);
        }
    }
    else {
        this._ignoreTimer =3D false;
    }
    this._timerCookie =3D window.setTimeout(this._timerHandler, 100);
};

$prototype._onIFrameLoad =3D function _Application$_onIFrameLoad(entry) =
{
    this._ensureHistory();
    if (!this._ignoreIFrame) {
        this._historyPointIsNew =3D false;
        this._navigate(entry);
    }
    this._ignoreIFrame =3D false;
};

$prototype._onPageRequestManagerBeginRequest =3D function =
_Application$_onPageRequestManagerBeginRequest(sender, args) {
    this._ignoreTimer =3D true;
    this._originalTitle =3D document.title;
};

$prototype._onPageRequestManagerEndRequest =3D function =
_Application$_onPageRequestManagerEndRequest(sender, args) {
    var dataItem =3D args.get_dataItems()[this._clientId];
    var originalTitle =3D this._originalTitle;
    this._originalTitle =3D null;

    var eventTarget =3D Sys.get("#__EVENTTARGET");
    if (eventTarget && eventTarget.value =3D=3D=3D this._uniqueId) {
        eventTarget.value =3D '';
    }
    if (typeof(dataItem) !=3D=3D 'undefined') {
        this.setServerState(dataItem);
        this._historyPointIsNew =3D true;
    }
    else {
        this._ignoreTimer =3D false;
    }
    var entry =3D this._serializeState(this._state);
    if (entry !=3D=3D this._currentEntry) {
        this._ignoreTimer =3D true;
        if (typeof(originalTitle) =3D=3D=3D "string") {
            if (!isBrowser("InternetExplorer") || Sys.Browser.version > =
7) {
                var newTitle =3D document.title;
                document.title =3D originalTitle;
                this._setState(entry);
                document.title =3D newTitle;
            }
            else {
                this._setState(entry);
            }
            this._raiseNavigate();
        }
        else {
            this._setState(entry);
            this._raiseNavigate();
        }
    }
};

$prototype._raiseNavigate =3D function _Application$_raiseNavigate() {
    var isNew =3D this._historyPointIsNew;
    var stateClone =3D {};
    for (var key in this._state) {
        if (key !=3D=3D '__s') {
            stateClone[key] =3D this._state[key];
        }
    }
    var args =3D new Sys.HistoryEventArgs(stateClone);
    Sys.Observer.raiseEvent(this, "navigate", args);
    if (!isNew) {
        var err;
        try {
            if (isBrowser("Firefox") && window.location.hash &&
                (!window.frameElement || window.top.location.hash)) {
                (Sys.Browser.version < 3.5) ?
                    window.history.go(0) :
                    location.hash =3D this.get_stateString();
            }
        }
        catch(err) {
        }
    }
};

$prototype._serializeState =3D function =
_Application$_serializeState(state) {
    var serialized =3D [];
    for (var key in state) {
        var value =3D state[key];
        if (key =3D=3D=3D '__s') {
            var serverState =3D value;
        }
        else {
            if (key.indexOf('=3D') !=3D=3D -1) throw =
Error.argument('state', Sys.Res.stateFieldNameInvalid);
            serialized.push(key + '=3D' + encodeURIComponent(value));
        }
    }
    return serialized.join('&') + (serverState ? '&&' + serverState : =
'');
};

$prototype._setState =3D function _Application$_setState(entry, title) {
    if (this._enableHistory) {
        entry =3D entry || '';
        if (entry !=3D=3D this._currentEntry) {
            if (window.theForm) {
                var action =3D window.theForm.action;
                var hashIndex =3D action.indexOf('#');
                window.theForm.action =3D ((hashIndex !=3D=3D -1) ? =
action.substring(0, hashIndex) : action) + '#' + entry;
            }
       =20
            if (this._historyFrame && this._historyPointIsNew) {
                this._ignoreIFrame =3D true;
                var frameDoc =3D =
this._historyFrame.contentWindow.document;
                frameDoc.open("javascript:'<html></html>'");
                frameDoc.write("<html><head><title>" + (title || =
document.title) +
                    "</title><scri" + "pt =
type=3D\"text/javascript\">parent.Sys.Application._onIFrameLoad(" +=20
                    =
Sys.Serialization.JavaScriptSerializer.serialize(entry) +
                    ");</scri" + "pt></head><body></body></html>");
                frameDoc.close();
            }
            this._ignoreTimer =3D false;
            this._currentEntry =3D entry;
            if (this._historyFrame || this._historyPointIsNew) {
                var currentHash =3D this.get_stateString();
                if (entry !=3D=3D currentHash) {
                    var loc =3D document.location;
                    if (loc.href.length - loc.hash.length + entry.length =
> 2048) {
                        throw =
Error.invalidOperation(String.format(Sys.Res.urlTooLong, 2048));
                    }
                    window.location.hash =3D entry;
                    this._currentEntry =3D this.get_stateString();
                    if ((typeof(title) !=3D=3D 'undefined') && (title =
!=3D=3D null)) {
                        document.title =3D title;
                    }
                }
            }
            this._historyPointIsNew =3D false;
        }
    }
};

$prototype._updateHiddenField =3D function =
_Application$_updateHiddenField(value) {
    if (this._clientId) {
        var serverStateField =3D =
document.getElementById(this._clientId);
        if (serverStateField) {
            serverStateField.value =3D value;
        }
    }
};



if (!window.XMLHttpRequest) {
    window.XMLHttpRequest =3D function window$XMLHttpRequest() {
        var ex, progIDs =3D [ 'Msxml2.XMLHTTP.3.0', 'Msxml2.XMLHTTP' ];
        for (var i =3D 0, l =3D progIDs.length; i < l; i++) {
            try {
                return new ActiveXObject(progIDs[i]);
            }
            catch (ex) {
            }
        }
        return null;
    }
}

Type.registerNamespace('Sys.Net');

$type =3D Sys.Net.WebRequestExecutor =3D function WebRequestExecutor() {
    /// <summary locid=3D"M:J#Sys.Net.WebRequestExecutor.#ctor">Base =
class for WebRequestExecutors which handle the actual execution of a =
WebRequest</summary>
    if (arguments.length !=3D=3D 0) throw Error.parameterCount();
    this._webRequest =3D null;
    this._resultObject =3D null;
}


$type.prototype =3D {
    get_started: function WebRequestExecutor$get_started() {
        /// <value type=3D"Boolean" =
locid=3D"P:J#Sys.Net.WebRequestExecutor.started"></value>
        if (arguments.length !=3D=3D 0) throw Error.parameterCount();
        throw Error.notImplemented();
    },
    get_responseAvailable: function =
WebRequestExecutor$get_responseAvailable() {
        /// <value type=3D"Boolean" =
locid=3D"P:J#Sys.Net.WebRequestExecutor.responseAvailable"></value>
        if (arguments.length !=3D=3D 0) throw Error.parameterCount();
        throw Error.notImplemented();
    },
    get_timedOut: function WebRequestExecutor$get_timedOut() {
        /// <value type=3D"Boolean" =
locid=3D"P:J#Sys.Net.WebRequestExecutor.timedOut"></value>
        if (arguments.length !=3D=3D 0) throw Error.parameterCount();
        throw Error.notImplemented();
    },
    get_aborted: function WebRequestExecutor$get_aborted() {
        /// <value type=3D"Boolean" =
locid=3D"P:J#Sys.Net.WebRequestExecutor.aborted"></value>
        if (arguments.length !=3D=3D 0) throw Error.parameterCount();
        throw Error.notImplemented();
    },
    get_responseData: function WebRequestExecutor$get_responseData() {
        /// <value type=3D"String" =
locid=3D"P:J#Sys.Net.WebRequestExecutor.responseData"></value>
        if (arguments.length !=3D=3D 0) throw Error.parameterCount();
        throw Error.notImplemented();
    },
    get_statusCode: function WebRequestExecutor$get_statusCode() {
        /// <value type=3D"Number" =
locid=3D"P:J#Sys.Net.WebRequestExecutor.statusCode"></value>
        if (arguments.length !=3D=3D 0) throw Error.parameterCount();
        throw Error.notImplemented();
    },
    get_statusText: function WebRequestExecutor$get_statusText() {
        /// <value type=3D"String" =
locid=3D"P:J#Sys.Net.WebRequestExecutor.statusText"></value>
        if (arguments.length !=3D=3D 0) throw Error.parameterCount();
        throw Error.notImplemented();
    },
    get_xml: function WebRequestExecutor$get_xml() {
        /// <value locid=3D"P:J#Sys.Net.WebRequestExecutor.xml"></value>
        if (arguments.length !=3D=3D 0) throw Error.parameterCount();
        throw Error.notImplemented();
    },
    executeRequest: function WebRequestExecutor$executeRequest() {
        /// <summary =
locid=3D"M:J#Sys.Net.WebRequestExecutor.executeRequest">Begins execution =
of the request.</summary>
        if (arguments.length !=3D=3D 0) throw Error.parameterCount();
        throw Error.notImplemented();
    },
    abort: function WebRequestExecutor$abort() {
        /// <summary =
locid=3D"M:J#Sys.Net.WebRequestExecutor.abort">Aborts the =
request.</summary>
        if (arguments.length !=3D=3D 0) throw Error.parameterCount();
        throw Error.notImplemented();
    },
    getAllResponseHeaders: function =
WebRequestExecutor$getAllResponseHeaders() {
        /// <summary =
locid=3D"M:J#Sys.Net.WebRequestExecutor.getAllResponseHeaders">Returns =
all the responses header.</summary>
        if (arguments.length !=3D=3D 0) throw Error.parameterCount();
        throw Error.notImplemented();
    },
    getResponseHeader: function =
WebRequestExecutor$getResponseHeader(header) {
        /// <summary =
locid=3D"M:J#Sys.Net.WebRequestExecutor.getResponseHeader">Returns a =
response header.</summary>
        /// <param name=3D"header" type=3D"String">The requested =
header.</param>
        var e =3D Function._validateParams(arguments, [
            {name: "header", type: String}
        ]);
        if (e) throw e;
        throw Error.notImplemented();
    },
    get_webRequest: function WebRequestExecutor$get_webRequest() {
        /// <value type=3D"Sys.Net.WebRequest" =
locid=3D"P:J#Sys.Net.WebRequestExecutor.webRequest"></value>
        if (arguments.length !=3D=3D 0) throw Error.parameterCount();
        return this._webRequest;
    },
    _set_webRequest: function WebRequestExecutor$_set_webRequest(value) =
{
        if (this.get_started()) {
            throw =
Error.invalidOperation(String.format(Sys.Res.cannotCallOnceStarted, =
'set_webRequest'));
        }
        this._webRequest =3D value;
    },
    get_object: function WebRequestExecutor$get_object() {
        /// <value locid=3D"P:J#Sys.Net.WebRequestExecutor.object">The =
JSON eval'd response.</value>
        if (arguments.length !=3D=3D 0) throw Error.parameterCount();
        var result =3D this._resultObject;
        if (!result) {
            this._resultObject =3D result =3D =
Sys.Serialization.JavaScriptSerializer.deserialize(this.get_responseData(=
));
        }
        return result;
    }
}
$type.registerClass('Sys.Net.WebRequestExecutor');
Sys.Net.XMLDOM =3D function XMLDOM(markup) {
    /// <summary locid=3D"M:J#Sys.Net.XMLDOM.#ctor">Creates an XML =
document from an XML string.</summary>
    /// <param name=3D"markup" type=3D"String">The XML string to =
parse.</param>
    var e =3D Function._validateParams(arguments, [
        {name: "markup", type: String}
    ]);
    if (e) throw e;
    if (!window.DOMParser) {
        var ex, progIDs =3D [ 'Msxml2.DOMDocument.3.0', =
'Msxml2.DOMDocument' ];
        for (var i =3D 0, l =3D progIDs.length; i < l; i++) {
            try {
                var xmlDOM =3D new ActiveXObject(progIDs[i]);
                xmlDOM.async =3D false;
                xmlDOM.loadXML(markup);
                xmlDOM.setProperty('SelectionLanguage', 'XPath');
                return xmlDOM;
            }
            catch (ex) {
            }
        }
    }
    else {
        try {
            var domParser =3D new window.DOMParser();
            return domParser.parseFromString(markup, 'text/xml');
        }
        catch (ex) {
        }
    }
    return null;
}

$type =3D Sys.Net.XMLHttpExecutor =3D function XMLHttpExecutor() {
    /// <summary =
locid=3D"M:J#Sys.Net.XMLHttpExecutor.#ctor">XMLHttpExecutor</summary>
    if (arguments.length !=3D=3D 0) throw Error.parameterCount();

    Sys.Net.XMLHttpExecutor.initializeBase(this);

    var _this =3D this;

    this._onReadyStateChange =3D (function () {
        /*
            readyState values:
            0 =3D uninitialized
            1 =3D loading
            2 =3D loaded
            3 =3D interactive
            4 =3D complete
        */
        if (_this._xmlHttpRequest.readyState =3D=3D=3D 4 /*complete*/) {
            try {
                if (typeof(_this._xmlHttpRequest.status) =3D=3D=3D =
"undefined") {
                    return;
                }
            }
            catch(ex) {
                return;
            }
           =20
            _this._clearTimer();
            _this._responseAvailable =3D true;
                _this._webRequest.completed(Sys.EventArgs.Empty);
                if (_this._xmlHttpRequest) {
                    _this._xmlHttpRequest.onreadystatechange =3D =
Function.emptyMethod;
                    _this._xmlHttpRequest =3D null;
                }
        }
    });

    this._clearTimer =3D (function() {
        if (_this._timer) {
            window.clearTimeout(_this._timer);
            _this._timer =3D null;
        }
    });

    this._onTimeout =3D (function() {
        if (!_this._responseAvailable) {
            _this._clearTimer();
            _this._timedOut =3D true;
            var xhr =3D _this._xmlHttpRequest;
            xhr.onreadystatechange =3D Function.emptyMethod;
            xhr.abort();
            _this._webRequest.completed(Sys.EventArgs.Empty);
            _this._xmlHttpRequest =3D null;
        }
    });

}

$type.prototype =3D {

    get_timedOut: function XMLHttpExecutor$get_timedOut() {
        /// <value type=3D"Boolean" =
locid=3D"P:J#Sys.Net.XMLHttpExecutor.timedOut">True if the executor has =
timed out.</value>
        if (arguments.length !=3D=3D 0) throw Error.parameterCount();
        return !!this._timedOut;
    },

    get_started: function XMLHttpExecutor$get_started() {
        /// <value type=3D"Boolean" =
locid=3D"P:J#Sys.Net.XMLHttpExecutor.started">True if the executor has =
started.</value>
        if (arguments.length !=3D=3D 0) throw Error.parameterCount();
        return !!this._started;
    },

    get_responseAvailable: function =
XMLHttpExecutor$get_responseAvailable() {
        /// <value type=3D"Boolean" =
locid=3D"P:J#Sys.Net.XMLHttpExecutor.responseAvailable">True if a =
response is available.</value>
        if (arguments.length !=3D=3D 0) throw Error.parameterCount();
        return !!this._responseAvailable;
    },

    get_aborted: function XMLHttpExecutor$get_aborted() {
        /// <value type=3D"Boolean" =
locid=3D"P:J#Sys.Net.XMLHttpExecutor.aborted">True if the executor has =
been aborted.</value>
        if (arguments.length !=3D=3D 0) throw Error.parameterCount();
        return !!this._aborted;
    },

    executeRequest: function XMLHttpExecutor$executeRequest() {
        /// <summary =
locid=3D"M:J#Sys.Net.XMLHttpExecutor.executeRequest">Invokes the =
request.</summary>
        if (arguments.length !=3D=3D 0) throw Error.parameterCount();
        var request =3D this.get_webRequest();
        this._webRequest =3D request;

        if (this._started) {
            throw =
Error.invalidOperation(String.format(Sys.Res.cannotCallOnceStarted, =
'executeRequest'));
        }
        if (!this._webRequest) {
            throw Error.invalidOperation(Sys.Res.nullWebRequest);
        }

        var body =3D request.get_body();
        var headers =3D request.get_headers();
        var xhr =3D new XMLHttpRequest();
        this._xmlHttpRequest =3D xhr;
        xhr.onreadystatechange =3D this._onReadyStateChange;
        var verb =3D request.get_httpVerb();
        xhr.open(verb, request.getResolvedUrl(), true /*async*/);
        xhr.setRequestHeader("X-Requested-With", "XMLHttpRequest");
        if (headers) {
            for (var header in headers) {
                var val =3D headers[header];
                if (typeof(val) !=3D=3D "function")
                    xhr.setRequestHeader(header, val);
            }
        }

        if (verb.toLowerCase() =3D=3D=3D "post") {
            if ((headers =3D=3D=3D null) || !headers['Content-Type']) {
                xhr.setRequestHeader('Content-Type', =
'application/x-www-form-urlencoded; charset=3Dutf-8');
            }

            if (!body) {
                body =3D "";
            }
        }

        var timeout =3D request.get_timeout();
        if (timeout > 0) {
            this._timer =3D =
window.setTimeout(Function.createDelegate(this, this._onTimeout), =
timeout);
        }
        xhr.send(body);
        this._started =3D true;
    },

    getResponseHeader: function =
XMLHttpExecutor$getResponseHeader(header) {
        /// <summary =
locid=3D"M:J#Sys.Net.XMLHttpExecutor.getResponseHeader">Returns a =
response header.</summary>
        /// <param name=3D"header" type=3D"String">The requested =
header.</param>
        /// <returns type=3D"String">The value of the header.</returns>
        var e =3D Function._validateParams(arguments, [
            {name: "header", type: String}
        ]);
        if (e) throw e;
        if (!this._responseAvailable) {
            throw =
Error.invalidOperation(String.format(Sys.Res.cannotCallBeforeResponse, =
'getResponseHeader'));
        }
        if (!this._xmlHttpRequest) {
            throw =
Error.invalidOperation(String.format(Sys.Res.cannotCallOutsideHandler, =
'getResponseHeader'));
        }

        var er, result;
        try {
            result =3D this._xmlHttpRequest.getResponseHeader(header);
        } catch (er) {
        }
        if (!result) result =3D "";
        return result;
    },

    getAllResponseHeaders: function =
XMLHttpExecutor$getAllResponseHeaders() {
        /// <summary =
locid=3D"M:J#Sys.Net.XMLHttpExecutor.getAllResponseHeaders">Returns all =
the responses header.</summary>
        /// <returns type=3D"String">The text of all the =
headers.</returns>
        if (arguments.length !=3D=3D 0) throw Error.parameterCount();
        if (!this._responseAvailable) {
            throw =
Error.invalidOperation(String.format(Sys.Res.cannotCallBeforeResponse, =
'getAllResponseHeaders'));
        }
        if (!this._xmlHttpRequest) {
            throw =
Error.invalidOperation(String.format(Sys.Res.cannotCallOutsideHandler, =
'getAllResponseHeaders'));
        }

        return this._xmlHttpRequest.getAllResponseHeaders();
    },

    get_responseData: function XMLHttpExecutor$get_responseData() {
        /// <value type=3D"String" =
locid=3D"P:J#Sys.Net.XMLHttpExecutor.responseData">The text of the =
response.</value>
        if (arguments.length !=3D=3D 0) throw Error.parameterCount();
        if (!this._responseAvailable) {
            throw =
Error.invalidOperation(String.format(Sys.Res.cannotCallBeforeResponse, =
'get_responseData'));
        }
        if (!this._xmlHttpRequest) {
            throw =
Error.invalidOperation(String.format(Sys.Res.cannotCallOutsideHandler, =
'get_responseData'));
        }

        return this._xmlHttpRequest.responseText;
    },

    get_statusCode: function XMLHttpExecutor$get_statusCode() {
        /// <value type=3D"Number" =
locid=3D"P:J#Sys.Net.XMLHttpExecutor.statusCode">The status code of the =
response.</value>
        if (arguments.length !=3D=3D 0) throw Error.parameterCount();
        if (!this._responseAvailable) {
            throw =
Error.invalidOperation(String.format(Sys.Res.cannotCallBeforeResponse, =
'get_statusCode'));
        }
        if (!this._xmlHttpRequest) {
            throw =
Error.invalidOperation(String.format(Sys.Res.cannotCallOutsideHandler, =
'get_statusCode'));
        }
        var ex, result =3D 0;
        try {
            result =3D this._xmlHttpRequest.status;
        }
        catch(ex) {
        }
        return result;
    },

    get_statusText: function XMLHttpExecutor$get_statusText() {
        /// <value type=3D"String" =
locid=3D"P:J#Sys.Net.XMLHttpExecutor.statusText">The status text of the =
repsonse.</value>
        if (arguments.length !=3D=3D 0) throw Error.parameterCount();
        if (!this._responseAvailable) {
            throw =
Error.invalidOperation(String.format(Sys.Res.cannotCallBeforeResponse, =
'get_statusText'));
        }
        if (!this._xmlHttpRequest) {
            throw =
Error.invalidOperation(String.format(Sys.Res.cannotCallOutsideHandler, =
'get_statusText'));
        }

        return this._xmlHttpRequest.statusText;
    },

    get_xml: function XMLHttpExecutor$get_xml() {
        /// <value locid=3D"P:J#Sys.Net.XMLHttpExecutor.xml">The =
response in xml format.</value>
        if (arguments.length !=3D=3D 0) throw Error.parameterCount();
        if (!this._responseAvailable) {
            throw =
Error.invalidOperation(String.format(Sys.Res.cannotCallBeforeResponse, =
'get_xml'));
        }
        if (!this._xmlHttpRequest) {
            throw =
Error.invalidOperation(String.format(Sys.Res.cannotCallOutsideHandler, =
'get_xml'));
        }
        var xhr =3D this._xmlHttpRequest;
        var xml =3D xhr.responseXML;
        if (!xml || !xml.documentElement) {

            xml =3D Sys.Net.XMLDOM(xhr.responseText);

            if (!xml || !xml.documentElement)
                return null;
        }
        else if (navigator.userAgent.indexOf('MSIE') !=3D=3D -1) {
            xml.setProperty('SelectionLanguage', 'XPath');
        }

        if (xml.documentElement.namespaceURI =3D=3D=3D =
"http://www.mozilla.org/newlayout/xml/parsererror.xml" &&
            xml.documentElement.tagName =3D=3D=3D "parsererror") {
            return null;
        }
       =20
        if (xml.documentElement.firstChild && =
xml.documentElement.firstChild.tagName =3D=3D=3D "parsererror") {
            return null;
        }
       =20
        return xml;
    },

    abort: function XMLHttpExecutor$abort() {
        /// <summary locid=3D"M:J#Sys.Net.XMLHttpExecutor.abort">Aborts =
the request.</summary>
        if (arguments.length !=3D=3D 0) throw Error.parameterCount();
        if (!this._started) {
            throw =
Error.invalidOperation(Sys.Res.cannotAbortBeforeStart);
        }

        if (this._aborted || this._responseAvailable || this._timedOut)
            return;

        this._aborted =3D true;

        this._clearTimer();
        var xhr =3D this._xmlHttpRequest;
        if (xhr && !this._responseAvailable) {

            xhr.onreadystatechange =3D Function.emptyMethod;
            xhr.abort();
           =20
            this._xmlHttpRequest =3D null;           =20

            this._webRequest.completed(Sys.EventArgs.Empty);
        }
    }
}
$type.registerClass('Sys.Net.XMLHttpExecutor', =
Sys.Net.WebRequestExecutor);
$type =3D Sys.Net._WebRequestManager =3D function _WebRequestManager() {
    /// <summary =
locid=3D"P:J#Sys.Net.WebRequestManager.#ctor"></summary>
    if (arguments.length !=3D=3D 0) throw Error.parameterCount();
    this._defaultExecutorType =3D "Sys.Net.XMLHttpExecutor";
}

$type.prototype =3D {
    add_invokingRequest: function =
_WebRequestManager$add_invokingRequest(handler) {
        /// <summary =
locid=3D"E:J#Sys.Net.WebRequestManager.invokingRequest"></summary>
        var e =3D Function._validateParams(arguments, [{name: "handler", =
type: Function}]);
        if (e) throw e;
        Sys.Observer.addEventHandler(this, "invokingRequest", handler);
    },
    remove_invokingRequest: function =
_WebRequestManager$remove_invokingRequest(handler) {
        var e =3D Function._validateParams(arguments, [{name: "handler", =
type: Function}]);
        if (e) throw e;
        Sys.Observer.removeEventHandler(this, "invokingRequest", =
handler);
    },

    add_completedRequest: function =
_WebRequestManager$add_completedRequest(handler) {
        /// <summary =
locid=3D"E:J#Sys.Net.WebRequestManager.completedRequest"></summary>
        var e =3D Function._validateParams(arguments, [{name: "handler", =
type: Function}]);
        if (e) throw e;
        Sys.Observer.addEventHandler(this, "completedRequest", handler);
    },
    remove_completedRequest: function =
_WebRequestManager$remove_completedRequest(handler) {
        var e =3D Function._validateParams(arguments, [{name: "handler", =
type: Function}]);
        if (e) throw e;
        Sys.Observer.removeEventHandler(this, "completedRequest", =
handler);
    },
    get_defaultTimeout: function _WebRequestManager$get_defaultTimeout() =
{
        /// <value type=3D"Number" =
locid=3D"P:J#Sys.Net.WebRequestManager.defaultTimeout">The default =
timeout for requests in milliseconds.</value>
        if (arguments.length !=3D=3D 0) throw Error.parameterCount();
        return this._defaultTimeout || 0;
    },
    set_defaultTimeout: function =
_WebRequestManager$set_defaultTimeout(value) {
        var e =3D Function._validateParams(arguments, [{name: "value", =
type: Number}]);
        if (e) throw e;
        if (value < 0) {
            throw Error.argumentOutOfRange("value", value, =
Sys.Res.invalidTimeout);
        }

        this._defaultTimeout =3D value;
    },

    get_defaultExecutorType: function =
_WebRequestManager$get_defaultExecutorType() {
        /// <value type=3D"String" =
locid=3D"P:J#Sys.Net.WebRequestManager.defaultExecutorType">The default =
executor type name.</value>
        if (arguments.length !=3D=3D 0) throw Error.parameterCount();
        return this._defaultExecutorType;
    },
    set_defaultExecutorType: function =
_WebRequestManager$set_defaultExecutorType(value) {
        var e =3D Function._validateParams(arguments, [{name: "value", =
type: String}]);
        if (e) throw e;
        this._defaultExecutorType =3D value;
    },

    executeRequest: function =
_WebRequestManager$executeRequest(webRequest) {
        /// <summary =
locid=3D"M:J#Sys.Net.WebRequestManager.executeRequest">Executes a =
request.</summary>
        /// <param name=3D"webRequest" type=3D"Sys.Net.WebRequest">The =
webRequest to execute.</param>
        var e =3D Function._validateParams(arguments, [
            {name: "webRequest", type: Sys.Net.WebRequest}
        ]);
        if (e) throw e;
        var executor =3D webRequest.get_executor();
        if (!executor) {
            var er, failed;
            try {
                var executorType =3D =
window.eval(this._defaultExecutorType);
                executor =3D new executorType();
            }
            catch (er) {
                failed =3D true;
            }

            if (failed  || =
!Sys.Net.WebRequestExecutor.isInstanceOfType(executor) || !executor) {
                throw Error.argument("defaultExecutorType", =
String.format(Sys.Res.invalidExecutorType, this._defaultExecutorType));
            }

            webRequest.set_executor(executor);
        }

        if (!executor.get_aborted()) {
            var evArgs =3D new =
Sys.Net.NetworkRequestEventArgs(webRequest);
            Sys.Observer.raiseEvent(this, "invokingRequest", evArgs);
            if (!evArgs.get_cancel()) {
                executor.executeRequest();
            }
        }
    }
}

$type.registerClass('Sys.Net._WebRequestManager');

Sys.Net.WebRequestManager =3D new Sys.Net._WebRequestManager();
$type =3D Sys.Net.NetworkRequestEventArgs =3D function =
NetworkRequestEventArgs(webRequest) {
    /// <summary =
locid=3D"M:J#Sys.Net.NetworkRequestEventArgs.#ctor">This class is raised =
by the WebRequestManager when a WebRequest is about to be =
executed.</summary>
    /// <param name=3D"webRequest" type=3D"Sys.Net.WebRequest">The =
identifier for the event.</param>
    var e =3D Function._validateParams(arguments, [
        {name: "webRequest", type: Sys.Net.WebRequest}
    ]);
    if (e) throw e;
    Sys.Net.NetworkRequestEventArgs.initializeBase(this);
    this._webRequest =3D webRequest;
}

$type.prototype =3D {
    get_webRequest: function NetworkRequestEventArgs$get_webRequest() {
        /// <value type=3D"Sys.Net.WebRequest" =
locid=3D"P:J#Sys.Net.NetworkRequestEventArgs.webRequest">The request =
about to be executed.</value>
        if (arguments.length !=3D=3D 0) throw Error.parameterCount();
        return this._webRequest;
    }
}

$type.registerClass('Sys.Net.NetworkRequestEventArgs', =
Sys.CancelEventArgs);
$type =3D Sys.Net.WebRequest =3D function WebRequest() {
    /// <summary locid=3D"M:J#Sys.Net.WebRequest.#ctor">WebRequest =
class</summary>
    if (arguments.length !=3D=3D 0) throw Error.parameterCount();
    this._url =3D "";
    this._headers =3D { };
    this._body =3D null;
    this._userContext =3D null;
    this._httpVerb =3D null;
}

$type.prototype =3D {
    add_completed: function WebRequest$add_completed(handler) {
        /// <summary =
locid=3D"E:J#Sys.Net.WebRequest.completed"></summary>
        var e =3D Function._validateParams(arguments, [{name: "handler", =
type: Function}]);
        if (e) throw e;
        Sys.Observer.addEventHandler(this, "completed", handler);
    },
    remove_completed: function WebRequest$remove_completed(handler) {
        var e =3D Function._validateParams(arguments, [{name: "handler", =
type: Function}]);
        if (e) throw e;
        Sys.Observer.removeEventHandler(this, "completed", handler);
    },

    completed: function WebRequest$completed(eventArgs) {
        /// <summary locid=3D"M:J#Sys.Net.WebRequest.completed">The =
completed method should be called when the request is =
completed.</summary>
        /// <param name=3D"eventArgs" type=3D"Sys.EventArgs">The event =
args to raise the event with.</param>
        var e =3D Function._validateParams(arguments, [
            {name: "eventArgs", type: Sys.EventArgs}
        ]);
        if (e) throw e;
        function raise(source, sender, eventName) {
            var handler =3D Sys.Observer._getContext(source, =
true).events.getHandler(eventName);
            if (handler) {
                handler(sender, eventArgs);
            }
        }
        raise(Sys.Net.WebRequestManager, this._executor, =
"completedRequest");
        raise(this, this._executor, "completed");
        Sys.Observer.clearEventHandlers(this, "completed");
    },

    get_url: function WebRequest$get_url() {
        /// <value type=3D"String" =
locid=3D"P:J#Sys.Net.WebRequest.url">The url.</value>
        if (arguments.length !=3D=3D 0) throw Error.parameterCount();
        return this._url;
    },
    set_url: function WebRequest$set_url(value) {
        var e =3D Function._validateParams(arguments, [{name: "value", =
type: String}]);
        if (e) throw e;
        this._url =3D value;
    },

    get_headers: function WebRequest$get_headers() {
        /// <value locid=3D"P:J#Sys.Net.WebRequest.headers">The headers =
dictionary for the request.</value>
        if (arguments.length !=3D=3D 0) throw Error.parameterCount();
        return this._headers;
    },

    get_httpVerb: function WebRequest$get_httpVerb() {
        /// <value type=3D"String" =
locid=3D"P:J#Sys.Net.WebRequest.httpVerb">The httpVerb for the =
request.</value>
        if (arguments.length !=3D=3D 0) throw Error.parameterCount();
        if (this._httpVerb =3D=3D=3D null) {
            if (this._body =3D=3D=3D null) {
                return "GET";
            }
            return "POST";
        }
        return this._httpVerb;
    },
    set_httpVerb: function WebRequest$set_httpVerb(value) {
        var e =3D Function._validateParams(arguments, [{name: "value", =
type: String}]);
        if (e) throw e;
        if (value.length =3D=3D=3D 0) {
            throw Error.argument('value', Sys.Res.invalidHttpVerb);
        }
        this._httpVerb =3D value;
    },

    get_body: function WebRequest$get_body() {
        /// <value mayBeNull=3D"true" =
locid=3D"P:J#Sys.Net.WebRequest.body">The body of the request.</value>
        if (arguments.length !=3D=3D 0) throw Error.parameterCount();
        return this._body;
    },
    set_body: function WebRequest$set_body(value) {
        var e =3D Function._validateParams(arguments, [{name: "value", =
mayBeNull: true}]);
        if (e) throw e;
        this._body =3D value;
    },

    get_userContext: function WebRequest$get_userContext() {
        /// <value mayBeNull=3D"true" =
locid=3D"P:J#Sys.Net.WebRequest.userContext">The userContext of the =
request.</value>
        if (arguments.length !=3D=3D 0) throw Error.parameterCount();
        return this._userContext;
    },
    set_userContext: function WebRequest$set_userContext(value) {
        var e =3D Function._validateParams(arguments, [{name: "value", =
mayBeNull: true}]);
        if (e) throw e;
        this._userContext =3D value;
    },

    get_executor: function WebRequest$get_executor() {
        /// <value type=3D"Sys.Net.WebRequestExecutor" =
locid=3D"P:J#Sys.Net.WebRequest.executor">The executor for the =
request.</value>
        if (arguments.length !=3D=3D 0) throw Error.parameterCount();
        return this._executor || null;
    },
    set_executor: function WebRequest$set_executor(value) {
        var e =3D Function._validateParams(arguments, [{name: "value", =
type: Sys.Net.WebRequestExecutor}]);
        if (e) throw e;
        if (this._executor && this._executor.get_started()) {
            throw =
Error.invalidOperation(Sys.Res.setExecutorAfterActive);
        }
        this._executor =3D value;
        value._set_webRequest(this);
    },

    get_timeout: function WebRequest$get_timeout() {
        /// <value type=3D"Number" =
locid=3D"P:J#Sys.Net.WebRequest.timeout">The timeout in milliseconds for =
the request.</value>
        if (arguments.length !=3D=3D 0) throw Error.parameterCount();
        return this._timeout || =
Sys.Net.WebRequestManager.get_defaultTimeout();
    },
    set_timeout: function WebRequest$set_timeout(value) {
        var e =3D Function._validateParams(arguments, [{name: "value", =
type: Number}]);
        if (e) throw e;
        if (value < 0) {
            throw Error.argumentOutOfRange("value", value, =
Sys.Res.invalidTimeout);
        }
        this._timeout =3D value;
    },

    getResolvedUrl: function WebRequest$getResolvedUrl() {
        /// <summary locid=3D"M:J#raise">The getResolvedUrl method =
returns the url resolved against the base url of the page if =
set.</summary>
        /// <returns type=3D"String">The resolved url for the =
request.</returns>
        if (arguments.length !=3D=3D 0) throw Error.parameterCount();
        return Sys.Net.WebRequest._resolveUrl(this._url);
    },

    invoke: function WebRequest$invoke() {
        /// <summary locid=3D"M:J#raise">Invokes the request</summary>
        if (arguments.length !=3D=3D 0) throw Error.parameterCount();
        if (this._invokeCalled) {
            throw Error.invalidOperation(Sys.Res.invokeCalledTwice);
        }
        Sys.Net.WebRequestManager.executeRequest(this);
        this._invokeCalled =3D true;
    }
}

$type._resolveUrl =3D function WebRequest$_resolveUrl(url, baseUrl) {
    if (url && url.indexOf('://') > 0) {
        return url;
    }

    if (!baseUrl || !baseUrl.length) {
        var baseElement =3D Sys.get('base');
        if (baseElement && baseElement.href && baseElement.href.length) =
{
            baseUrl =3D baseElement.href;
        }
        else {
            baseUrl =3D document.URL;
        }
    }

    var qsStart =3D baseUrl.indexOf('?');
    if (qsStart > 0) {
        baseUrl =3D baseUrl.substr(0, qsStart);
    }
    qsStart =3D baseUrl.indexOf('#');
    if (qsStart > 0) {
        baseUrl =3D baseUrl.substr(0, qsStart);
    }
    baseUrl =3D baseUrl.substr(0, baseUrl.lastIndexOf('/') + 1);

    if (!url || !url.length) {
        return baseUrl;
    }

    if (url.charAt(0) =3D=3D=3D '/') {
        var slashslash =3D baseUrl.indexOf('://');
        if (slashslash =3D=3D=3D -1) {
            throw Error.argument("baseUrl", Sys.Res.badBaseUrl1);
        }

        var nextSlash =3D baseUrl.indexOf('/', slashslash + 3);
        if (nextSlash =3D=3D=3D -1) {
            throw Error.argument("baseUrl", Sys.Res.badBaseUrl2);
        }

        return baseUrl.substr(0, nextSlash) + url;
    }
    else {
        var lastSlash =3D baseUrl.lastIndexOf('/');
        if (lastSlash =3D=3D=3D -1) {
            throw Error.argument("baseUrl", Sys.Res.badBaseUrl3);
        }

        return baseUrl.substr(0, lastSlash+1) + url;
    }
}

$type._createQueryString =3D function =
WebRequest$_createQueryString(queryString, encodeMethod, addParams) {
    encodeMethod =3D encodeMethod || encodeURIComponent;
    var i =3D 0, obj, val, arg, sb =3D new Sys.StringBuilder();
    if (queryString) {
        for (arg in queryString) {
            obj =3D queryString[arg];
            if (typeof(obj) =3D=3D=3D "function") continue;
            val =3D =
Sys.Serialization.JavaScriptSerializer.serialize(obj);
            if (i++) {
                sb.append('&');
            }
            sb.append(arg);
            sb.append('=3D');
            sb.append(encodeMethod(val));
        }
    }
    if (addParams) {
        if (i) {
            sb.append('&');
        }
        sb.append(addParams);
    }
    return sb.toString();
}

$type._createUrl =3D function WebRequest$_createUrl(url, queryString, =
addParams) {
    if (!queryString && !addParams) {
        return url;
    }
    var qs =3D Sys.Net.WebRequest._createQueryString(queryString, null, =
addParams);
    return qs.length
        ? url + ((url && url.indexOf('?') >=3D 0) ? "&" : "?") + qs
        : url;
}

$type.registerClass('Sys.Net.WebRequest');



Type.registerNamespace('Sys.Net');

$type =3D Sys.Net.WebServiceProxy =3D function WebServiceProxy() {
    var type =3D Object.getType(this);
   =20
    if (type._staticInstance && =
(typeof(type._staticInstance.get_enableJsonp) =3D=3D=3D "function")) {
        this._jsonp =3D (type._staticInstance.get_enableJsonp());
    }
}
$type.prototype =3D {
    get_timeout: function WebServiceProxy$get_timeout() {
        /// <value type=3D"Number" =
locid=3D"P:J#Sys.Net.WebServiceProxy.timeout">The timeout in =
milliseconds for the service.</value>
        if (arguments.length !=3D=3D 0) throw Error.parameterCount();
        return this._timeout || 0;
    },
    set_timeout: function WebServiceProxy$set_timeout(value) {
        var e =3D Function._validateParams(arguments, [{name: "value", =
type: Number}]);
        if (e) throw e;
        if (value < 0) {
            throw Error.argumentOutOfRange('value', value, =
Sys.Res.invalidTimeout);
        }
        this._timeout =3D value;
    },
    get_defaultUserContext: function =
WebServiceProxy$get_defaultUserContext() {
        /// <value mayBeNull=3D"true" =
locid=3D"P:J#Sys.Net.WebServiceProxy.defaultUserContext">The default =
userContext for this service.</value>
        if (arguments.length !=3D=3D 0) throw Error.parameterCount();
        return (typeof(this._userContext) =3D=3D=3D "undefined") ? null =
: this._userContext;
    },
    set_defaultUserContext: function =
WebServiceProxy$set_defaultUserContext(value) {
        var e =3D Function._validateParams(arguments, [{name: "value", =
mayBeNull: true}]);
        if (e) throw e;
        this._userContext =3D value;
    },
    get_defaultSucceededCallback: function =
WebServiceProxy$get_defaultSucceededCallback() {
        /// <value type=3D"Function" mayBeNull=3D"true" =
locid=3D"P:J#Sys.Net.WebServiceProxy.defaultSucceededCallback">Returns =
the default succeededCallback for this service.</value>
        if (arguments.length !=3D=3D 0) throw Error.parameterCount();
        return this._succeeded || null;
    },
    set_defaultSucceededCallback: function =
WebServiceProxy$set_defaultSucceededCallback(value) {
        var e =3D Function._validateParams(arguments, [{name: "value", =
type: Function, mayBeNull: true}]);
        if (e) throw e;
        this._succeeded =3D value;
    },
    get_defaultFailedCallback: function =
WebServiceProxy$get_defaultFailedCallback() {
        /// <value type=3D"Function" mayBeNull=3D"true" =
locid=3D"P:J#Sys.Net.WebServiceProxy.defaultFailedCallback">Returns the =
default failedCallback for this service.</value>
        if (arguments.length !=3D=3D 0) throw Error.parameterCount();
        return this._failed || null;
    },
    set_defaultFailedCallback: function =
WebServiceProxy$set_defaultFailedCallback(value) {
        var e =3D Function._validateParams(arguments, [{name: "value", =
type: Function, mayBeNull: true}]);
        if (e) throw e;
        this._failed =3D value;
    },
    get_enableJsonp: function WebServiceProxy$get_enableJsonp() {
        /// <value type=3D"Boolean" =
locid=3D"P:J#Sys.Net.WebServiceProxy.enableJsonp">Specifies whether the =
service supports JSONP for cross domain calling.</value>
        if (arguments.length !=3D=3D 0) throw Error.parameterCount();
        return !!this._jsonp;
    },
    set_enableJsonp: function WebServiceProxy$set_enableJsonp(value) {
        var e =3D Function._validateParams(arguments, [{name: "value", =
type: Boolean}]);
        if (e) throw e;
        this._jsonp =3D value;
    },
    get_path: function WebServiceProxy$get_path() {
        /// <value type=3D"String" =
locid=3D"P:J#Sys.Net.WebServiceProxy.path">The path to this =
service.</value>
        if (arguments.length !=3D=3D 0) throw Error.parameterCount();
        return this._path || null;
    },
    set_path: function WebServiceProxy$set_path(value) {
        var e =3D Function._validateParams(arguments, [{name: "value", =
type: String}]);
        if (e) throw e;
        this._path =3D value;
    },
    get_jsonpCallbackParameter: function =
WebServiceProxy$get_jsonpCallbackParameter() {
        /// <value type=3D"String" =
locid=3D"P:J#Sys.Net.WebServiceProxy.jsonpCallbackParameter">Specifies =
the parameter name that contains the callback function name for a JSONP =
request.</value>
        if (arguments.length !=3D=3D 0) throw Error.parameterCount();
        return this._callbackParameter || "callback";
    },
    set_jsonpCallbackParameter: function =
WebServiceProxy$set_jsonpCallbackParameter(value) {
        var e =3D Function._validateParams(arguments, [{name: "value", =
type: String}]);
        if (e) throw e;
        this._callbackParameter =3D value;
    },
    _invoke: function WebServiceProxy$_invoke(servicePath, methodName, =
useGet, params, onSuccess, onFailure, userContext) {
        /// <summary =
locid=3D"M:J#Sys.Net.WebServiceProxy._invoke"></summary>
        /// <param name=3D"servicePath" type=3D"String">Path to the =
webservice</param>
        /// <param name=3D"methodName" type=3D"String">Method to =
invoke</param>
        /// <param name=3D"useGet" type=3D"Boolean">Controls whether =
requests use HttpGet</param>
        /// <param name=3D"params">Method args.</param>
        /// <param name=3D"onSuccess" type=3D"Function" =
mayBeNull=3D"true" optional=3D"true">Success callback</param>
        /// <param name=3D"onFailure" type=3D"Function" =
mayBeNull=3D"true" optional=3D"true">Failure callback</param>
        /// <param name=3D"userContext" mayBeNull=3D"true" =
optional=3D"true">Success callback</param>
        /// <returns type=3D"Sys.Net.WebRequest" =
mayBeNull=3D"true">Returns the request that was sent</returns>
        var e =3D Function._validateParams(arguments, [
            {name: "servicePath", type: String},
            {name: "methodName", type: String},
            {name: "useGet", type: Boolean},
            {name: "params"},
            {name: "onSuccess", type: Function, mayBeNull: true, =
optional: true},
            {name: "onFailure", type: Function, mayBeNull: true, =
optional: true},
            {name: "userContext", mayBeNull: true, optional: true}
        ]);
        if (e) throw e;

        onSuccess =3D onSuccess || this.get_defaultSucceededCallback();
        onFailure =3D onFailure || this.get_defaultFailedCallback();
        if (userContext =3D=3D=3D null || typeof userContext =3D=3D=3D =
'undefined') userContext =3D this.get_defaultUserContext();
        return Sys.Net.WebServiceProxy.invoke(servicePath, methodName, =
useGet, params, onSuccess, onFailure, userContext, this.get_timeout(), =
this.get_enableJsonp(), this.get_jsonpCallbackParameter());
    }
}
$type.registerClass('Sys.Net.WebServiceProxy');

$type.invoke =3D function WebServiceProxy$invoke(servicePath, =
methodName, useGet, params, onSuccess, onFailure, userContext, timeout, =
enableJsonp, jsonpCallbackParameter) {
    /// <summary locid=3D"M:J#Sys.Net.WebServiceProxy.invoke"></summary>
    /// <param name=3D"servicePath" type=3D"String">Path to the =
webservice</param>
    /// <param name=3D"methodName" type=3D"String" mayBeNull=3D"true" =
optional=3D"true">Method to invoke</param>
    /// <param name=3D"useGet" type=3D"Boolean" optional=3D"true" =
mayBeNull=3D"true">Controls whether requests use HttpGet</param>
    /// <param name=3D"params" mayBeNull=3D"true" =
optional=3D"true">Method args.</param>
    /// <param name=3D"onSuccess" type=3D"Function" mayBeNull=3D"true" =
optional=3D"true">Success callback</param>
    /// <param name=3D"onFailure" type=3D"Function" mayBeNull=3D"true" =
optional=3D"true">Failure callback</param>
    /// <param name=3D"userContext" mayBeNull=3D"true" =
optional=3D"true">Success callback</param>
    /// <param name=3D"timeout" type=3D"Number" optional=3D"true" =
mayBeNull=3D"true">Timeout in milliseconds</param>
    /// <param name=3D"enableJsonp" type=3D"Boolean" optional=3D"true" =
mayBeNull=3D"true">Whether to use JSONP if the servicePath is for a =
different domain (default is true).</param>
    /// <param name=3D"jsonpCallbackParameter" type=3D"String" =
optional=3D"true" mayBeNull=3D"true">The name of the callback parameter =
for JSONP request (default is callback).</param>
    /// <returns type=3D"Sys.Net.WebRequest" mayBeNull=3D"true">Returns =
the request that was sent (null for JSONP requests).</returns>
    var e =3D Function._validateParams(arguments, [
        {name: "servicePath", type: String},
        {name: "methodName", type: String, mayBeNull: true, optional: =
true},
        {name: "useGet", type: Boolean, mayBeNull: true, optional: =
true},
        {name: "params", mayBeNull: true, optional: true},
        {name: "onSuccess", type: Function, mayBeNull: true, optional: =
true},
        {name: "onFailure", type: Function, mayBeNull: true, optional: =
true},
        {name: "userContext", mayBeNull: true, optional: true},
        {name: "timeout", type: Number, mayBeNull: true, optional: =
true},
        {name: "enableJsonp", type: Boolean, mayBeNull: true, optional: =
true},
        {name: "jsonpCallbackParameter", type: String, mayBeNull: true, =
optional: true}
    ]);
    if (e) throw e;
    var schemeHost =3D (enableJsonp !=3D=3D false) ? =
Sys.Net.WebServiceProxy._xdomain.exec(servicePath) : null,
        tempCallback, jsonp =3D schemeHost && (schemeHost.length =
=3D=3D=3D 3) &&=20
            ((schemeHost[1] !=3D=3D location.protocol) || (schemeHost[2] =
!=3D=3D location.host));
    useGet =3D jsonp || useGet;
    if (jsonp) {
        jsonpCallbackParameter =3D jsonpCallbackParameter || "callback";
        tempCallback =3D "_jsonp" + Sys._jsonp++;
    }
    if (!params) params =3D {};
    var urlParams =3D params;
    if (!useGet || !urlParams) urlParams =3D {};
    var error, timeoutcookie =3D null, body =3D null,
        url =3D Sys.Net.WebRequest._createUrl(methodName
            ? (servicePath+"/"+encodeURIComponent(methodName))
            : servicePath, urlParams, jsonp ? (jsonpCallbackParameter + =
"=3DSys." + tempCallback) : null);
    if (jsonp) {
        function jsonpComplete(data, statusCode) {
            if (timeoutcookie !=3D=3D null) {
                window.clearTimeout(timeoutcookie);
                timeoutcookie =3D null;
            }
            delete Sys[tempCallback];
            tempCallback =3D null;=20
            if ((typeof(statusCode) !=3D=3D "undefined") && (statusCode =
!=3D=3D 200)) {
                if (onFailure) {
                    error =3D new Sys.Net.WebServiceError(false,
                            data.Message || =
String.format(Sys.Res.webServiceFailedNoMsg, methodName),
                            data.StackTrace || null,
                            data.ExceptionType || null,
                            data);
                    error._statusCode =3D statusCode;
                    onFailure(error, userContext, methodName);
                }
                else {
                    if (data.StackTrace && data.Message) {
                        error =3D data.StackTrace + "-- " + =
data.Message;
                    }
                    else {
                        error =3D data.StackTrace || data.Message;
                    }
                    error =3D String.format(error ? =
Sys.Res.webServiceFailed : Sys.Res.webServiceFailedNoMsg, methodName, =
error);
                    throw =
Sys.Net.WebServiceProxy._createFailedError(methodName, =
String.format(Sys.Res.webServiceFailed, methodName, error));
                }
            }
            else if (onSuccess) {
                onSuccess(data, userContext, methodName);
            }
        }
        Sys[tempCallback] =3D jsonpComplete;
        Sys._loadJsonp(url, function() {
            if (tempCallback) {
                jsonpComplete({ Message: =
String.format(Sys.Res.webServiceFailedNoMsg, methodName) }, -1);
            }
        });
        return null;
    }
    var request =3D new Sys.Net.WebRequest();
    request.set_url(url);
    request.get_headers()['Content-Type'] =3D 'application/json; =
charset=3Dutf-8';
    if (!useGet) {
        body =3D =
Sys.Serialization.JavaScriptSerializer.serialize(params);
        if (body =3D=3D=3D "{}") body =3D "";
    }
    request.set_body(body);
    request.add_completed(onComplete);
    if (timeout > 0) request.set_timeout(timeout);
    request.invoke();
   =20
    function onComplete(response, eventArgs) {
        if (response.get_responseAvailable()) {
            var ex, statusCode =3D response.get_statusCode();
            var result =3D null;
            var isJson;

            try {
                var contentType =3D =
response.getResponseHeader("Content-Type");
                isJson =3D contentType.startsWith("application/json");
                result =3D isJson ? response.get_object() :
                    (contentType.startsWith("text/xml") ? =
response.get_xml() : response.get_responseData());
            }
            catch (ex) {
            }

            var error =3D response.getResponseHeader("jsonerror");
            var errorObj =3D (error =3D=3D=3D "true");
            if (errorObj) {
                if (result) {
                    result =3D new Sys.Net.WebServiceError(false, =
result.Message, result.StackTrace, result.ExceptionType, result);
                }
            }
            else if (isJson) {
                result =3D (!result || (typeof(result.d) =3D=3D=3D =
"undefined")) ? result : result.d;
            }
            if (((statusCode < 200) || (statusCode >=3D 300)) || =
errorObj) {
                if (onFailure) {
                    if (!result || !errorObj) {
                        result =3D new Sys.Net.WebServiceError(false =
/*timedout*/, String.format(Sys.Res.webServiceFailedNoMsg, methodName));
                    }
                    result._statusCode =3D statusCode;
                    onFailure(result, userContext, methodName);
                }
                else {
                    if (result && errorObj) {
                        error =3D result.get_exceptionType() + "-- " + =
result.get_message();
                    }
                    else {
                        error =3D response.get_responseData();
                    }
                    throw =
Sys.Net.WebServiceProxy._createFailedError(methodName, =
String.format(Sys.Res.webServiceFailed, methodName, error));
                }
            }
            else if (onSuccess) {
                onSuccess(result, userContext, methodName);
            }
        }
        else {
            var timedOut =3D response.get_timedOut(),
                msg =3D String.format((timedOut ? =
Sys.Res.webServiceTimedOut : Sys.Res.webServiceFailedNoMsg), =
methodName);
            if (onFailure) {
                onFailure(new Sys.Net.WebServiceError(timedOut, msg, "", =
""), userContext, methodName);
            }
            else {
                throw =
Sys.Net.WebServiceProxy._createFailedError(methodName, msg);
            }
        }
    }

    return request;
}

$type._createFailedError =3D function =
WebServiceProxy$_createFailedError(methodName, errorMessage) {
    var displayMessage =3D "Sys.Net.WebServiceFailedException: " + =
errorMessage;
    var e =3D Error.create(displayMessage, { 'name': =
'Sys.Net.WebServiceFailedException', 'methodName': methodName });
    e.popStackFrame();
    return e;
}

$type._defaultFailedCallback =3D function =
WebServiceProxy$_defaultFailedCallback(err, methodName) {
    var error =3D err.get_exceptionType() + "-- " + err.get_message();
    throw Sys.Net.WebServiceProxy._createFailedError(methodName, =
String.format(Sys.Res.webServiceFailed, methodName, error));
}

$type._generateTypedConstructor =3D function =
WebServiceProxy$_generateTypedConstructor(type) {
    return function(properties) {
        if (properties) {
            for (var name in properties) {
                this[name] =3D properties[name];
            }
        }
        this.__type =3D type;
    }
}

Sys._jsonp =3D 0;

$type._xdomain =3D /^\s*([a-zA-Z0-9\+\-\.]+\:)\/\/([^?#\/]+)/;

Sys._loadJsonp =3D function _loadJsonp(src, callback) {
    var script =3D document.createElement('script');
    script.type =3D 'text/javascript';
    script.src =3D src;
    var attachEvent =3D script.attachEvent;
    function onEvent() {
        if (!attachEvent || /loaded|complete/.test(script.readyState)) {
            if (attachEvent) {
                script.detachEvent("onreadystatechange", onEvent);
            }
            else {
                script.removeEventListener("load", onEvent, false);
                script.removeEventListener("error", onEvent, false);
            }
            callback.apply(script);
            script =3D null;
        }
    }
    if (attachEvent) {
        script.attachEvent("onreadystatechange", onEvent);
    }
    else {
        script.addEventListener("load", onEvent, false);
        script.addEventListener("error", onEvent, false);
    }   =20
    Sys.get("head").appendChild(script);
}
$type =3D Sys.Net.WebServiceError =3D function WebServiceError(timedOut, =
message, stackTrace, exceptionType, errorObject) {
    /// <summary locid=3D"M:J#Sys.Net.WebServiceError.#ctor">Represents =
a webservice error</summary>
    /// <param name=3D"timedOut" type=3D"Boolean">Whether the service =
timed out.</param>
    /// <param name=3D"message" type=3D"String" mayBeNull=3D"true">The =
error message.</param>
    /// <param name=3D"stackTrace" type=3D"String" mayBeNull=3D"true" =
optional=3D"true">The stack trace of the error.</param>
    /// <param name=3D"exceptionType" type=3D"String" mayBeNull=3D"true" =
optional=3D"true">The server exception type.</param>
    /// <param name=3D"errorObject" type=3D"Object" mayBeNull=3D"true" =
optional=3D"true">The raw error information.</param>
    var e =3D Function._validateParams(arguments, [
        {name: "timedOut", type: Boolean},
        {name: "message", type: String, mayBeNull: true},
        {name: "stackTrace", type: String, mayBeNull: true, optional: =
true},
        {name: "exceptionType", type: String, mayBeNull: true, optional: =
true},
        {name: "errorObject", type: Object, mayBeNull: true, optional: =
true}
    ]);
    if (e) throw e;
    this._timedOut =3D timedOut;
    this._message =3D message;
    this._stackTrace =3D stackTrace;
    this._exceptionType =3D exceptionType;
    this._errorObject =3D errorObject;
    this._statusCode =3D -1;
}

$type.prototype =3D {
    get_timedOut: function WebServiceError$get_timedOut() {
        /// <value type=3D"Boolean" =
locid=3D"P:J#Sys.Net.WebServiceError.timedOut">Whether the service =
failed due to timeout.</value>
        if (arguments.length !=3D=3D 0) throw Error.parameterCount();
        return this._timedOut;
    },

    get_statusCode: function WebServiceError$get_statusCode() {
        /// <value type=3D"Number" =
locid=3D"P:J#Sys.Net.WebServiceError.statusCode">Int representing the =
status of the response.</value>
        if (arguments.length !=3D=3D 0) throw Error.parameterCount();
        return this._statusCode;
    },

    get_message: function WebServiceError$get_message() {
        /// <value type=3D"String" =
locid=3D"P:J#Sys.Net.WebServiceError.message">Error message</value>
        if (arguments.length !=3D=3D 0) throw Error.parameterCount();
        return this._message;
    },

    get_stackTrace: function WebServiceError$get_stackTrace() {
        /// <value type=3D"String" =
locid=3D"P:J#Sys.Net.WebServiceError.stackTrace">Stack trace of the =
error.</value>
        if (arguments.length !=3D=3D 0) throw Error.parameterCount();
        return this._stackTrace || "";
    },

    get_exceptionType: function WebServiceError$get_exceptionType() {
        /// <value type=3D"String" =
locid=3D"P:J#Sys.Net.WebServiceError.exceptionType">Exception type of =
the error.</value>
        if (arguments.length !=3D=3D 0) throw Error.parameterCount();
        return this._exceptionType || "";
    },
   =20
    get_errorObject: function WebServiceError$get_errorObject() {
        /// <value type=3D"Object" =
locid=3D"P:J#Sys.Net.WebServiceError.errorObject">The raw error object =
returned by the service.</value>
        if (arguments.length !=3D=3D 0) throw Error.parameterCount();
        return this._errorObject || null;
    }
}
$type.registerClass('Sys.Net.WebServiceError');

Type.registerNamespace("Sys.Services");
var ns =3D Sys.Services;
var service =3D "Service",
    role =3D "Role",
    auth =3D "Authentication",
    profile =3D "Profile";
function setPath(path) {
    this._path =3D path;
}
ns[auth+service] =3D {
    set_path: setPath,
    _setAuthenticated: function(auth) {
        this._auth =3D auth;
    }
};
ns["_" + auth + service] =3D {};

ns[profile + service] =3D { set_path: setPath };
ns["_" + profile + service] =3D {};
ns.ProfileGroup =3D function ns$ProfileGroup(properties) {
    this._propertygroup =3D properties;
}

ns[role + service] =3D { set_path: setPath };
ns["_" + role + service] =3D {};



Sys._domLoaded();
}

if (Sys.loader) {
	Sys.loader.registerScript("MicrosoftAjax", null, execute);
}
else {
	execute();
}

})(window, window.Sys);
var $get, $create, $addHandler, $addHandlers, $clearHandlers;

Type.registerNamespace('Sys');
Sys.Res=3D{
"argumentInteger":"Value must be an integer.",
"argumentType":"Object cannot be converted to the required type.",
"argumentNull":"Value cannot be null.",
"scriptAlreadyLoaded":"The script \u0027{0}\u0027 has been referenced =
multiple times. If referencing Microsoft AJAX scripts explicitly, set =
the MicrosoftAjaxMode property of the ScriptManager to Explicit.",
"scriptDependencyNotFound":"The script \u0027{0}\u0027 failed to load =
because it is dependent on script \u0027{1}\u0027.",
"formatBadFormatSpecifier":"Format specifier was invalid.",
"requiredScriptReferenceNotIncluded":"\u0027{0}\u0027 requires that you =
have included a script reference to \u0027{1}\u0027.",
"webServiceFailedNoMsg":"The server method \u0027{0}\u0027 failed.",
"argumentDomElement":"Value must be a DOM element.",
"actualValue":"Actual value was {0}.",
"enumInvalidValue":"\u0027{0}\u0027 is not a valid value for enum {1}.",
"scriptLoadFailed":"The script \u0027{0}\u0027 could not be loaded.",
"parameterCount":"Parameter count mismatch.",
"cannotDeserializeEmptyString":"Cannot deserialize empty string.",
"formatInvalidString":"Input string was not in a correct format.",
"argument":"Value does not fall within the expected range.",
"cannotDeserializeInvalidJson":"Cannot deserialize. The data does not =
correspond to valid JSON.",
"cannotSerializeNonFiniteNumbers":"Cannot serialize non finite =
numbers.",
"argumentUndefined":"Value cannot be undefined.",
"webServiceInvalidReturnType":"The server method \u0027{0}\u0027 =
returned an invalid type. Expected type: {1}",
"servicePathNotSet":"The path to the web service has not been set.",
"argumentTypeWithTypes":"Object of type \u0027{0}\u0027 cannot be =
converted to type \u0027{1}\u0027.",
"paramName":"Parameter name: {0}",
"nullReferenceInPath":"Null reference while evaluating data path: =
\u0027{0}\u0027.",
"format":"One of the identified items was in an invalid format.",
"assertFailedCaller":"Assertion Failed: {0}\r\nat {1}",
"argumentOutOfRange":"Specified argument was out of the range of valid =
values.",
"webServiceTimedOut":"The server method \u0027{0}\u0027 timed out.",
"notImplemented":"The method or operation is not implemented.",
"assertFailed":"Assertion Failed: {0}",
"invalidOperation":"Operation is not valid due to the current state of =
the object.",
"breakIntoDebugger":"{0}\r\n\r\nBreak into debugger?",
"invokeCalledTwice":"Cannot call invoke more than once.",
"argumentTypeName":"Value is not the name of an existing type.",
"cantBeCalledAfterDispose":"Can\u0027t be called after dispose.",
"webServiceFailed":"The server method \u0027{0}\u0027 failed with the =
following error: {1}",
"componentCantSetIdAfterAddedToApp":"The id property of a component =
can\u0027t be set after it\u0027s been added to the Application =
object.",
"behaviorDuplicateName":"A behavior with name \u0027{0}\u0027 already =
exists or it is the name of an existing property on the target =
element.",
"notATypeName":"Value is not a valid type name.",
"elementNotFound":"An element with id \u0027{0}\u0027 could not be =
found.",
"stateMustBeStringDictionary":"The state object can only have null and =
string fields.",
"invalidExecutorType":"Could not create a valid =
Sys.Net.WebRequestExecutor from: {0}.",
"boolTrueOrFalse":"Value must be \u0027true\u0027 or =
\u0027false\u0027.",
"cannotCallBeforeResponse":"Cannot call {0} when responseAvailable is =
false.",
"scriptLoadFailedNoHead":"ScriptLoader requires pages to contain a =
\u003chead\u003e element.",
"stringFormatInvalid":"The format string is invalid.",
"referenceNotFound":"Component \u0027{0}\u0027 was not found.",
"enumReservedName":"\u0027{0}\u0027 is a reserved name that can\u0027t =
be used as an enum value name.",
"circularParentChain":"The chain of control parents can\u0027t have =
circular references.",
"namespaceContainsNonObject":"Object {0} already exists and is not an =
object.",
"undefinedEvent":"\u0027{0}\u0027 is not an event.",
"invalidTimeout":"Value must be greater than or equal to zero.",
"cannotAbortBeforeStart":"Cannot abort when executor has not started.",
"observableConflict":"Object already contains a member with the name =
\u0027{0}\u0027.",
"invalidHttpVerb":"httpVerb cannot be set to an empty or null string.",
"nullWebRequest":"Cannot call executeRequest with a null webRequest.",
"historyCannotEnableHistory":"Cannot set enableHistory after =
initialization.",
"eventHandlerInvalid":"Handler was not added through the =
Sys.UI.DomEvent.addHandler method.",
"scriptLoadFailedDebug":"The script \u0027{0}\u0027 failed to load. =
Check for:\r\n Inaccessible path.\r\n Script errors. (IE) Enable =
\u0027Display a notification about every script error\u0027 under =
advanced settings.",
"propertyNotWritable":"\u0027{0}\u0027 is not a writable property.",
"enumInvalidValueName":"\u0027{0}\u0027 is not a valid name for an enum =
value.",
"cannotCallOnceStarted":"Cannot call {0} once started.",
"controlAlreadyDefined":"A control is already associated with the =
element.",
"addHandlerCantBeUsedForError":"Can\u0027t add a handler for the error =
event using this method. Please set the window.onerror property =
instead.",
"badBaseUrl1":"Base URL does not contain ://.",
"badBaseUrl2":"Base URL does not contain another /.",
"badBaseUrl3":"Cannot find last / in base URL.",
"setExecutorAfterActive":"Cannot set executor after it has become =
active.",
"cantAddNonFunctionhandler":"Can\u0027t add a handler that is not a =
function.",
"invalidNameSpace":"Value is not a valid namespace identifier.",
"notAnInterface":"Value is not a valid interface.",
"eventHandlerNotFunction":"Handler must be a function.",
"propertyNotAnArray":"\u0027{0}\u0027 is not an Array property.",
"namespaceContainsClass":"Object {0} already exists as a class, enum, or =
interface.",
"typeRegisteredTwice":"Type {0} has already been registered. The type =
may be defined multiple times or the script file that defines it may =
have already been loaded. A possible cause is a change of settings =
during a partial update.",
"cantSetNameAfterInit":"The name property can\u0027t be set on this =
object after initialization.",
"historyMissingFrame":"For the history feature to work in IE, the page =
must have an iFrame element with id \u0027__historyFrame\u0027 pointed =
to a page that gets its title from the \u0027title\u0027 query string =
parameter and calls Sys.Application._onIFrameLoad() on the parent =
window. This can be done by setting EnableHistory to true on =
ScriptManager.",
"appDuplicateComponent":"Two components with the same id \u0027{0}\u0027 =
can\u0027t be added to the application.",
"historyCannotAddHistoryPointWithHistoryDisabled":"A history point can =
only be added if enableHistory is set to true.",
"expectedElementOrId":"Value must be a DOM element or DOM element id.",
"selectorNotFound":"An element with selector \u0027{0}\u0027 could not =
be found.",
"cannotCallOutsideHandler":"Cannot call {0} outside of a completed event =
handler.",
"methodNotFound":"No method found with name \u0027{0}\u0027.",
"arrayParseBadFormat":"Value must be a valid string representation for =
an array. It must start with a \u0027[\u0027 and end with a =
\u0027]\u0027.",
"cannotSerializeObjectWithCycle":"Cannot serialize object with cyclic =
reference within child properties.",
"stateFieldNameInvalid":"State field names must not contain any =
\u0027=3D\u0027 characters.",
"stringFormatBraceMismatch":"The format string contains an unmatched =
opening or closing brace.",
"enumValueNotInteger":"An enumeration definition can only contain =
integer values.",
"propertyNullOrUndefined":"Cannot set the properties of \u0027{0}\u0027 =
because it returned a null value.",
"expectedDomElementOrSelector":"\u0027{0}\u0027 must be a DOM element or =
DOM element selector.",
"argumentDomNode":"Value must be a DOM element or a text node.",
"componentCantSetIdTwice":"The id property of a component can\u0027t be =
set more than once.",
"createComponentOnDom":"Value must be null for Components that are not =
Controls or Behaviors.",
"createNoDom":"Value must not be null for Controls and Behaviors.",
"cantAddWithoutId":"Can\u0027t add a component that doesn\u0027t have an =
id.",
"urlTooLong":"The history state must be small enough to not make the url =
larger than {0} characters.",
"notObservable":"Instances of type \u0027{0}\u0027 cannot be observed.",
"badTypeName":"Value is not the name of the type being registered or the =
name is a reserved word."
};

------=_NextPart_000_0000_01CCB4FE.5AC00BD0
Content-Type: multipart/alternative;
	boundary="----=_NextPart_001_0015_01CCB4FE.5AC93390"


------=_NextPart_001_0015_01CCB4FE.5AC93390
Content-Type: text/html;
	charset="utf-8"
Content-Transfer-Encoding: quoted-printable
Content-Location: http://www.taketopsoft.com/taketoppro/TTWorkFlowDesigner.aspx?IdentifyString=20111128171130

=EF=BB=BF<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" =
"http://www.w3c.org/TR/1999/REC-html401-19991224/loose.dtd">
<HTML xmlns=3D"http://www.w3.org/1999/xhtml"><HEAD=20
id=3DHead1><TITLE>=E5=B7=A5=E4=BD=9C=E6=B5=81=E6=A8=A1=E6=9D=BF=EF=BC=9A=E5=
=90=88=E5=90=8C=E8=AF=84=E5=AE=A1 =E8=AE=BE=E8=AE=A1</TITLE>
<META content=3D"text/html; charset=3Dutf-8" http-equiv=3DContent-Type>
<STYLE type=3Dtext/css>HTML {
	HEIGHT: 100%; OVERFLOW: auto
}
BODY {
	HEIGHT: 100%; OVERFLOW: auto
}
BODY {
	PADDING-BOTTOM: 0px; MARGIN: 0px; PADDING-LEFT: 0px; PADDING-RIGHT: =
0px; PADDING-TOP: 0px
}
#silverlightControlHost {
	TEXT-ALIGN: center; HEIGHT: 100%
}
#OboveForm {
	MIN-WIDTH: 2200px
}
</STYLE>

<SCRIPT type=3Dtext/javascript=20
src=3D"http://www.taketopsoft.com/taketoppro/Silverlight.js"></SCRIPT>

<SCRIPT type=3Dtext/javascript>
        function onSilverlightError(sender, args) {
            var appSource =3D "";
            if (sender !=3D null & sender !=3D 0) {
                appSource =3D sender.getHost().Source;
            }

            var errorType =3D args.ErrorType;
            var iErrorCode =3D args.ErrorCode;

            if (errorType =3D=3D "ImageError" || errorType =3D=3D =
"MediaError") {
                return;
            }

            var errMsg =3D "Silverlight =
=E5=BA=94=E7=94=A8=E7=A8=8B=E5=BA=8F=E4=B8=AD=E6=9C=AA=E5=A4=84=E7=90=86=E7=
=9A=84=E9=94=99=E8=AF=AF " + appSource + "\n";

            errMsg +=3D "=E4=BB=A3=E7=A0=81: " + iErrorCode + "    \n";
            errMsg +=3D "=E7=B1=BB=E5=88=AB: " + errorType + "       =
\n";
            errMsg +=3D "=E6=B6=88=E6=81=AF: " + args.ErrorMessage + "   =
  \n";

            if (errorType =3D=3D "ParserError") {
                errMsg +=3D "=E6=96=87=E4=BB=B6: " + args.xamlFile + "   =
  \n";
                errMsg +=3D "=E8=A1=8C: " + args.lineNumber + "     \n";
                errMsg +=3D "=E4=BD=8D=E7=BD=AE: " + args.charPosition + =
"     \n";
            }
            else if (errorType =3D=3D "RuntimeError") {
                if (args.lineNumber !=3D 0) {
                    errMsg +=3D "=E8=A1=8C: " + args.lineNumber + "     =
\n";
                    errMsg +=3D "=E4=BD=8D=E7=BD=AE: " + =
args.charPosition + "     \n";
                }
                errMsg +=3D "=E6=96=B9=E6=B3=95=E5=90=8D=E7=A7=B0: " + =
args.methodName + "     \n";
            }

            throw new Error(errMsg);
        }
    </SCRIPT>

<META name=3DGENERATOR content=3D"MSHTML 8.00.7600.16891"></HEAD>
<BODY>
<FORM style=3D"HEIGHT: 100%" id=3DOboveForm method=3Dpost =
name=3DOboveForm=20
action=3DTTWorkFlowDesigner.aspx?IdentifyString=3D20111128171130>
<DIV><INPUT id=3D__VIEWSTATE=20
value=3D/wEPDwUHNDcyMzc2NWRkTY3CgO/P18aDpO20UoeV1qMbaKcADqCiGv86YPQFcPI=3D=
=20
type=3Dhidden name=3D__VIEWSTATE> </DIV>
<DIV><INPUT id=3D__EVENTVALIDATION=20
value=3D/wEWAwKGxrrICwLe8pffCQKDrsrkCKUvZLhQmJ/e4rmCwU3m4nGDMvYXZQ5j6SjzC=
70erVfb=20
type=3Dhidden name=3D__EVENTVALIDATION> </DIV>
<TABLE style=3D"WIDTH: 100%; HEIGHT: 100%">
  <TBODY>
  <TR>
    <TD style=3D"WIDTH: 58%; HEIGHT: 100%">
      <DIV style=3D"WIDTH: 100%; FLOAT: left; HEIGHT: 100%"=20
      id=3DsilverlightControlHost>
      <OBJECT data=3D"data:application/x-silverlight-2," width=3D"100%"=20
      height=3D"100%" type=3Dapplication/x-silverlight-2>
                                                                         =
       =20
                                                                         =
  <a=20
      =
href=3D"http://go.microsoft.com/fwlink/?LinkID=3D149156&v=3D4.0.41108.0" =

      style=3D"text-decoration: none">                            <img=20
      src=3D"http://go.microsoft.com/fwlink/?LinkId=3D161376" alt=3D"Get =
Microsoft=20
      Silverlight"                                style=3D"border-style: =
none" /> =20
                            </a>                    </OBJECT><IFRAME=20
      style=3D"BORDER-BOTTOM: 0px; BORDER-LEFT: 0px; WIDTH: 0px; HEIGHT: =
0px; VISIBILITY: hidden; BORDER-TOP: 0px; BORDER-RIGHT: 0px"=20
      id=3D_sl_historyFrame=20
    src=3D"about:blank">
                    </IFRAME></DIV></TD>
    <TD style=3D"WIDTH: 42%; HEIGHT: 100%"><IFRAME=20
      style=3D"WIDTH: 100%; HEIGHT: 100%" id=3D_WFSetAreaFrame=20
      =
src=3D"http://www.taketopsoft.com/taketoppro/TTWFTemplateView.aspx?GUID=3D=
e8451867-b3ad-4864-ba31-20c98fca2a08"></IFRAME></TD></TR>
  <TR>
    <TD colSpan=3D2><INPUT style=3D"VISIBILITY: hidden" id=3DTB_WFXML =
type=3Dtext=20
      name=3DTB_WFXML> <INPUT style=3D"WIDTH: 50px; VISIBILITY: hidden" =
id=3DTB_WFName=20
      value=3D=E5=90=88=E5=90=8C=E8=AF=84=E5=AE=A1 type=3Dtext =
name=3DTB_WFName>=20
</TD></TR></TBODY></TABLE></FORM></BODY></HTML>

------=_NextPart_001_0015_01CCB4FE.5AC93390
Content-Type: application/octet-stream
Content-Transfer-Encoding: quoted-printable
Content-Location: http://www.taketopsoft.com/taketoppro/TTWFTemplateView.aspx?GUID=e8451867-b3ad-4864-ba31-20c98fca2a08

=EF=BB=BF<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" =
"http://www.w3c.org/TR/1999/REC-html401-19991224/loose.dtd">
<HTML xmlns=3D"http://www.w3.org/1999/xhtml"><HEAD =
id=3DHead1><TITLE>=E5=B7=A5=E4=BD=9C=E6=B5=81=E6=A8=A1=E6=9D=BF=EF=BC=9A=E5=
=90=88=E5=90=8C=E8=AF=84=E5=AE=A1 =
=E5=AE=A1=E6=89=B9=E6=AD=A5=E9=AA=A4=E5=88=97=E8=A1=A8</TITLE>
<META content=3D"text/html; charset=3Dutf-8" =
http-equiv=3DContent-Type><LINK=20
rel=3Dstylesheet type=3Dtext/css=20
href=3D"http://www.taketopsoft.com/taketoppro/css/bluelightmain.css">
<META name=3DGENERATOR content=3D"MSHTML 8.00.7600.16891"></HEAD>
<BODY>
<CENTER>
<FORM id=3Dform1 method=3Dpost name=3Dform1=20
action=3DTTWFTemplateView.aspx?GUID=3De8451867-b3ad-4864-ba31-20c98fca2a0=
8>
<DIV><INPUT id=3D__VIEWSTATE=20
value=3D/wEPDwUKMTMzNTE0MDg0NQ9kFgICAw9kFgICAw9kFgJmD2QWCAIBDw8WAh4EVGV4d=
AUM5ZCI5ZCM6K+E5a6hZGQCCw88KwALAQAPFggeCERhdGFLZXlzFgAeC18hSXRlbUNvdW50Ag=
MeCVBhZ2VDb3VudAIBHhVfIURhdGFTb3VyY2VJdGVtQ291bnQCA2QWAmYPZBYGAgEPZBYWZg8=
PFgIfAAUBMWRkAgEPDxYCHwAFFeiQpemUgOmDqOe7j+eQhuWuoeaJuWRkAgIPDxYCHwAFATFk=
ZAIDDw8WAh8ABQExZGQCBA9kFgJmDw8WAh4LTmF2aWdhdGVVcmwFIlRUV0xUU3RlcENvbmRpd=
Glvbi5hc3B4P1N0ZXBJRD03NTFkZAIFDw8WAh8ABQpZRVMgICAgICAgZGQCBg8PFgIfAAUKTk=
8gICAgICAgIGRkAgcPDxYCHwAFCllFUyAgICAgICBkZAIIDw8WAh8ABQpZRVMgICAgICAgZGQ=
CCQ8PFgIfAAUBMmRkAgoPZBYCAgEPDxYCHwAFAzc1MWRkAgIPZBYWZg8PFgIfAAUBMmRkAgEP=
DxYCHwAFFeaKgOacr+mDqOe7j+eQhuWuoeaJuWRkAgIPDxYCHwAFATFkZAIDDw8WAh8ABQExZ=
GQCBA9kFgJmDw8WAh8FBSJUVFdMVFN0ZXBDb25kaXRpb24uYXNweD9TdGVwSUQ9NzUyZGQCBQ=
8PFgIfAAUKWUVTICAgICAgIGRkAgYPDxYCHwAFCk5PICAgICAgICBkZAIHDw8WAh8ABQpZRVM=
gICAgICAgZGQCCA8PFgIfAAUKWUVTICAgICAgIGRkAgkPDxYCHwAFATNkZAIKD2QWAgIBDw8W=
Ah8ABQM3NTJkZAIDD2QWFmYPDxYCHwAFATNkZAIBDw8WAh8ABQ/mgLvnu4/nkIblrqHmiblkZ=
AICDw8WAh8ABQExZGQCAw8PFgIfAAUBMWRkAgQPZBYCZg8PFgIfBQUiVFRXTFRTdGVwQ29uZG=
l0aW9uLmFzcHg/U3RlcElEPTc1M2RkAgUPDxYCHwAFCllFUyAgICAgICBkZAIGDw8WAh8ABQp=
OTyAgICAgICAgZGQCBw8PFgIfAAUKWUVTICAgICAgIGRkAggPDxYCHwAFCllFUyAgICAgICBk=
ZAIJDw8WAh8ABQEwZGQCCg9kFgICAQ8PFgIfAAUDNzUzZGQCGw88KwALAGQCHw8PFgIeB0VuY=
WJsZWRnZGRkn/EMdJZR2uV7vjj9M/tvAkhxrZSIdslD4DuiGwBMBKQ=3D=20
type=3Dhidden name=3D__VIEWSTATE> </DIV>
<SCRIPT type=3Dtext/javascript=20
src=3D"http://www.taketopsoft.com/TakeTopPro/ScriptResource.axd?d=3DzNCcX=
5snSUZN_y4yde3V8RO1LtWiL7g75lBseRYogfG22VkaLeFLbfCAm0bidEbQ2njUYaXCjOfpBe=
-QQ9Ieu3iQCLW-A-zyFW2RcP1Utw3cGNerCt08mDGSU83SZ5TjC-KwNdczB-0acXW7BxTsGw2=
&amp;t=3Dffffffffbd2983fc"></SCRIPT>

<SCRIPT type=3Dtext/javascript>
//<![CDATA[
if (typeof(Sys) =3D=3D=3D 'undefined') throw new Error('ASP.NET Ajax =
client-side framework failed to load.');
//]]>
</SCRIPT>

<DIV><INPUT id=3D__EVENTVALIDATION=20
value=3D/wEWBwKX2JjyCwL8/9XYAQLh7oGyAQLG4sXpBQKkzd7zDwL9y4x5At7yl98JlgjRk=
Q+UxayyVi/MXotqCWeYV67JM1zeCxHkYNJoH3w=3D=20
type=3Dhidden name=3D__EVENTVALIDATION> </DIV>
<DIV id=3DUpdatePanel1>
<TABLE class=3Dbian cellSpacing=3D0 cellPadding=3D0 width=3D"100%">
  <TBODY>
  <TR>
    <TD height=3D31=20
    =
background=3Dhttp://www.taketopsoft.com/taketoppro/images_blue/page_topbj=
.jpg>
      <TABLE border=3D0 cellSpacing=3D0 cellPadding=3D0 width=3D"96%" =
align=3Dcenter>
        <TBODY>
        <TR>
          <TD align=3Dleft>
            <TABLE border=3D0 cellSpacing=3D0 cellPadding=3D0 =
width=3D250 align=3Dleft>
              <TBODY>
              <TR>
                <TD width=3D29><IMG alt=3D""=20
                  =
src=3D"http://www.taketopsoft.com/taketoppro/images_blue/main_top_l.jpg" =

                  width=3D29 height=3D31></TD>
                <TD class=3Dtitlezi=20
                =
background=3Dhttp://www.taketopsoft.com/taketoppro/images_blue/main_top_b=
j.jpg=20
                align=3Dmiddle><SPAN style=3D"FONT-SIZE: 10pt"=20
                  =
id=3DLB_WorkFlow>=E5=90=88=E5=90=8C=E8=AF=84=E5=AE=A1</SPAN> &nbsp; =
=E6=AD=A5=E9=AA=A4=E5=88=97=E8=A1=A8=EF=BC=9A </TD>
                <TD width=3D5><IMG=20
                  =
src=3D"http://www.taketopsoft.com/taketoppro/images_blue/main_top_r.jpg" =

                  width=3D5=20
  =
height=3D31></TD></TR></TBODY></TABLE></TD></TR></TBODY></TABLE></TD></TR=
>
  <TR>
    <TD class=3DtdBottom>
      <TABLE style=3D"WIDTH: 100%">
        <TBODY>
        <TR>
          <TD>
            <TABLE style=3D"WIDTH: 98%">
              <TBODY>
              <TR>
                <TD style=3D"TEXT-ALIGN: left" colSpan=3D2></TD></TR>
              <TR>
                <TD colSpan=3D2>
                  <TABLE border=3D0 cellSpacing=3D0 cellPadding=3D0 =
width=3D"98%"=20
                  =
background=3Dhttp://www.taketopsoft.com/taketoppro/images_blue/main_n_bj.=
jpg>
                    <TBODY>
                    <TR>
                      <TD width=3D7><IMG=20
                        =
src=3D"http://www.taketopsoft.com/taketoppro/images_blue/main_n_l.jpg"=20
                        width=3D7 height=3D26></TD>
                      <TD>
                        <TABLE border=3D0 cellSpacing=3D0 =
cellPadding=3D0=20
width=3D"100%">
                          <TBODY>
                          <TR>
                            <TD width=3D"5%" =
align=3Dmiddle><STRONG>=E6=AD=A5=E5=BA=8F</STRONG>=20
</TD>
                            <TD width=3D"20%" =
align=3Dmiddle><STRONG>=E5=90=8D=E7=A7=B0</STRONG>=20
                            </TD>
                            <TD width=3D"8%" =
align=3Dmiddle><STRONG>=E6=9C=80=E5=B0=91=E4=BA=BA=E6=95=B0</STRONG>=20
                            </TD>
                            <TD width=3D"10%"=20
                              =
align=3Dmiddle><STRONG>=E6=97=B6=E9=97=B4=EF=BC=88=E5=B0=8F=E6=97=B6=EF=BC=
=89</STRONG> </TD>
                            <TD width=3D"5%" =
align=3Dmiddle><STRONG>=E6=9D=A1=E4=BB=B6</STRONG>=20
</TD>
                            <TD width=3D"10%" =
align=3Dmiddle><STRONG>=E9=83=A8=E9=97=A8=E7=9B=B8=E5=85=B3</STRONG>=20
                            </TD>
                            <TD width=3D"8%" =
align=3Dmiddle><STRONG>=E8=87=AA=E9=80=89=E5=AE=A1=E6=89=B9=E4=BA=BA</STR=
ONG>=20
                            </TD>
                            <TD width=3D"8%" =
align=3Dmiddle><STRONG>=E5=8F=91=E7=9F=AD=E4=BF=A1</STRONG>=20
                            </TD>
                            <TD width=3D"8%" =
align=3Dmiddle><STRONG>=E5=8F=91=E9=82=AE=E4=BB=B6</STRONG>=20
                            </TD>
                            <TD width=3D"8%" =
align=3Dmiddle><STRONG>=E4=B8=8B=E4=B8=80=E6=AD=A5</STRONG>=20
                            </TD>
                            <TD width=3D"10%"=20
                          =
align=3Dmiddle><STRONG></STRONG></TD></TR></TBODY></TABLE></TD>
                      <TD width=3D6 align=3Dright><IMG alt=3D""=20
                        =
src=3D"http://www.taketopsoft.com/taketoppro/images_blue/main_n_r.jpg"=20
                        width=3D6 height=3D26></TD></TR></TBODY></TABLE>
                  <TABLE=20
                  style=3D"WIDTH: 98%; BORDER-COLLAPSE: collapse; =
HEIGHT: 1px; COLOR: #333333"=20
                  id=3DDataGrid2 border=3D0 cellSpacing=3D0 =
cellPadding=3D4>
                    <TBODY>
                    <TR class=3DitemStyle>
                      <TD style=3D"WIDTH: 5%" class=3DitemBorder =
align=3Dmiddle>1</TD>
                      <TD style=3D"WIDTH: 20%" class=3DitemBorder=20
                        =
align=3Dleft>=E8=90=A5=E9=94=80=E9=83=A8=E7=BB=8F=E7=90=86=E5=AE=A1=E6=89=
=B9</TD>
                      <TD style=3D"WIDTH: 8%" class=3DitemBorder =
align=3Dmiddle>1</TD>
                      <TD style=3D"WIDTH: 10%" class=3DitemBorder=20
align=3Dmiddle>1</TD>
                      <TD style=3D"WIDTH: 5%" class=3DitemBorder =
align=3Dmiddle><A=20
                        =
href=3D"http://www.taketopsoft.com/taketoppro/TTWLTStepCondition.aspx?Ste=
pID=3D751"=20
                        target=3D_blank>=E6=9D=A1=E4=BB=B6</A></TD>
                      <TD style=3D"WIDTH: 10%" class=3DitemBorder =
align=3Dmiddle>YES=20
                      </TD>
                      <TD style=3D"WIDTH: 8%" class=3DitemBorder =
align=3Dmiddle>NO=20
                      </TD>
                      <TD style=3D"WIDTH: 8%" class=3DitemBorder =
align=3Dmiddle>YES=20
                      </TD>
                      <TD style=3D"WIDTH: 8%" class=3DitemBorder =
align=3Dmiddle>YES=20
                      </TD>
                      <TD style=3D"WIDTH: 8%" class=3DitemBorder =
align=3Dmiddle>2</TD>
                      <TD style=3D"WIDTH: 10%" class=3DitemBorder =
align=3Dmiddle><INPUT id=3DDataGrid2_ctl02_BT_StepID class=3Dinpu =
value=3D751 type=3Dsubmit name=3DDataGrid2$ctl02$BT_StepID>=20
                      </TD></TR>
                    <TR style=3D"BACKGROUND-COLOR: white" =
class=3DitemStyle>
                      <TD style=3D"WIDTH: 5%" class=3DitemBorder =
align=3Dmiddle>2</TD>
                      <TD style=3D"WIDTH: 20%" class=3DitemBorder=20
                        =
align=3Dleft>=E6=8A=80=E6=9C=AF=E9=83=A8=E7=BB=8F=E7=90=86=E5=AE=A1=E6=89=
=B9</TD>
                      <TD style=3D"WIDTH: 8%" class=3DitemBorder =
align=3Dmiddle>1</TD>
                      <TD style=3D"WIDTH: 10%" class=3DitemBorder=20
align=3Dmiddle>1</TD>
                      <TD style=3D"WIDTH: 5%" class=3DitemBorder =
align=3Dmiddle><A=20
                        =
href=3D"http://www.taketopsoft.com/taketoppro/TTWLTStepCondition.aspx?Ste=
pID=3D752"=20
                        target=3D_blank>=E6=9D=A1=E4=BB=B6</A></TD>
                      <TD style=3D"WIDTH: 10%" class=3DitemBorder =
align=3Dmiddle>YES=20
                      </TD>
                      <TD style=3D"WIDTH: 8%" class=3DitemBorder =
align=3Dmiddle>NO=20
                      </TD>
                      <TD style=3D"WIDTH: 8%" class=3DitemBorder =
align=3Dmiddle>YES=20
                      </TD>
                      <TD style=3D"WIDTH: 8%" class=3DitemBorder =
align=3Dmiddle>YES=20
                      </TD>
                      <TD style=3D"WIDTH: 8%" class=3DitemBorder =
align=3Dmiddle>3</TD>
                      <TD style=3D"WIDTH: 10%" class=3DitemBorder =
align=3Dmiddle><INPUT id=3DDataGrid2_ctl03_BT_StepID class=3Dinpu =
value=3D752 type=3Dsubmit name=3DDataGrid2$ctl03$BT_StepID>=20
                      </TD></TR>
                    <TR class=3DitemStyle>
                      <TD style=3D"WIDTH: 5%" class=3DitemBorder =
align=3Dmiddle>3</TD>
                      <TD style=3D"WIDTH: 20%" class=3DitemBorder=20
                      =
align=3Dleft>=E6=80=BB=E7=BB=8F=E7=90=86=E5=AE=A1=E6=89=B9</TD>
                      <TD style=3D"WIDTH: 8%" class=3DitemBorder =
align=3Dmiddle>1</TD>
                      <TD style=3D"WIDTH: 10%" class=3DitemBorder=20
align=3Dmiddle>1</TD>
                      <TD style=3D"WIDTH: 5%" class=3DitemBorder =
align=3Dmiddle><A=20
                        =
href=3D"http://www.taketopsoft.com/taketoppro/TTWLTStepCondition.aspx?Ste=
pID=3D753"=20
                        target=3D_blank>=E6=9D=A1=E4=BB=B6</A></TD>
                      <TD style=3D"WIDTH: 10%" class=3DitemBorder =
align=3Dmiddle>YES=20
                      </TD>
                      <TD style=3D"WIDTH: 8%" class=3DitemBorder =
align=3Dmiddle>NO=20
                      </TD>
                      <TD style=3D"WIDTH: 8%" class=3DitemBorder =
align=3Dmiddle>YES=20
                      </TD>
                      <TD style=3D"WIDTH: 8%" class=3DitemBorder =
align=3Dmiddle>YES=20
                      </TD>
                      <TD style=3D"WIDTH: 8%" class=3DitemBorder =
align=3Dmiddle>0</TD>
                      <TD style=3D"WIDTH: 10%" class=3DitemBorder =
align=3Dmiddle><INPUT id=3DDataGrid2_ctl04_BT_StepID class=3Dinpu =
value=3D753 type=3Dsubmit name=3DDataGrid2$ctl04$BT_StepID>=20
                      </TD></TR></TBODY></TABLE></TD></TR>
              <TR>
                <TD style=3D"TEXT-ALIGN: left; HEIGHT: 20px"=20
              colSpan=3D2>&nbsp;</TD></TR>
              <TR>
                <TD class=3DtdBottom colSpan=3D2 align=3Dleft>&nbsp; =
<INPUT id=3DBT_DeleteWFTStep class=3DinpuLong disabled =
value=3D"-->=E5=88=A0=E9=99=A4=E6=89=80=E9=80=89=E6=AD=A5=E9=AA=A4" =
type=3Dsubmit name=3DBT_DeleteWFTStep>=20
                </TD></TR>
              <TR>
                <TD style=3D"TEXT-ALIGN: left; HEIGHT: 20px"=20
              colSpan=3D2>&nbsp;</TD></TR>
              <TR>
                <TD style=3D"TEXT-ALIGN: =
left">=E6=AD=A5=E5=BA=8F=EF=BC=9A<SPAN=20
                  id=3DLB_SortNumber></SPAN>&nbsp; <SPAN =
id=3DLB_StepName></SPAN>=E6=98=8E=E7=BB=86=EF=BC=9A=20
                </TD>
                <TD style=3D"TEXT-ALIGN: left; WIDTH: 200px"></TD></TR>
              <TR>
                <TD style=3D"TEXT-ALIGN: center" colSpan=3D2>
                  <TABLE border=3D0 cellSpacing=3D0 cellPadding=3D0 =
width=3D"98%"=20
                  =
background=3Dhttp://www.taketopsoft.com/taketoppro/images_blue/main_n_bj.=
jpg>
                    <TBODY>
                    <TR>
                      <TD width=3D7><IMG=20
                        =
src=3D"http://www.taketopsoft.com/taketoppro/images_blue/main_n_l.jpg"=20
                        width=3D7 height=3D26></TD>
                      <TD>
                        <TABLE border=3D0 cellSpacing=3D0 =
cellPadding=3D0=20
width=3D"100%">
                          <TBODY>
                          <TR>
                            <TD width=3D"25%"=20
                              =
align=3Dmiddle><STRONG>=E5=8F=82=E4=B8=8E=E8=A7=92=E8=89=B2=E7=BB=84</STR=
ONG> </TD>
                            <TD width=3D"25%" =
align=3Dmiddle><STRONG>=E5=B7=A5=E4=BD=9C</STRONG>=20
                            </TD>
                            <TD width=3D"20%" =
align=3Dmiddle><STRONG>=E6=89=BF=E6=8B=85=E8=A7=92=E8=89=B2</STRONG>=20
                            </TD>
                            <TD width=3D"15%" =
align=3Dmiddle><STRONG>=E6=98=AF=E5=90=A6=E5=BF=85=E9=9C=80</STRONG>=20
                            </TD>
                            <TD width=3D"15%"=20
                              =
align=3Dmiddle><STRONG>=E6=97=B6=E9=97=B4=EF=BC=88=E5=B0=8F=E6=97=B6=EF=BC=
=89</STRONG>=20
                        </TD></TR></TBODY></TABLE></TD>
                      <TD width=3D6 align=3Dright><IMG alt=3D""=20
                        =
src=3D"http://www.taketopsoft.com/taketoppro/images_blue/main_n_r.jpg"=20
                        width=3D6=20
            =
height=3D26></TD></TR></TBODY></TABLE></TD></TR></TBODY></TABLE></TD></TR=
></TBODY></TABLE></TD></TR>
  <TR>
    <TD align=3Dleft>&nbsp;</TD></TR>
  <TR>
    <TD align=3Dleft></TD></TR>
  <TR>
    <TD class=3DtdBottom align=3Dleft>&nbsp;&nbsp; <INPUT =
id=3DBT_SaveWFDefinition class=3DinpuLong =
value=3D"-->=E4=BF=9D=E5=AD=98=E5=B7=A5=E4=BD=9C=E6=B5=81=E6=A8=A1=E6=9D=BF=
=E5=AE=9A=E4=B9=89" type=3Dsubmit name=3DBT_SaveWFDefinition>=20
    </TD></TR>
  <TR>
    <TD class=3DtdBottom align=3Dleft><INPUT style=3D"VISIBILITY: =
hidden"=20
      id=3DTB_WFXML type=3Dtext name=3DTB_WFXML> =
</TD></TR></TBODY></TABLE></DIV>
<DIV style=3D"POSITION: absolute; TOP: 40%; LEFT: 40%">
<DIV style=3D"DISPLAY: none" id=3DTakeTopUp><IMG =
alt=3D=E8=AF=B7=E7=A8=8D=E5=80=99=EF=BC=8C=E5=A4=84=E7=90=86=E4=B8=AD... =

src=3D"http://www.taketopsoft.com/taketoppro/Images_blue/Processing.gif">=
=20
</DIV></DIV>
<SCRIPT type=3Dtext/javascript>
//<![CDATA[
javascript:document.forms[0]['TB_WFXML'].value=3Dwindow.parent.document.g=
etElementById('TB_WFXML').value;//]]>
</SCRIPT>
</FORM></CENTER></BODY></HTML>

------=_NextPart_001_0015_01CCB4FE.5AC93390--

------=_NextPart_000_0000_01CCB4FE.5AC00BD0
Content-Type: application/octet-stream
Content-Transfer-Encoding: quoted-printable
Content-Location: http://www.taketopsoft.com/taketoppro/Silverlight.js

//v4.0.50401.0
if(!window.Silverlight)window.Silverlight=3D{};Silverlight._silverlightCo=
unt=3D0;Silverlight.__onSilverlightInstalledCalled=3Dfalse;Silverlight.fw=
linkRoot=3D"http://go2.microsoft.com/fwlink/?LinkID=3D";Silverlight.__ins=
tallationEventFired=3Dfalse;Silverlight.onGetSilverlight=3Dnull;Silverlig=
ht.onSilverlightInstalled=3Dfunction(){window.location.reload(false)};Sil=
verlight.isInstalled=3Dfunction(b){if(b=3D=3Dundefined)b=3Dnull;var =
a=3Dfalse,m=3Dnull;try{var =
i=3Dnull,j=3Dfalse;if(window.ActiveXObject)try{i=3Dnew =
ActiveXObject("AgControl.AgControl");if(b=3D=3D=3Dnull)a=3Dtrue;else =
if(i.IsVersionSupported(b))a=3Dtrue;i=3Dnull}catch(l){j=3Dtrue}else =
j=3Dtrue;if(j){var k=3Dnavigator.plugins["Silverlight =
Plug-In"];if(k)if(b=3D=3D=3Dnull)a=3Dtrue;else{var =
h=3Dk.description;if(h=3D=3D=3D"1.0.30226.2")h=3D"2.0.30226.2";var =
c=3Dh.split(".");while(c.length>3)c.pop();while(c.length<4)c.push(0);var =
e=3Db.split(".");while(e.length>4)e.pop();var =
d,g,f=3D0;do{d=3DparseInt(e[f]);g=3DparseInt(c[f]);f++}while(f<e.length&&=
d=3D=3D=3Dg);if(d<=3Dg&&!isNaN(d))a=3Dtrue}}}catch(l){a=3Dfalse}return =
a};Silverlight.WaitForInstallCompletion=3Dfunction(){if(!Silverlight.isBr=
owserRestartRequired&&Silverlight.onSilverlightInstalled){try{navigator.p=
lugins.refresh()}catch(a){}if(Silverlight.isInstalled(null)&&!Silverlight=
.__onSilverlightInstalledCalled){Silverlight.onSilverlightInstalled();Sil=
verlight.__onSilverlightInstalledCalled=3Dtrue}else =
setTimeout(Silverlight.WaitForInstallCompletion,3e3)}};Silverlight.__star=
tup=3Dfunction(){navigator.plugins.refresh();Silverlight.isBrowserRestart=
Required=3DSilverlight.isInstalled(null);if(!Silverlight.isBrowserRestart=
Required){Silverlight.WaitForInstallCompletion();if(!Silverlight.__instal=
lationEventFired){Silverlight.onInstallRequired();Silverlight.__installat=
ionEventFired=3Dtrue}}else if(window.navigator.mimeTypes){var =
b=3Dnavigator.mimeTypes["application/x-silverlight-2"],c=3Dnavigator.mime=
Types["application/x-silverlight-2-b2"],d=3Dnavigator.mimeTypes["applicat=
ion/x-silverlight-2-b1"],a=3Dd;if(c)a=3Dc;if(!b&&(d||c)){if(!Silverlight.=
__installationEventFired){Silverlight.onUpgradeRequired();Silverlight.__i=
nstallationEventFired=3Dtrue}}else =
if(b&&a)if(b.enabledPlugin&&a.enabledPlugin)if(b.enabledPlugin.descriptio=
n!=3Da.enabledPlugin.description)if(!Silverlight.__installationEventFired=
){Silverlight.onRestartRequired();Silverlight.__installationEventFired=3D=
true}}if(!Silverlight.disableAutoStartup)if(window.removeEventListener)wi=
ndow.removeEventListener("load",Silverlight.__startup,false);else =
window.detachEvent("onload",Silverlight.__startup)};if(!Silverlight.disab=
leAutoStartup)if(window.addEventListener)window.addEventListener("load",S=
ilverlight.__startup,false);else =
window.attachEvent("onload",Silverlight.__startup);Silverlight.createObje=
ct=3Dfunction(m,f,e,k,l,h,j){var =
d=3D{},a=3Dk,c=3Dl;d.version=3Da.version;a.source=3Dm;d.alt=3Da.alt;if(h)=
a.initParams=3Dh;if(a.isWindowless&&!a.windowless)a.windowless=3Da.isWind=
owless;if(a.framerate&&!a.maxFramerate)a.maxFramerate=3Da.framerate;if(e&=
&!a.id)a.id=3De;delete a.ignoreBrowserVer;delete =
a.inplaceInstallPrompt;delete a.version;delete a.isWindowless;delete =
a.framerate;delete a.data;delete a.src;delete =
a.alt;if(Silverlight.isInstalled(d.version)){for(var b in =
c)if(c[b]){if(b=3D=3D"onLoad"&&typeof =
c[b]=3D=3D"function"&&c[b].length!=3D1){var =
i=3Dc[b];c[b]=3Dfunction(a){return =
i(document.getElementById(e),j,a)}}var =
g=3DSilverlight.__getHandlerName(c[b]);if(g!=3Dnull){a[b]=3Dg;c[b]=3Dnull=
}else throw"typeof events."+b+" must be 'function' or =
'string'";}slPluginHTML=3DSilverlight.buildHTML(a)}else =
slPluginHTML=3DSilverlight.buildPromptHTML(d);if(f)f.innerHTML=3DslPlugin=
HTML;else return slPluginHTML};Silverlight.buildHTML=3Dfunction(a){var =
b=3D[];b.push('<object type=3D"application/x-silverlight" =
data=3D"data:application/x-silverlight,"');if(a.id!=3Dnull)b.push(' =
id=3D"'+Silverlight.HtmlAttributeEncode(a.id)+'"');if(a.width!=3Dnull)b.p=
ush(' width=3D"'+a.width+'"');if(a.height!=3Dnull)b.push(' =
height=3D"'+a.height+'"');b.push(" >");delete a.id;delete a.width;delete =
a.height;for(var c in a)if(a[c])b.push('<param =
name=3D"'+Silverlight.HtmlAttributeEncode(c)+'" =
value=3D"'+Silverlight.HtmlAttributeEncode(a[c])+'" =
/>');b.push("</object>");return =
b.join("")};Silverlight.createObjectEx=3Dfunction(b){var =
a=3Db,c=3DSilverlight.createObject(a.source,a.parentElement,a.id,a.proper=
ties,a.events,a.initParams,a.context);if(a.parentElement=3D=3Dnull)return=
 c};Silverlight.buildPromptHTML=3Dfunction(b){var =
a=3D"",d=3DSilverlight.fwlinkRoot,c=3Db.version;if(b.alt)a=3Db.alt;else{i=
f(!c)c=3D"";a=3D"<a =
href=3D'javascript:Silverlight.getSilverlight(\"{1}\");' =
style=3D'text-decoration: none;'><img src=3D'{2}' alt=3D'Get Microsoft =
Silverlight' style=3D'border-style: =
none'/></a>";a=3Da.replace("{1}",c);a=3Da.replace("{2}",d+"108181")}retur=
n =
a};Silverlight.getSilverlight=3Dfunction(e){if(Silverlight.onGetSilverlig=
ht)Silverlight.onGetSilverlight();var =
b=3D"",a=3DString(e).split(".");if(a.length>1){var =
c=3DparseInt(a[0]);if(isNaN(c)||c<2)b=3D"1.0";else b=3Da[0]+"."+a[1]}var =
d=3D"";if(b.match(/^\d+\056\d+$/))d=3D"&v=3D"+b;Silverlight.followFWLink(=
"149156"+d)};Silverlight.followFWLink=3Dfunction(a){top.location=3DSilver=
light.fwlinkRoot+String(a)};Silverlight.HtmlAttributeEncode=3Dfunction(c)=
{var a,b=3D"";if(c=3D=3Dnull)return null;for(var =
d=3D0;d<c.length;d++){a=3Dc.charCodeAt(d);if(a>96&&a<123||a>64&&a<91||a>4=
3&&a<58&&a!=3D47||a=3D=3D95)b=3Db+String.fromCharCode(a);else =
b=3Db+"&#"+a+";"}return =
b};Silverlight.default_error_handler=3Dfunction(e,b){var =
d,c=3Db.ErrorType;d=3Db.ErrorCode;var a=3D"\nSilverlight error message   =
  \n";a+=3D"ErrorCode: "+d+"\n";a+=3D"ErrorType: "+c+"       =
\n";a+=3D"Message: "+b.ErrorMessage+"     =
\n";if(c=3D=3D"ParserError"){a+=3D"XamlFile: "+b.xamlFile+"     =
\n";a+=3D"Line: "+b.lineNumber+"     \n";a+=3D"Position: =
"+b.charPosition+"     \n"}else =
if(c=3D=3D"RuntimeError"){if(b.lineNumber!=3D0){a+=3D"Line: =
"+b.lineNumber+"     \n";a+=3D"Position: "+b.charPosition+"     =
\n"}a+=3D"MethodName: "+b.methodName+"     =
\n"}alert(a)};Silverlight.__cleanup=3Dfunction(){for(var =
a=3DSilverlight._silverlightCount-1;a>=3D0;a--)window["__slEvent"+a]=3Dnu=
ll;Silverlight._silverlightCount=3D0;if(window.removeEventListener)window=
.removeEventListener("unload",Silverlight.__cleanup,false);else =
window.detachEvent("onunload",Silverlight.__cleanup)};Silverlight.__getHa=
ndlerName=3Dfunction(b){var a=3D"";if(typeof b=3D=3D"string")a=3Db;else =
if(typeof =
b=3D=3D"function"){if(Silverlight._silverlightCount=3D=3D0)if(window.addE=
ventListener)window.addEventListener("unload",Silverlight.__cleanup,false=
);else window.attachEvent("onunload",Silverlight.__cleanup);var =
c=3DSilverlight._silverlightCount++;a=3D"__slEvent"+c;window[a]=3Db}else =
a=3Dnull;return =
a};Silverlight.onRequiredVersionAvailable=3Dfunction(){};Silverlight.onRe=
startRequired=3Dfunction(){};Silverlight.onUpgradeRequired=3Dfunction(){}=
;Silverlight.onInstallRequired=3Dfunction(){};Silverlight.IsVersionAvaila=
bleOnError=3Dfunction(d,a){var =
b=3Dfalse;try{if(a.ErrorCode=3D=3D8001&&!Silverlight.__installationEventF=
ired){Silverlight.onUpgradeRequired();Silverlight.__installationEventFire=
d=3Dtrue}else =
if(a.ErrorCode=3D=3D8002&&!Silverlight.__installationEventFired){Silverli=
ght.onRestartRequired();Silverlight.__installationEventFired=3Dtrue}else =
if(a.ErrorCode=3D=3D5014||a.ErrorCode=3D=3D2106){if(Silverlight.__verifyS=
ilverlight2UpgradeSuccess(a.getHost()))b=3Dtrue}else =
b=3Dtrue}catch(c){}return =
b};Silverlight.IsVersionAvailableOnLoad=3Dfunction(b){var =
a=3Dfalse;try{if(Silverlight.__verifySilverlight2UpgradeSuccess(b.getHost=
()))a=3Dtrue}catch(c){}return =
a};Silverlight.__verifySilverlight2UpgradeSuccess=3Dfunction(d){var =
c=3Dfalse,b=3D"4.0.50401",a=3Dnull;try{if(d.IsVersionSupported(b+".99")){=
a=3DSilverlight.onRequiredVersionAvailable;c=3Dtrue}else =
if(d.IsVersionSupported(b+".0"))a=3DSilverlight.onRestartRequired;else =
a=3DSilverlight.onUpgradeRequired;if(a&&!Silverlight.__installationEventF=
ired){a();Silverlight.__installationEventFired=3Dtrue}}catch(e){}return =
c}
------=_NextPart_000_0000_01CCB4FE.5AC00BD0--
